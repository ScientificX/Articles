%!PS-Adobe-2.0
%%Creator: dvips(k) 5.86e Copyright 2001 Radical Eye Software
%%Title: main.dvi
%%Pages: 13
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: Helvetica
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips main.dvi -o
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 2003.09.26:0955
%%BeginProcSet: texc.pro
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/id 0 N/rw 0 N/rc 0 N/gp 0 N/cp 0 N/G 0 N/CharBuilder{save 3
1 roll S A/base get 2 index get S/BitMaps get S get/Cd X pop/ctr 0 N Cdx
0 Cx Cy Ch sub Cx Cw add Cy setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx
sub Cy .1 sub]/id Ci N/rw Cw 7 add 8 idiv string N/rc 0 N/gp 0 N/cp 0 N{
rc 0 ne{rc 1 sub/rc X rw}{G}ifelse}imagemask restore}B/G{{id gp get/gp
gp 1 add N A 18 mod S 18 idiv pl S get exec}loop}B/adv{cp add/cp X}B
/chg{rw cp id gp 4 index getinterval putinterval A gp add/gp X adv}B/nd{
/cp 0 N rw exit}B/lsh{rw cp 2 copy get A 0 eq{pop 1}{A 255 eq{pop 254}{
A A add 255 and S 1 and or}ifelse}ifelse put 1 adv}B/rsh{rw cp 2 copy
get A 0 eq{pop 128}{A 255 eq{pop 127}{A 2 idiv S 128 and or}ifelse}
ifelse put 1 adv}B/clr{rw cp 2 index string putinterval adv}B/set{rw cp
fillstr 0 4 index getinterval putinterval adv}B/fillstr 18 string 0 1 17
{2 copy 255 put pop}for N/pl[{adv 1 chg}{adv 1 chg nd}{1 add chg}{1 add
chg nd}{adv lsh}{adv lsh nd}{adv rsh}{adv rsh nd}{1 add adv}{/rc X nd}{
1 add set}{1 add clr}{adv 2 chg}{adv 2 chg nd}{pop nd}]A{bind pop}
forall N/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro
%!
% PostScript prologue for pstricks.tex.
% Version 97 patch 3, 98/06/01
% For distribution, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Atan { /atan load stopped { pop pop 0 } if } def
/Div { dup 0 eq { pop } { div } ifelse } def
/NET { neg exch neg exch T } def
/Pyth { dup mul exch dup mul add sqrt } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def }
def
/PathLength { flattenpath /z 0 def { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
} { /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
/pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
0 } ifelse setdash stroke } def
/DotLine { /b PathLength def /a ED /z ED /y CLW def /z y z add def a 0 gt
{ /b b a div def } { a 0 eq { /b b y sub def } { a -3 eq { /b b y add
def } if } ifelse } ifelse [ 0 b b z Div round Div dup 0 le { pop 1 } if
] a 0 gt { 0 } { y 2 div a -2 gt { neg } if } ifelse setdash 1
setlinecap stroke } def
/LineFill { gsave abs CLW add /a ED a 0 dtransform round exch round exch
2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
% DG/SR modification end
Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
% def
a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
pop pop } def
% DG/SR modification end
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { { /z DS def } { /z 0 def } ifelse /b ED 0 z DS SD b { 0 z DS
CLW sub SD } if 0 DS z add CLW 4 div sub moveto } def
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
/closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
load } if ] cvx newpath 3 1 roll T exec } def
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop } if
f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/Line { NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub
def n { Lineto } repeat CP 4 2 roll ArrowB L pop pop } if } def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
Lineto pop pop closepath } ifelse } def
/Diamond { /mtrx CM def T rotate /h ED /w ED dup 0 eq { pop } { CLW mul
neg /d ED /a w h Atan def /h d a sin Div h add def /w d a cos Div w add
def } ifelse mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2
div /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { NArray n 3 lt { n { pop pop } repeat } { BOC /n n 3 sub def
n { NC } repeat EOC } ifelse } def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro
%!PS-Adobe-2.0
%%Title: Dot Font for PSTricks
%%Creator: Timothy Van Zandt <tvz@Princeton.EDU>
%%Creation Date: May 7, 1993
%% Version 97 patch 1, 99/12/16
%% Modified by Etienne Riga <etienne.riga@skynet.be> - Dec. 16, 1999
%% to add /Diamond, /SolidDiamond and /BoldDiamond
10 dict dup begin
  /FontType 3 def
  /FontMatrix [ .001 0 0 .001 0 0 ] def
  /FontBBox [ 0 0 0 0 ] def
  /Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
% DG/SR modification end
  /Metrics 13 dict def
  Metrics begin
    /Bullet        1000   def
    /Circle        1000   def
    /BoldCircle    1000   def
    /SolidTriangle 1344   def
    /Triangle      1344   def
    /BoldTriangle  1344   def
    /SolidSquare    886   def
    /Square         886   def
    /BoldSquare     886   def
    /SolidPentagon 1093.2 def
    /Pentagon      1093.2 def
    /BoldPentagon  1093.2 def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /SolidDiamond  1008   def
    /Diamond       1008   def
    /BoldDiamond   1008   def
% DG/SR modification end
    /.notdef 0 def
  end
  /BBoxes 13 dict def
  BBoxes begin
    /Circle        { -550 -550 550 550 } def
    /BoldCircle    /Circle load def
    /Bullet        /Circle load def
    /Triangle      { -571.5 -330 571.5 660 } def
    /BoldTriangle  /Triangle load def
    /SolidTriangle /Triangle load def
    /Square        { -450 -450 450 450 } def
    /BoldSquare    /Square load def
    /SolidSquare   /Square load def
    /Pentagon      { -546.6 -465 546.6 574.7 } def
    /BoldPentagon  /Pentagon load def
    /SolidPentagon /Pentagon load def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /Diamond       { -428.5 -742.5 428.5 742.5 } def
    /BoldDiamond   /Diamond load def
    /SolidDiamond  /Diamond load def
% DG/SR modification end
    /.notdef { 0 0 0 0 } def
  end
  /CharProcs 20 dict def
  CharProcs begin
    /Adjust {
      2 copy dtransform floor .5 add exch floor .5 add exch idtransform
      3 -1 roll div 3 1 roll exch div exch scale
    } def
    /CirclePath    { 0 0 500 0 360 arc closepath } def
    /Bullet        { 500 500 Adjust CirclePath fill } def
    /Circle        { 500 500 Adjust CirclePath .9 .9 scale CirclePath
                     eofill } def
    /BoldCircle    { 500 500 Adjust CirclePath .8 .8 scale CirclePath
                     eofill } def
    /BoldCircle    { CirclePath .8 .8 scale CirclePath eofill } def
    /TrianglePath  { 0  660 moveto -571.5 -330 lineto 571.5 -330 lineto
                     closepath } def
    /SolidTriangle { TrianglePath fill } def
    /Triangle      { TrianglePath .85 .85 scale TrianglePath eofill } def
    /BoldTriangle  { TrianglePath .7 .7 scale TrianglePath eofill } def
    /SquarePath    { -450 450 moveto 450 450 lineto 450 -450 lineto
                     -450 -450 lineto closepath } def
    /SolidSquare   { SquarePath fill } def
    /Square        { SquarePath .89 .89 scale SquarePath eofill } def
    /BoldSquare    { SquarePath .78 .78 scale SquarePath eofill } def
    /PentagonPath  {
      -337.8 -465   moveto
       337.8 -465   lineto
       546.6  177.6 lineto
         0    574.7 lineto
      -546.6  177.6 lineto
      closepath
    } def
    /SolidPentagon { PentagonPath fill } def
    /Pentagon      { PentagonPath .89 .89 scale PentagonPath eofill } def
    /BoldPentagon  { PentagonPath .78 .78 scale PentagonPath eofill } def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /DiamondPath   { 0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto
                     428.5 0 lineto closepath } def
    /SolidDiamond  { DiamondPath fill } def
    /Diamond       { DiamondPath .85 .85 scale DiamondPath eofill } def
    /BoldDiamond   { DiamondPath .7 .7 scale DiamondPath eofill } def
% DG/SR modification end
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
      Metrics 1 index get exec 0
      BBoxes 3 index get exec
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop
%END pst-dots.pro

%%EndProcSet
%%BeginProcSet: pst-node.pro
%!
% PostScript prologue for pst-node.tex.
% Version 97 patch 1, 97/05/09.
% For distribution, see pstricks.tex.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r
r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
mul add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
% DG/SR modification end
} def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a add
AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c 57.2957 r
Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/copypage{}N/p 3 def @MacSetUp}N/doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N/endTexFig{end psf$SavedState restore}N/@beginspecial{SDict
begin/SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count/ocount X/dcount countdictstack N}N/@setspecial{
CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if/showpage{}N/erasepage{}N/copypage{}N newpath}N
/@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{end}
repeat grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
TeXDict begin 39158280 55380996 1000 600 600 (main.dvi)
@start
%DVIPSBitmapFont: Fa cmbx9 9 2
/Fa 2 54 df<147814F81303131FEA03FFB5FCA3EAFC1F1200B3B2007FB512FEA41F317A
B02C>49 D<000C140ED80FE013FE90B5FC5D5D5D5D5D92C7FC14FC14F091C8FC1380A6EB
87FE9038BFFFC090B512F09038FC0FF89038E003FE01C07F497E01001480000E6D13C0C8
FCA216E0A3121FEA7F807F487EA316C05B5CD87F801480D87C0014006C5B393F8007FE39
1FE01FFC0007B512F06C14C0C691C7FCEB1FF823327CB02C>53 D
E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fb cmmi9 9 1
/Fb 1 111 df<D801E013FE3A07F803FF803A0E3E0F07E0001C90383C03F039181F7001
003813E026303FC07F12700060138014001503D8E07F5CEA407E1200150701FE5C5B150F
5E120149131FEE8080EE81C00003023F13804914011603037F13000007147E495CED3E0E
5E000FEC1E3849EB0FF0D80380EB03C02A227EA02E>110 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fc cmti9 9 52
/Fc 52 124 df<EA0380EA0FE0121FA5EA0760120013E013C0A2120113801203EA070012
06120E5A5A5A5A5A0B176FB318>39 D<1560EC01E0EC03C0EC0700140E5C143C5C5C495A
495A13075C49C7FC5B131E5B137C137813F85B12015B12035B1207A25B120FA290C8FC5A
A2121E123EA3123C127CA31278A212F8A35AAF12701278A21238A2123C121CA27EA27E6C
7E12011B4A75B71F>I<14301438A28080A2140F801580A2140315C0A4140115E0A81403
A415C0A31407A31580140FA315005CA3141E143EA2143C147CA25CA25C13015C13035C13
075C130F91C7FC131E133E133C5B5B485AA2485A485A48C8FC121E5A12705A5A1B4A7EB7
1F>I<B51280A46C1300110579911B>45 D<121C127F12FFA412FE12380808778718>I<EC
1FC0EC7FF0903801E0F8903807C03CEB0F00011E131E133E013C131F5B13F85B1201A248
5AA20007143F5BA2120F153E49137E121FA348C712FCA4007EEB01F8A4007CEB03F012FC
A2EC07E0A24814C0A2EC0F80A2EC1F00A2141E5C0078137C5C387C01F0383C03E0381F0F
80D80FFEC7FCEA03F8203477B127>48 D<EC01801403A21407140FEC1F005C14FF5BEB1F
FEEB7FBEEB7E7E1320EB007CA214FCA25CA21301A25CA21303A25CA21307A25CA2130FA2
5CA2131FA291C7FCA25BA2133EA2137EA2137C13FCB512FCA3193277B127>I<EC0FE0EC
3FF8ECF03E903803C01F903907800F80EB0F00011EEB07C0131C5BD978C013E0EB70E0EB
F06013E0120113C0ECE00F000301C013C013801381EC801F01831480903887003F018E14
00D801FC137ED800F05B90380001F84A5A4A5A4A5A4AC7FC147E14F8EB03E0EB0FC049C8
FC133E13784848EB0380485A4913074848140048C75A121E001C141E003F143E01F85B39
7DFF80F838781FFF486C5BD8E0035B6D1380D9007EC7FC23347AB127>I<010614C09038
0FC00F91B51280160015FC4913F015C0D91CFEC7FC91C8FC133C1338A313781370A313F0
EBE0FE9038E3FF809038EF03C03901FC01E001F87FEBF000497F485A5BC8FCA41401A400
3C130300FC5CA34A5A5A00E0495AA24A5A4AC7FC6C137E00705B387801F8383E07F0381F
FFC06C90C8FCEA03F8223478B127>53 D<EC01F8EC0FFEEC3FFFECFE0F903901F8078090
3803E00F903807C01F90380F803FD91F001300133E49130E01FC90C7FC5B1201485AA248
5AA2380FC1F8EBC7FF9038CE0780391FBC03C001F07FEBE001003F8013C01380A2D87F00
7FA2127E4A5AA25AA214075DA25A4A5AA25D141F4AC7FC0078133E007C5B5C6C485A381F
07E0EBFFC0000790C8FCEA01F8213477B127>I<D9E0F81338EBE3FC2601EFFE137801FF
14F048EC01E09038FE0E03D807F814C09039F0060F80390FC0071F90398003FF00391F00
01EF001EEB001E003E5C123C485C15F8485C4813015DC712034A5AA24A5AA2141F92C7FC
5C143E147EA25CA2495AA3495AA213075CA2130F5CA2131FA25C133FA391C8FCA2131C25
3476B127>I<1370EA01FC1203A413F8EA00E01300B0121C127F5AA45A12380E20779F18>
58 D<161C163CA2167C16FCA21501821503A2ED077E150F150E151CA21538A2157015F0
15E0EC01C0A2913803807F82EC0700A2140E141E141C5CA25CA25C49B6FCA25B91388000
3F49C7EA1F80A2130E131E131C133C13385B13F05B12011203D80FF0EC3FC0D8FFFE9038
07FFFEA32F367BB539>65 D<DB1FF013C09238FFFC010203EBFF03913A0FF00F87809139
3F8003CF9139FE0001EF4948EB00FFD903F01500D90FE080495A49488091C8123E137E13
FE485A4848153CA2485AA248481538A2485A94C7FC123F5BA3127F90CBFCA412FEA2EE03
C0A25F127E160794C7FC5E160E007F151E6C5D5E6C6C147016F06C6C495A6C6CEB07C06C
6C49C8FC6C6C133E6CB413FC90387FFFF0011F13C0D903FEC9FC323775B437>67
D<0107B612C04915F017FC903A003F8001FEEE007FEF1F8092C7EA0FC0EF07E05CEF03F0
147E170102FE15F8A25CA21301A25CA2130317035CA2130718F04A1407A2130F18E04A14
0F18C0011F151F18805CEF3F00133F177E91C85AA2494A5A4C5A017E4A5A4C5A01FE4A5A
047EC7FC49495A0001EC0FF8007FB612E0B7C8FC15F835337BB23A>I<0107B712F05B18
E0903A003F80001F1707170392C7FC17015C18C0147EA214FEA24A130EA20101EC1E0304
1C13804A91C7FC163C13035E9138F001F891B5FC5B5EECE0011500130F5E5C1707011F01
015BEEC00E0280141E92C7121C133F173C91C812381778495DA2017E14014C5A01FE1407
4C5A49141F00014AB45A007FB7FCB8FC94C7FC34337CB234>I<0107B712E05B18C0903A
003F80003F170F170792C7FC17035C1880147EA214FEA25C161C0101EC3C07043813004A
91C7FCA20103147816704A13F0150349B5FCA25EECE003130F6F5A14C0A2011F13035E14
80A2013F90C9FCA291CAFCA25BA2137EA213FEA25B1201387FFFFCB5FCA233337CB232>
I<0107B548B512C0495CA2903C003FC0000FF0004B5CA292C75BA24A141F60147EA202FE
143F95C7FC5CA201015D177E5CA2010315FE5F5C91B6FC5B5F9138E00001A2010F14035F
5CA2011F14075F5CA2013F140F5F91C7FCA249141F5F137EA201FE143F94C8FC5B00015D
3B7FFFF01FFFFCB55BA23A337BB239>72 D<010FB51280A216009038003FC05DA292C7FC
A25CA2147EA214FEA25CA21301A25CA21303A25CA21307A25CA2130FA25CA2131FA25CA2
133FA291C8FCA25BA2137EA213FEA25B1201B512F8A25C21337BB21E>I<91381FFFFE5C
16FC9138003F80A31600A25D157EA315FE5DA314015DA314035DA314075DA3140F5DA314
1F5DA3143F92C7FCA2121C007E5B00FE137EA214FE485BEAF80100E05B495A387007E038
780FC06C48C8FCEA1FFCEA07F0273579B228>I<0107B590380FFFF05B19E09026003FC0
903803FE004B14F818E092C7485A4DC7FC4A141E177C027E5CEE01E002FE495A4C5A4A01
1FC8FC163E010114785E4A485AED07C00103495A4B7EECF03F157F903907F1FFE0ECF3E7
9138E787F0ECEF0790380FFE0302FC7FECF80114E0D91FC07F15004A7FA2013F147E167F
91C77E835B161F017E81160F13FE835B000182267FFFF090B57EB55B95C7FC3C337BB23B
>I<0107B512C05BA29026003FC0C7FC5DA292C8FCA25CA2147EA214FEA25CA21301A25C
A21303A25CA21307A25CA2130FA25C17E0011F140117C05C1603013F1580160791C7FCEE
0F005B5E017E143EA201FE5CED01FC4913030001EC1FF8007FB6FCB7FC5E2B337CB230>
I<902607FFC0ED7FFC4917FF81D9003F4B1300611803023BED077CA2027BED0EFC610273
151C1838DAF1F01439F071F014E118E10101ED01C36102C1EC0383EF070301031607050E
5BEC80F8171C0107ED380F6102001470A249EDE01FDC01C090C7FC130EEE0380011E017C
5C933807003E011C140EA2013C4A137E187C01385C5E017816FC6F485B1370ED3FC001F0
EC80016000011500D807F81503277FFF803E90B512C0B5EB3C01151C46337BB245>I<ED
1FE0913801FFFC913807E03F91391F800FC091393E0003E002F8EB01F0495A4948EB00F8
494814FC4948147C49C8127E133E017E153E49153F485AA2485A12075B120F5B121F177F
5B123FA348C912FEA4EE01FC12FEEE03F8A217F0160717E0160F007E16C0EE1F80A2EE3F
006C157E5E5E6C6C495A000F4A5A6D495A0007EC1F806C6C013EC7FCD801F813FC39007E
07F090383FFF80D907FCC8FC303775B43B>79 D<0107B612C04915F883903A003F8001FE
EE003FEF1F8092C713C0170F5C18E0147EA214FEEF1FC05CA201011680173F4A1500177E
010315FE5F4AEB03F8EE07E00107EC3FC091B6C7FC16F802E0C9FC130FA25CA2131FA25C
A2133FA291CAFCA25BA2137EA213FEA25B1201387FFFF0B5FCA233337CB234>I<0107B5
12FE49ECFFC017F0903A003F8007F8EE01FCEE007E92C7127F835C1880147EA214FEEF7F
005CA2010115FE5F4A13015F01034A5AEE0FC04A495A04FEC7FC49B512F016C09138E003
E0ED01F8010F6D7E167C4A137EA2131FA25CA2013F14FEA291C7FCA24913015E137EEF01
C001FE150318805B00011607277FFFF0001400B5ECFE0EEE7E1CC9EA1FF8EE07E032357B
B238>82 D<913901FC018091380FFF03023F13C791387E07EF903A01F801FF0049487E4A
7F495A4948133E131F91C7FC5B013E143CA3137E1638A293C7FC137FA26D7E14E014FE90
381FFFC06D13F86D7F01017F6D6C7E020F7F1400153F6F7E150FA4120EA2001E5D121CA2
151F003C92C7FCA2003E143E5D127E007F5C6D485A9038C007E039F3F80FC000F0B5C8FC
38E03FFC38C00FF029377AB42B>I<0003B812C05A1880903AF800FC003F260FC001141F
0180150F01005B001EEE07001403121C003C4A5BA200380107140E127800705CA2020F14
1E00F0161CC74990C7FCA2141FA25DA2143FA292C9FCA25CA2147EA214FEA25CA21301A2
5CA21303A25CA21307A25C497E001FB512F05AA2323374B237>I<EB03F0EB0FF890383E
1C6090387C0FF0EBF807EA01F0EA03E00007EB03E0EA0FC0A2381F800715C0EA3F00A214
0F481480127EA2141F00FE14005A1506EC3F07EC3E0F150E147E007C141EECFE1CEB01FC
D83C03133C393E07BE38391F0E1E783907FC0FF03901F003C0202278A027>97
D<137EEA0FFE121F5B1200A35BA21201A25BA21203A25BA21207A2EBC3E0EBCFF8380FDC
3EEBF81F497E01E01380EA1FC0138015C013005AA2123EA2007E131F1580127CA2143F00
FC14005AA2147EA25CA2387801F85C495A6C485A495A6C48C7FCEA0FFCEA03F01A3578B3
23>I<14FCEB07FF90381F078090383E03C0EBFC013801F8033803F0073807E00F13C012
0F391F80070091C7FC48C8FCA35A127EA312FE5AA4007C14C0EC01E0A2EC03C06CEB0F80
EC1F006C137C380F81F03803FFC0C648C7FC1B2278A023>I<ED0FC0EC03FFA21680EC00
1FA31600A25DA2153EA2157EA2157CA215FCA2903803F0F8EB0FF8EB3E1DEB7C0F496C5A
EA01F0EA03E000071303D80FC05BA2381F8007A2D83F005BA2140F5A007E5CA2141F12FE
4891C7FC1506EC3F075DEC3E0E147E007C141EECFE1CEB01FCD83C03133C393E07BE3839
1F0E1E783907FC0FF03901F003C0223578B327>I<EB03F8EB0FFEEB3E0F9038F8078038
01F003EA03E0EA07C0120FEA1F801407D83F0013005C007E133EEB03F8387FFFE04848C7
FC00FCC8FCA45AA4EC0180EC03C0A2007CEB0780EC1F00003C133E6C13F8380F03E03807
FF80D801FCC7FC1A2277A023>I<151FED7FC0EDF0E0020113F0EC03E3A2EC07C316E0ED
C1C091380FC0005DA4141F92C7FCA45C143E90381FFFFEA3D9007EC7FC147CA414FC5CA5
13015CA413035CA413075CA3130FA25CA3131F91C8FCA35B133E1238EA7E3CA2EAFE7812
FC485AEA78E0EA3FC0000FC9FC244582B418>I<143FECFF80903803E1E6903807C0FF90
380F807FEB1F00133E017E133F49133EA24848137EA24848137CA215FC12074913F8A214
01A2D80FC013F0A21403120715E01407140F141F3903E03FC00001137FEBF0FF38007FCF
90381F0F801300141FA21500A25C143E1238007E137E5C00FE5B48485A387803E0387C0F
80D81FFFC7FCEA07F820317CA023>I<EB0FC0EA03FFA25CEA001FA391C8FCA25BA2133E
A2137EA2137CA213FCA29038F83F80ECFFE03901FBE0F09038FF80F8EC007849137C485A
5B5BA2484813FC5D5BA2000F13015D1380A2001F13035DEB0007EDC0C048ECC1E0020F13
C0003E1481A2007E1483ED0380007C1407160000FC140E151E48EB07F80070EB01F02335
7BB327>I<EB0180EB07E0A2130FEB07C0EB038090C7FCABEA01F0EA03FCEA0F1E120E12
1C123C1238EA783E1270A2137EEAF07CEA60FCC65AA212015BA212035BA2000713C0EBC1
E0000F13C01381A21383EB038013071400130E131EEA07F8EA01F013337AB118>I<1538
157C15FCA315701500AB143EECFF80903801E3C090380383E0EB0701130FEB0E03131C13
3C133814071378013013C01300140FA21580A2141FA21500A25CA2143EA2147EA2147CA2
14FCA25CA21301A25CA213035C1238387E07C0A238FE0F804848C7FCEAF83EEA787CEA3F
F0EA0F801E4283B118>I<EB0FC0EA01FF5A5CEA001FA391C7FCA25BA2133EA2137EA213
7CA213FCA2491378EC01FE0001EB078FEC0E0F9038F01C3F143800031370ECE03E9038E1
C01C9038E38000D807E7C7FC13EE5B13F8120F13FFEB9FC0EB83F0EA1F81EB80F8130015
0C48141E151C123EA2007E143C1538127C157800FCEB787015E048EB3FC00070EB0F8020
357BB323>I<133FEA07FF5A13FEEA007EA3137CA213FCA213F8A21201A213F0A21203A2
13E0A21207A213C0A2120FA21380A2121FA21300A25AA2123EA2127EA2127C1318EAFC1C
133CEAF838A21378137012F013F0EAF8E01279EA3FC0EA0F00103579B314>I<2703C003
F8137F3C0FF00FFE01FFC03C1E783C1F07C1E03C1C7CF00F8F01F03B3C3DE0079E002638
3FC001FC7FD97F805B007001005B5E137ED8F0FC90380FC00100E05FD860F81480120000
01021F130360491400A200034A13076049013E130FF081800007027EEC83C0051F138049
017C1403A2000F02FC1407053E130049495CEF1E0E001F01015D183C010049EB0FF0000E
6D48EB03E03A227AA03F>I<3903C007F0390FF01FFC391E787C1E391C7CF01F393C3DE0
0F26383FC01380EB7F8000781300EA707EA2D8F0FC131F00E01500EA60F8120000015C15
3E5BA20003147E157C4913FCEDF8180007153C0201133801C013F0A2000F1578EDE07001
8014F016E0001FECE1C015E390C7EAFF00000E143E26227AA02B>I<14FCEB07FF90381F
07C090383E03E09038FC01F0EA01F83903F000F8485A5B120F484813FCA248C7FCA21401
4814F8127EA2140300FE14F05AA2EC07E0A2007CEB0FC01580141FEC3F006C137E5C381F
01F0380F83E03803FF80D800FCC7FC1E2278A027>I<011E137C90387F81FF9039F3C387
C09039E3EF03E03901E1FE01D9C1FC13F0EBC3F8000313F0018314F814E0EA0787130700
0313C01200010F130316F01480A2011F130716E01400A249EB0FC0A2013EEB1F80A2017E
EB3F00017F133E5D5D9038FF81F09038FDC3E09038F8FF80027EC7FC000190C8FCA25BA2
1203A25BA21207A25BB5FCA325307FA027>I<903803F01890380FF83890383E1C789038
7C0EF89038F807F0EA01F0EA03E000071303D80FC013E0A2EA1F801407D83F0013C0A348
130F007E1480A300FE131F481400A35C143E147E127C14FE495AEA3C03EA3E07EA1F0E38
07FCF8EA01F0C7FC13015CA313035CA21307A25C48B5FCA25C1D3078A023>I<3903C00F
C0390FF03FF0391E78F078391C7DE03C393C3FC0FC00381380EB7F00007814F8D8707E13
701500EAF0FC12E0EA60F812001201A25BA21203A25BA21207A25BA2120FA25BA2121FA2
90C8FC120E1E227AA020>I<EB03F0EB1FFCEB3C1EEB780FEBF007EA01E0140F0003131F
13C0A2EBE00414007FEBFF8014E06C13F06C13F8EB7FFC1307EB00FE147E143E123800FC
133CA3147C00F013784813F0EAF001387803E0383C0F80381FFE00EA03F818227AA01F>
I<1303EB0F80A3131FA21400A25BA2133EA2137EA2137C387FFFF8A2B5FC3800F800A212
01A25BA21203A25BA21207A25BA2120FA25B1460001F13F014E01300130114C01303001E
1380EB07005BEA0F1EEA07F8EA01E015307AAE19>I<EA01F0D803FC1307D80F1E5B000E
5C121C123C00385CD8783E133E1270A2017E137ED8F07C137CEA60FCC65A15FC00015C5B
A2140100035C13E0166002031370EDE0F0D807C014E0A20003EB07E116C09038E00FC1EC
1FC3000190383FE3809038F071E73A007FE0FF0090381F803C24227AA029>I<01F01338
D803FC13FCEA0F1E120E121C123C0038147CEA783E0070143CA2137ED8F07C1338EA60FC
C65A1578000114705BA215F0000314E05BA2EC01C0A2EBC003158014071500EBE00EA26C
6C5A3800F878EB7FE0EB1F801E227AA023>I<13F0D803FC1307D80F1E130F000E141F12
1C123C0038143FD8783E133E1270A2017E137ED8F07C137CEA60FCC65A15FC000114F85B
A21401000314F013E0A2140315E0EA07C0A20003130715C0EBE00F141F0001133F9038F0
7F8038007FEFEB1F8FEB001F1500A25C003E133E007E137E147C5C007C5BEA7001495A38
380780D83C1FC7FCEA0FFCEA07F020317AA025>121 D<B712C0A22202799427>123
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fd cmsy9 9 3
/Fd 3 34 df<0060153000F815F86C1401007EEC03F06CEC07E06C6CEB0FC06C6CEB1F80
6C6CEB3F006C6C137E6C6C5B6C6C485A90387E03F06D485A90381F8FC090380FDF806DB4
C7FC6D5A6D5AA2497E497E90380FDF8090381F8FC090383F07E090387E03F0496C7E4848
6C7E4848137E48487F4848EB1F804848EB0FC048C7EA07E0007EEC03F048EC01F8481400
00601530252475A43C>2 D<14E080A213015CA213035C1307495AA249CCFC133E137E5B
485A485AEA0FE0003FBA12E0BB12F0A2003F19E0D80FE0CCFCEA03F06C7E6C7E137E133E
7F6D7EA26D7E1303801301A2801300A25C44287CA64D>32 D<187018F0A2841878A2187C
183C183E84A2727E727E85727E727E727E197F007FBA12C0BB12F0A26C19C0CCEA7F0019
FC4E5A4E5A4E5A614E5A4EC7FCA2183E183C187C1878A218F860A2187044287CA64D>I
E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fe cmtt9 9 41
/Fe 41 125 df<EB01C0EB03E0130F131FEB3FC0EB7F80EBFE00485A5B1203485A5B485A
A2485AA248C7FCA3127EA45AAC127EA47EA36C7EA26C7EA26C7E7F6C7E12017F6C7EEB7F
80EB3FC0EB1FE0130F1303EB01C0133A73B327>40 D<127012F812FE7E6C7E6C7EEA0FE0
6C7E12037F6C7E1200137EA27FA2EB1F80A3EB0FC0A4EB07E0ACEB0FC0A4EB1F80A3EB3F
00A2137EA25B1201485A5B1207485AEA3FC0485A48C7FC5A12F81270133A7AB327>I<13
0F497EA60078EB81E000FEEB87F000FF138FEBDFBF6CB512E06C14C0000F1400000313FC
C613F0A2000313FC000F13FF003F14C04814E039FFDFBFF0EB1F8F00FE13870078EB81E0
0000EB8000A66DC7FC1C207BA627>I<EB03C0497EAD007FB512FEB7FCA46C14FE390007
E000AD6D5A20227DA727>I<120FEA3FC013E0EA7FF0A213F8A2123FA2120F120113F012
03EA07E0121FEA7FC0EAFF8013005A12700D14738927>I<007FB512F8B612FCA46C14F8
1E067C9927>I<121EEA7F80A2EAFFC0A4EA7F80A2EA1E000A0A728927>I<EB07E0EB3FFC
497E90B5FC4814803903FC3FC03907F00FE0390FE007F0EBC003391F8001F8A248C712FC
A2003E147C007E147EA3007C143E00FC143FAC007E147EA46C14FCA2EB8001001F14F8EB
C003000F14F0EBE0073907F00FE03903FC3FC06CB512806C14006D5A6D5AEB07E020307D
AE27>48 D<130E131FA25B5BA25B5A5A127FB5FCA213BFEA7E3F1200B3AA003FB512805A
15C01580A21A2F79AE27>I<121EEA7F80A2EAFFC0A4EA7F80A2EA1E00C7FCAC121EEA7F
80A2EAFFC0A4EA7F80A2EA1E000A20729F27>58 D<120FEA3FC0A2EA7FE0A4EA3FC0A2EA
0F00C7FCAC120FEA3F8013C0127F13E0A3123FA2120F120713C0120FA2EA3F80EA7F005A
5A12F812700B2A739F27>I<007FB512FEB7FCA4003F14FEC9FCA6003FB512FEB7FCA46C
14FE20127D9F27>61 D<903803F80E90381FFE1F90383FFFBF90B6FC5A3803FE0F3807F8
03497E48487E485A49137FA248C7123FA25A127E151E150012FE5AAA7E127EA2151E007F
143F7EA26C7E157F6D137E6C6C13FE3907F001FCEBF8033903FE0FF86CB512F06C14E001
3F13C06D1300EB03F820307DAE27>67 D<387FFFFC14FFB612C06C80813907E00FF81407
EC01FC6E7EA2157E157F811680151FA316C0150FABED1F80A3153F1600A25D15FEA24A5A
4A5A140F007FB55A5DB65A6C91C7FC14FC222E7FAD27>I<3A7FF003FFE0486C4813F0A2
13FC007F6D13E000079038003E0013DEA313CFA3148013C714C0A213C314E0A213C114F0
A3EBC0F8A31478147CA2143C143EA2141E141F140FA3EC07BEA3EC03FEEA7FFCEAFFFE14
01A26C486C5A242E7FAD27>78 D<387FFFF0B512F8A314F000FCC7FCB3B3ACB512F014F8
A36C13F0153A71B327>91 D<387FFFF0B512F8A37EEA0001B3B3ACEA7FFFB5FCA36C13F0
153A7EB327>93 D<007FB512F8B612FCA46C14F81E067C7E27>95
D<3803FFC0000F13F04813FC4813FF811380EC1FC0381F000F000480C71207A2EB0FFF13
7F0003B5FC120F5A383FFC07EA7FC0130012FE5AA46C130F007F131FEBC0FF6CB612806C
15C07E000313F1C69038807F8022207C9F27>97 D<EA7FE0487EA3127F1203A914FF01F3
13C090B512F08181EC81FE49C67E49EB3F8049131F16C049130FA216E01507A6150F16C0
7F151F6DEB3F80157F6DEBFF009038FF83FEECFFFC5D5D01F313C02601E0FEC7FC232E7F
AD27>I<EB0FFF017F13C048B512E04814F05A380FF807EA1FE0393FC003E09038800080
48C8FC127EA212FE5AA67E127EA2007F14F0393F8001F813C0381FE003390FF80FF06CB5
FC6C14E06C14C06C6C1300EB0FF81D207B9F27>I<EC3FF04A7EA3143F1401A9EB0FE1EB
7FFD48B5FC5A5A380FF83F381FE00F383FC007EB8003EA7F00007E1301A212FE5AA67E00
7E1303A2127F6C1307EB800F381FE01F380FF03F6CB612C06C15E06C13FD38007FF9D91F
E013C0232E7EAD27>I<EB0FF8EB3FFE90B51280000314C04814E0390FFC0FF0391FE003
F8EBC001D83F8013FC48C7FC127E157E12FEB612FEA415FC00FCC8FC7E127E127F6C143C
6D137E6C7E01F013FE390FFC07FC6CB5FC000114F86C14F0013F13C0903807FE001F207D
9F27>I<EC1FF0ECFFF84913FC4913FE5BEB0FF014C0011F137CEC8000A6007FB512F0B6
12F8A36C14F039001F8000B3A4003FB512C04814E0A36C14C01F2E7EAD27>I<153F9039
1FC0FF80D97FF313C048B612E05A4814EF390FF07F873A1FC01FC3C0EDC000EB800F4848
6C7EA66C6C485AEBC01FA2390FF07F8090B5C7FC5C485BEB7FF0EB1FC090C9FCA27F6CB5
FC15E015F84814FE4880EB8001007EC7EA3F80007C140F00FC15C0481407A46C140F007C
1580007F143F6C6CEB7F009038F807FF6CB55A000714F86C5CC614C0D90FFCC7FC23337E
A027>I<EA7FE0487EA3127F1203A9147F9038F1FFC001F713F090B5FC8114C1EC01FCEB
FE005B5BA25BB03A7FFF83FFE0B500C713F0A36C018313E0242E7FAD27>I<130F497E49
7EA46D5A6DC7FC90C8FCA7383FFF80487FA37EEA000FB3A4007FB512F0B6FC15F815F07E
1D2F7BAE27>I<EA7FE07F12FF127FA21201A991383FFFC04A13E0A36E13C0913803F800
4A5A4A5A4A5A4A5A02FFC7FCEBF1FEEBF3FCEBF7F8EBFFFC8080143F496C7E496C7E01F8
7FEBF0076E7E6E7E816E7E157E3A7FFFC1FFF002C313F8B512E36C13C316F0252E80AD27
>107 D<387FFF80B57EA37EEA000FB3B2007FB512F8B612FCA36C14F81E2E7CAD27>I<39
7F07C01F3AFF9FF07FC09039FFF9FFE091B57E7E3A0FFC7FF1F89038F03FC001E0138001
C01300A3EB803EB03A7FF0FFC3FF486C01E3138001F913E701F813E36C4801C313002920
819F27>I<387FE07F39FFF1FFC001F713F090B5FC6C80000313C1EC01FCEBFE005B5BA2
5BB03A7FFF83FFE0B500C713F0A36C018313E024207F9F27>I<EB1FE0EB7FF83801FFFE
487F481480390FF03FC0391FC00FE0393F8007F0EB00034814F8007E1301A248EB00FCA7
6C1301007E14F8A2007F1303393F8007F0A2391FE01FE0390FF03FC06CB512806C14006C
5B38007FF8EB1FE01E207C9F27>I<387FE0FFD8FFF313C090B512F0816C800003EB81FE
49C67E49EB3F8049131F16C049130FA216E01507A6150F16C07F151F6DEB3F80157F6DEB
FF009038FF83FEECFFFC5D5D01F313C0D9F0FEC7FC91C8FCAC387FFF80B57EA36C5B2331
7F9F27>I<397FFC03FC39FFFE0FFF023F13804A13C0007F90B5FC39007FFE1F14F89138
F00F809138E002004AC7FC5CA291C8FCA2137EAD007FB57EB67EA36C5C22207E9F27>
114 D<9038FFF3800007EBFFC0121F5A5AEB803F38FC000F5AA2EC07806C90C7FCEA7F80
13FC383FFFF06C13FC000713FF00011480D8000F13C09038003FE014070078EB03F000FC
1301A27E14036CEB07E0EBE01F90B512C01580150000FB13FC38707FF01C207B9F27>I<
133C137EA8007FB512F0B612F8A36C14F0D8007EC7FCAE1518157EA415FE6D13FC1483EC
FFF86D13F06D13E0010313C0010013001F297EA827>I<397FE01FF8486C487EA3007F13
1F00031300B21401A21403EBFC0F6CB612E016F07EEB3FFE90390FF87FE024207F9F27>
I<3A7FFC0FFF80486C4813C0A36C486C13803A07C000F800EBE00100035CA2EBF0030001
5CA2EBF80700005CA390387C0F80A36D48C7FCA3EB3F3FEB1F3EA214FE6D5AA36D5AA26D
5A22207E9F27>I<3A7FFE07FFE000FF15F06D5A497E007F15E03A0F80001F00A36D5B00
07143EA414F0EBC1F83903E3FC7CA4EBE79EA200011478A301F713F8A2EBFF0F6C5CA3EB
FE0790387C03E024207F9F27>I<3A7FFC0FFF80486C4813C0A36C486C13803A07E000F8
00000313015D13F00001130301F85B1200A26D485A137CA290387E0F80133EA2011F90C7
FC5CA2130F149E14BE130714FC1303A25C1301A25CA213035CA213075C1208EA3E0F007F
5B131FD87E7FC8FCEA7FFE6C5A5B6C5AEA07C022317E9F27>121
D<127812FCB3B3B3A21278063A70B327>124 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Ff cmmi7 7 1
/Ff 1 111 df<3907801FC0390FE07FF03918F0E0F83930F1807CEBFB00D860FE133C5B
5B00C1147C5B1201A248485BA34A5AEA07C01660EC03E0A23A0F8007C0C0A2EDC1809138
03C300D81F0013C7EC01FE000EEB00F8231B7D9929>110 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fg cmr7 7 2
/Fg 2 51 df<13381378EA01F8121F12FE12E01200B3AB487EB512F8A215267BA521>49
D<13FF000313E0380E03F0381800F848137C48137E00787F12FC6CEB1F80A4127CC7FC15
005C143E147E147C5C495A495A5C495A010EC7FC5B5B903870018013E0EA018039030003
0012065A001FB5FC5A485BB5FCA219267DA521>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fh cmtt10 10 42
/Fh 42 125 df<143814FC13011303EB07F8EB0FF0EB1FC0EB3F80EB7F0013FE485A485A
5B12075B120F5B485AA2123F90C7FCA25A127EA312FE5AAC7E127EA3127F7EA27F121FA2
6C7E7F12077F12037F6C7E6C7E137FEB3F80EB1FC0EB0FF0EB07F8EB03FC130113001438
164272B92C>40 D<127012FC7E7E6C7E6C7EEA0FE06C7E6C7E6C7E6C7E137F7F1480131F
14C0130FEB07E0A214F01303A214F81301A314FC1300AC130114F8A3130314F0A2130714
E0A2EB0FC0131F1480133F14005B13FE485A485A485A485AEA3FC0485A48C7FC5A5A1270
164279B92C>I<EB0380497EA60020140800F8143E00FE14FE00FF13C1EBC7C7EBE7CF00
3FB512F8000F14E0000314806C140038007FFCA248B5FC481480000F14E0003F14F839FF
E7CFFEEBC7C7EB07C100FE13C000F8143E0020140800001400A66D5A1F247AAA2C>I<14
7814FCAF007FB612F0B712F8A46C15F0C700FCC7FCAF147825267DAB2C>I<007FB6FCB7
1280A46C150021067B9B2C>45 D<121FEA3F80EA7FC0EAFFE0A5EA7FC0EA3F80EA1F000B
0B708A2C>I<EB03F8EB0FFE90383FFF80497F90B57E3901FE0FF03903F803F848486C7E
EBE0004848137EA248487FA248C7EA1F80A2003E140F007E15C0A3007C140700FC15E0AC
6C140F007E15C0A46CEC1F80A36C6CEB3F00A26C6C137E6D13FE00075CEBF0016C6C485A
3901FE0FF06CB55A6D5B6D5BD90FFEC7FCEB03F823357CB32C>48
D<1307497EA2131FA2133F137F13FF5A1207127FB5FC13DF139FEA7C1F1200B3AE007FB5
12E0B612F0A36C14E01C3477B32C>I<EB0FF890387FFF8048B512E00007804814FC391F
F80FFE393FE001FF903880007F48C7EA3F80007E141F00FE15C0150F6C15E01507A3127E
123CC8FCA2150F16C0151F1680153F16005D15FE4A5A14034A5A4A5A4A5A4A5AECFF8049
48C7FC495A495A495AEB3FE0EB7F8049C8FC485A4848EB03C04848EB07E0EA1FE0485A48
B6FCB7FCA36C15C023347CB32C>I<121FEA3F80EA7FC0EAFFE0A5EA7FC0EA3F80EA1F00
C7FCAE121FEA3F80EA7FC0EAFFE0A5EA7FC0EA3F80EA1F000B2470A32C>58
D<EA0F80EA1FC0EA3FE0EA7FF0A5EA3FE0EA1FC0EA0F80C7FCAEEA0F80EA1FC0EA3FE012
7F13F0A4123F121F120F1201120313E01207EA0FC0A2EA3F80EA7F005A5A12F812700C30
71A32C>I<007FB612F0B712F8A4003F15F0CAFCA8003FB612F0B712F8A46C15F025147D
A22C>61 D<EC7F80903803FFE0010F7F013F7F497F9038FFC0FE3901FE007FD803F87F48
48EB1F809038E00FCF390FC03FFF48484813C091B5FCEA3F01393E03F87F903907F03FE0
007EEBE01F397C0FC00FEC8007A2EAFC1F00F8EB0003A900FCEB8007D87C0F14C0A2ECC0
0F3A7E07E01F80003EEBF03F903903F87F00393F01FFFED81F805B6E5A6C6C6C5A3907E0
0FC09039F00007C06C6CEB0FE0D801FE131F3900FFC0FF6DB512C06D1480010FEBFE0001
0313F89038007FC023337CB22C>64 D<02FF13700107EBE0F84913F9013F13FD4913FFEB
FF813901FE007F4848131FD807F0130F1507485A491303485A150148C7FCA25A007EEC00
F01600A212FE5AAB7E127EA3007F15F06CEC01F8A26C7EA26C6C13036D14F06C6C130716
E0D803FC131F6C6CEB3FC03A00FF81FF806DB512006D5B010F5B6D13F00100138025357D
B32C>67 D<007FB5FCB612C015F0816C803907E003FEEC00FFED7F80153FED1FC0ED0FE0
A2150716F0150316F81501A4ED00FCACED01F8A3150316F0A2150716E0150FED1FC0153F
ED7F80EDFF00EC03FE007FB55AB65A5D15C06C91C7FC26337EB22C>I<D87FF0EB7FFC48
6CEBFFFEA27F007FEC7FFCD807FEEB07C013DEA213DF13CFA2148013C714C0A213C314E0
A213C114F0A213C014F8A2147CA3143EA2141E141FA2140F1587A2140715C7A2140315E7
1401A215F71400A215FFD87FFC137F487E153FA26C48EB1F8027337EB22C>78
D<EB7FFF0003B512E0000F14F848804880EBE003EB800048C7127FA2007E80A300FE1580
48141FB3A86C143FA2007E1500A3007F5CA26C6C13FEEBF00790B5FC6C5C6C5C000314E0
C66C90C7FC21357BB32C>I<387FFFFCB512FEA314FC00FCC7FCB3B3B3B512FC14FEA36C
13FC17416FB92C>91 D<387FFFFCB512FEA37EC7127EB3B3B3387FFFFEB5FCA36C13FC17
417DB92C>93 D<007FB6FCB71280A46C150021067B7D2C>95 D<3801FFF0000713FE001F
6D7E15E048809038C01FF81407EC01FC381F80000006C77EC8127EA3ECFFFE131F90B5FC
1203120F48EB807E383FF800EA7FC090C7FC12FE5AA47E007F14FEEB8003383FE01F6CB6
12FC6C15FE6C14BF0001EBFE1F3A003FF007FC27247CA32C>97 D<EA7FF0487EA3127F12
01AAEC1FE0ECFFF801FB13FE90B6FC16809138F07FC09138801FE091380007F049EB03F8
5BED01FC491300A216FE167EA816FE6D14FCA2ED01F86D13036DEB07F0150F9138801FE0
9138E07FC091B51280160001FB5B01F813F83900F03FC027337FB22C>I<903803FFE001
1F13F8017F13FE48B5FC48804848C6FCEA0FF0485A49137E4848131890C9FC5A127EA25A
A8127EA2127F6C140F6DEB1F806C7E6D133F6C6CEB7F003907FE03FF6CB55A6C5C6C6C5B
011F13E0010390C7FC21247AA32C>I<EC0FFE4A7EA380EC003FAAEB07F8EB3FFE90B512
BF4814FF5A3807FC0F380FF00348487E497E48487F90C7FC007E80A212FE5AA87E007E5C
A2007F5C6C7E5C6C6C5A380FF0073807FC1F6CB612FC6CECBFFE6C143FEB3FFC90390FF0
1FFC27337DB22C>I<EB03FE90381FFFC0017F13F048B57E48803907FE03FE390FF800FF
D81FE0EB3F805B4848EB1FC090C7120F5A007E15E015075AB7FCA416C000FCC9FC7E127E
A2127F6CEC03C06DEB07E06C7ED80FF0130F6C6CEB3FC001FF13FF000190B512806C1500
013F13FC010F13F00101138023247CA32C>I<EC0FF8EC3FFE91B5FC4914805B903807FC
7F14F090390FE03F0014C092C7FCA6007FB512FEB7FCA36C5C26000FC0C7FCB3A8003FB5
12F04880A36C5C21337DB22C>I<ED03F8903907F80FFC90391FFE3FFE017FB6FC48B7FC
48ECFE7F9038FC0FF82607F003133E3A0FE001FC1CD9C0001300001F8049137EA66D13FE
000F5CEBE0016C6C485A3903FC0FF048B5FC5D481480D99FFEC7FCEB87F80180C8FCA37F
6C7E90B512F06C14FE48ECFF804815E04815F03A3FC0001FF848C7EA03FC007E1400007C
157C00FC157E48153EA46C157E007E15FCD87F801303D83FE0EB0FF8D81FFCEB7FF06CB6
12E0000315806C1500D8003F13F8010713C028387EA42C>I<1307EB1FC0A2497EA36D5A
A20107C7FC90C8FCA7387FFFC080B5FC7EA2EA0007B3A8007FB512FCB612FEA36C14FC1F
3479B32C>105 D<140EEC3F80A2EC7FC0A3EC3F80A2EC0E0091C7FCA748B512804814C0
A37EC7120FB3B3A2141F003C1480007E133FB414005CEB01FEEBFFFC6C5B5C001F5B0007
90C7FC1A467CB32C>I<EA7FE0487EA3127F1201AA91381FFFF04A13F8A36E13F0913800
FE004A5A4A5A4A5A4A5A4A5A4A5A4AC7FC14FEEBF1FC13F3EBF7FE90B5FCA2EC9F80EC0F
C001FE7FEBFC07496C7E496C7E811400157E811680151F3A7FFFC0FFFCB500E113FEA36C
01C013FC27337EB22C>I<387FFFE0B57EA37EEA0003B3B3A5007FB61280B712C0A36C15
8022337BB22C>I<3A7F83F007E09039CFFC1FF83AFFDFFE3FFCD87FFF13FF91B57E3A07
FE1FFC3E01FCEBF83F496C487E01F013E001E013C0A301C01380B33B7FFC3FF87FF0027F
13FFD8FFFE6D13F8D87FFC4913F0023F137F2D2481A32C>I<397FF01FE039FFF87FFC90
38F9FFFE01FB7F6CB6FC00019038F03F80ECC01F02807FEC000F5B5BA25BB3267FFFE0B5
FCB500F11480A36C01E0140029247FA32C>I<EB07FCEB1FFF017F13C048B512F0488039
07FC07FC390FF001FE48486C7E0180133F003F158090C7121F007EEC0FC0A348EC07E0A7
6C140F007E15C0A2007F141F6C15806D133F6C6CEB7F006D5B6C6C485A3907FC07FC6CB5
5A6C5C6C6C13C0011F90C7FCEB07FC23247CA32C>I<397FF01FE039FFF8FFF801FB13FE
90B6FC6C158000019038F07FC09138801FE091380007F049EB03F85BED01FC491300A216
FE167EA816FE6D14FCA2ED01F86D13036DEB07F0150F9138801FE09138E07FC091B51280
160001FB5B01F813F8EC3FC091C8FCAD387FFFE0B57EA36C5B27367FA32C>I<D87FFEEB
3FC0B53801FFF0020713F8021F13FC6C5B39003F7FE1ECFF019138FC00F84A13704A1300
5CA25C5CA391C8FCAF007FB512E0B67EA36C5C26247EA32C>114
D<90387FF8700003B512F8120F5A5A387FC00F387E00034813015AA36CEB00F0007F1400
13F0383FFFC06C13FE6CEBFF80000314E0C66C13F8010113FCEB0007EC00FE0078147F00
FC143F151F7EA26C143F6D133E6D13FE9038F007FC90B5FC15F815E000F8148039701FFC
0020247AA32C>I<131E133FA9007FB6FCB71280A36C1500D8003FC8FCB1ED03C0ED07E0
A5EC800F011FEB1FC0ECE07F6DB51280160001035B6D13F89038003FE0232E7EAD2C>I<
3A7FF003FF80486C487FA3007F7F0001EB000FB3A3151FA2153F6D137F3900FE03FF90B7
FC6D15807F6D13CF902603FE07130029247FA32C>I<3A7FFF01FFFCB514FE148314016C
15FC3A03E0000F80A26D131F00011500A26D5B0000143EA26D137E017C137CA2017E13FC
013E5BA2EB3F01011F5BA21483010F5BA214C701075BA214EF01035BA214FF6D90C7FCA2
6D5A147C27247EA32C>I<3A7FFF01FFFCB5008113FE148314816C010113FC3A03E0000F
806C7E151F6D140012005D6D133E137C017E137E013E137CA2013F13FC6D5BA2EB0F815D
A2EB07C1ECC3E0A2EB03E3ECE7C0130114F75DEB00FFA292C7FC80A2143EA2147E147CA2
14FC5CA2EA0C01003F5BEA7F83EB87E0EA7E0F495A387FFF806C90C8FC6C5A6C5AEA07E0
27367EA32C>121 D<127812FCB3B3B3A9127806416DB92C>124 D
E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fi cmmi10 10 17
/Fi 17 121 df<EC3FC0ECFFF8903807E07C90380F801FD93F00EB800C017E130F499038
07C01C4848ECE018485A484801031338000FEDF0305B001F16704848156017E0007F16C0
90C713F1178016F34816004815F716FE5EA2485D5EA4007E1407150F003E91381DF81800
3F14796C02E11338270F8007C013303B07E03F007CF02601FFF8EB3FC026003FC0EB0F80
2E267DA435>11 D<133F14C0EB07F06D7E801301A26D7EA3147FA36E7EA36E7EA36E7EA3
6E7EA36E7EA36E7EA26E7EA214014A7E5C4A7E91381E3F80143C14784A6C7E1301EB03E0
49486C7EEB0F80EB1F00496D7E137E5B48486D7E485A485A000F6E7E485A485A48C87E12
FE167F4816800070151F293B7CB930>21 D<121C127FEAFF80A5EA7F00121C0909798817
>58 D<121C127FEAFF80A213C0A3127F121C1200A412011380A2120313005A1206120E5A
5A5A12600A19798817>I<EF0380EF0FC0173FEFFF80933803FE00EE0FF8EE3FE0EEFF80
DB03FEC7FCED0FF8ED3FE0EDFF80DA03FEC8FCEC0FF8EC3FE0ECFF80D903FEC9FCEB0FF8
EB3FE0EBFF80D803FECAFCEA0FF8EA3FE0EA7F8000FECBFCA2EA7F80EA3FE0EA0FF8EA03
FEC66C7EEB3FE0EB0FF8EB03FE903800FF80EC3FE0EC0FF8EC03FE913800FF80ED3FE0ED
0FF8ED03FE923800FF80EE3FE0EE0FF8EE03FE933800FF80EF3FC0170FEF0380323279AD
41>I<0103B812E05BA290260007F8C7123F4B140FF003C0140F18015DA2141FA25D1980
143FA25D1760027F14E095C7FC92C75AA24A1301A24A495A16070101141F91B6FC94C8FC
A2903903FC001F824A130EA21307A24A130CA2010F141CA24A90C9FCA2131FA25CA2133F
A25CA2137FA291CBFC497EB612C0A33B397DB835>70 D<902603FFF891381FFFF8496D5C
A2D90007030113006FEC007C02061678DA0EFF157081020C6D1460A2DA1C3F15E0705CEC
181F82023815016F6C5C1430150702706D1303030392C7FC02607FA2DAE0015C701306EC
C0008201016E130EEF800C5C163F0103EDC01C041F131891C713E0160F49EDF038183001
06140717F8010E02031370EFFC60130CEE01FE011C16E004005B011815FF177F13386001
30153FA20170151F95C8FC01F081EA07FCB512E01706A245397DB843>78
D<4BB4FC031F13F09238FE01FC913903F0007EDA07C0EB1F80DA1F80EB0FC0023EC7EA07
E002FCEC03F0495A4948EC01F8495A4948EC00FC495A49C912FE49167E13FE49167F1201
485AA2485AA2120F5B001F17FFA2485AA34848ED01FEA400FFEE03FC90C9FCA2EF07F8A2
EF0FF0A218E0171F18C0EF3F806C167F180017FE4C5A6C6C5D1603001F4B5A6D4A5A000F
ED1F806C6C4AC7FC6D147E0003EC01F8D801FC495AD8007EEB0FC090263F807FC8FC9038
07FFF801001380383D7CBA3F>I<0003B812FEA25A903AF8003FC00101C0913880007E48
48163C90C7007F141C121E001C92C7FCA2485CA200305C007017180060130112E0485CA2
1403C716005DA21407A25DA2140FA25DA2141FA25DA2143FA25DA2147FA292C9FCA25CA2
5CA21301A25CA21303A25CEB0FFC003FB6FC5AA237397EB831>84
D<EC3FC0903801FFF0903807E03C90380F800E90383F0007017E131F49137F484813FF48
5A485A120F4913FE001F143848481300A2127F90C8FCA35A5AA45AA315031507007E1406
150E003E143C003F14706C14E0390F8007C03907C03F003801FFF838003FC020267DA424
>99 D<16F8ED03FEED0F8792381F0F80ED3E3F167F157CA215FC1700161C4A48C7FCA414
035DA414075DA20107B512F0A39026000FE0C7FC5DA4141F5DA4143F92C8FCA45C147EA5
14FE5CA413015CA4495AA45C1307A25C121E123F387F8F80A200FF90C9FC131E12FEEA7C
3CEA7878EA1FF0EA07C0294C7CBA29>102 D<14E0EB03F8A21307A314F0EB01C090C7FC
AB13F8EA03FEEA070F000E1380121C121812381230EA701F1260133F00E0130012C05BEA
007EA213FE5B1201A25B12035BA20007131813E01438000F133013C01470EB806014E014
C01381EB838038078700EA03FEEA00F815397EB71D>105 D<EB03F0EA01FFA3EA00075C
A3130F5CA3131F5CA3133F91C8FCA35B017EEB07C0ED1FF0ED783801FEEBE0F89039FC01
C1FCEC0383EC07070001130ED9F81C13F891383803F091387001E0000349C7FCEBF1C0EB
F38001F7C8FCEA07FEA2EBFFE0EBE7F8380FE0FEEBC07F6E7E141F001F80D9800F1330A2
1670003F011F136001001380A216E04815C0007E1481020F1380158300FE903807870048
EB03FE0038EB00F8263B7CB92B>107 D<EB0FC0EA03FF5AA2EA001F1480A2133FA21400
A25BA2137EA213FEA25BA21201A25BA21203A25BA21207A25BA2120FA25BA2121FA25BA2
123FA290C7FCA25AA2EA7E03A2EAFE07130612FCA2130E130C131C1318EA7C38EA3C70EA
1FE0EA0780123B7DB919>I<D803E0137F3A07F801FFE03A0E3C0781F03A1C3E1E00F826
383F387F00305B4A137C00705B00605BA200E090C712FC485A137EA20000140101FE5C5B
A2150300015D5B15075E120349010F133016C0031F13700007ED80605B17E0EE00C0000F
15014915801603EE0700001FEC0F0E49EB07FC0007C7EA01F02C267EA432>110
D<EB01C0497E1307A4130F5CA3131F5CA3133F91C7FC007FB51280A2B6FCD8007EC7FCA3
13FE5BA312015BA312035BA312075BA3120FEBC006A2140E001F130CEB801C141814385C
146014E0380F81C038078780D803FEC7FCEA00F819357EB31E>116
D<903907E001F090391FF807FC9039783E0E0F9039E01F1C1FD801C09038383F803A0380
0FF07F0100EBE0FF5A000E4A1300000C157E021F133C001C4AC7FC1218A2C7123FA292C8
FCA25CA2147EA214FEA24A130CA20101141C001E1518003F5BD87F81143801835C00FF15
60010714E03AFE0E7C01C0D87C1C495A2778383E0FC7FC391FF00FFC3907C003F029267E
A42F>120 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fj cmti10 10 30
/Fj 30 123 df<387FFFF8A2B5FCA214F0150579941E>45 D<120EEA3F80127F12FFA313
00127E123C0909778819>I<EE01C01603A21607160FA2161F83163FA2167F16FF16EF15
0116CFED038FA2ED070FA2150E151E151C1538A203707FA2EDE007A2EC01C014031580EC
0700A2140EA25CA25C027FB5FCA291B6FC9139E00007F849481303A2495A130791C7FC5B
130E5BA25B1378137013F0EA03F8486C4A7EB56C48B512F0A3343C7BBB3E>65
D<DB03FE130E92393FFF801E92B5EAE03C913903FE01F0913A0FF000787CDA3FC0EB3CFC
4AC7EA1FF802FE140FEB03FC49481407494815F049481403495A5C49C813E05B485A5B00
0317C0485AA2485A1880485A94C7FCA2485AA3127F5BA312FF90CBFCA41738A217784816
707E17F06C5E16015F16036C6C4A5A94C7FC001F150E6D141E000F5D6D5C6C6C495A6C6C
EB03C0D801FEEB0F8027007F807EC8FC6DB45A010F13E0010090C9FC373D74BA3B>67
D<0107B712FEA3903A000FF000074B1300187C021F153CA25DA2143FA25D1838147FA292
C8FCEE03804A130718004A91C7FCA201015CA24A131E163E010314FE91B5FC5EA2903807
F800167C4A1378A2130FA24A1370A2011F14F0A24A90C8FCA2133FA25CA2137FA291CAFC
A25BA25B487EB6FCA337397BB836>70 D<0207B512F0A391390007FC006F5AA215075EA3
150F5EA3151F5EA3153F5EA3157F93C7FCA35D5DA314015DA314035DA31407A25DA2140F
A2003F5C5A141F485CA24A5A12FC00E049C8FC14FE00705B495A6C485A381E0FC06CB4C9
FCEA01F82C3B78B82C>74 D<0107B612F817FF1880903B000FF0003FE04BEB0FF0EF03F8
141FEF01FC5DA2023F15FEA25DA2147FEF03FC92C7FCA24A15F817074A15F0EF0FE01301
EF1FC04AEC3F80EFFE0001034A5AEE0FF091B612C04CC7FCD907F8C9FCA25CA2130FA25C
A2131FA25CA2133FA25CA2137FA291CAFCA25BA25B1201B512FCA337397BB838>80
D<1306130E133FEB7F8013FF3801F7C03803E3E0EA07C1381F00F0003E13F84813784813
3C00E0131C160D6BB92A>94 D<14F8EB07FE90381F871C90383E03FE137CEBF801120148
486C5A485A120FEBC001001F5CA2EA3F801403007F5C1300A21407485C5AA2140F5D48EC
C1C0A2141F15831680143F1587007C017F1300ECFF076C485B9038038F8E391F0F079E39
07FE03FC3901F000F0222677A42A>97 D<133FEA1FFFA3C67E137EA313FE5BA312015BA3
12035BA31207EBE0F8EBE7FE9038EF0F80390FFC07C013F89038F003E013E0D81FC013F0
A21380A2123F1300A214075A127EA2140F12FE4814E0A2141F15C05AEC3F80A215005C14
7E5C387801F8007C5B383C03E0383E07C0381E1F80D80FFEC7FCEA01F01C3B77B926>I<
147F903803FFC090380FC1E090381F0070017E13784913383901F801F83803F003120713
E0120FD81FC013F091C7FC485AA2127F90C8FCA35A5AA45AA3153015381578007C14F000
7EEB01E0003EEB03C0EC0F806CEB3E00380F81F83803FFE0C690C7FC1D2677A426>I<ED
01F815FFA3150316F0A21507A216E0A2150FA216C0A2151FA21680A2153FA202F81300EB
07FE90381F877F90383E03FF017C5BEBF80112013803F00048485B120FEBC001121F5DEA
3F801403127F01005BA214075A485CA2140FA248ECC1C0A2141F15C3ED8380143F158700
7C017F1300ECFF076C485B9038038F8E391F0F079E3907FE03FC3901F000F0253B77B92A
>I<147F903803FFC090380FC1E090383F00F0017E13785B485A485A485A120F4913F800
1F14F0383F8001EC07E0EC1F80397F81FF00EBFFF891C7FC90C8FC5A5AA55AA21530007C
14381578007E14F0003EEB01E0EC03C06CEB0F806CEB3E00380781F83803FFE0C690C7FC
1D2677A426>I<ED07C0ED1FF0ED3E38ED7C3CEDF8FC15F9140115F1020313F8EDF0F016
0014075DA4140F5DA4141F5D010FB512C05B16809039003F800092C7FCA45C147EA414FE
5CA413015CA413035CA413075CA4130F5CA3131F5CA391C8FC5B121CEA7E3EA2EAFE3C13
7C1378EAF8F01278EA3FC0EA0F80264C82BA19>I<EC07C0EC3FF09138FC38E0903901F0
1FF0EB03E0903807C00FEB0F80011F1307D93F0013E05B017E130F13FE4914C01201151F
1203491480A2153F1207491400A25DA249137EA215FEA25D00031301140314076C6C485A
0000131FEB787BEB3FF390380FC3F0EB00031407A25DA2140F5D121C007E131F5D00FE49
C7FC147E5C387801F8387C07E0381FFF80D803FEC8FC24367CA426>I<EB03F0EA01FFA3
EA00075CA3130F5CA3131F5CA3133F91C8FCA35B90387E07F0EC1FFCEC783E9038FFE01F
02C01380EC800F1400485A16C05B49EB1F8012035BA2153F000715005BA25D000F147E5B
15FE5D121FD98001131C15F8163C003F01031338010013F0A216704814E0007E15F016E0
EDE1C000FE903801E38048903800FF000038143C263B7BB92A>I<EB01C0EB07E014F013
0F14E01307EB038090C7FCAB13F0EA03FCEA071EEA0E1F121CA212385B1270A25BEAF07E
12E013FEC65AA212015B1203A25B12075BA2000F13E013C013C1001F13C01381A2EB8380
1303EB0700A2130E6C5AEA07F8EA01E0143879B619>I<EB0FC0EA07FFA3EA001F1480A2
133FA21400A25BA2137EA213FEA25BA21201A25BA21203A25BA21207A25BA2120FA25BA2
121FA25BA2123FA290C7FCA25AA2EA7E0EA212FE131EEAFC1CA2133C133812F81378EA78
70EA7CE0121FEA0F80123B79B915>108 D<D801E001FEEB07F03C07F803FF801FFC3C0E
3C0F07C0783E3C1E3E3C03E1E01F261C1F78D9F3C013803C383FF001F7800F02E0140000
7801C013FE007018C002805B4A4848EB1F80EAF07FD8E07E5CA200000207143F01FE1700
495CA2030F5C0001177E495C18FE031F5C120349DA8001131C18F8033F153C0007040313
3849020013F0A24B1570000F17E049017E15F019E003FEECE1C0001FEE01E34949903800
FF000007C70038143C3E2679A444>I<D801E013FE3A07F803FF803A0E3C0F07C03A1E3E
3C03E0261C1F787F39383FF00114E0007813C000708114804A485AEAF07FEAE07EA20000
140701FE5C5BA2150F00015D5B151F5E12034990383F8380160316070007027F13004913
7EA2160E000F147C49141E161C5E001FEC3C7849EB1FE00007C7EA0780292679A42F>I<
147F903803FFC090380FC1F090381F00F8017E137C5B4848137E4848133E0007143F5B12
0F485AA2485A157F127F90C7FCA215FF5A4814FEA2140115FC5AEC03F8A2EC07F015E014
0F007C14C0007EEB1F80003EEB3F00147E6C13F8380F83F03803FFC0C648C7FC202677A4
2A>I<9039078007C090391FE03FF090393CF0787C903938F8E03E9038787FC00170497E
ECFF00D9F0FE148013E05CEA01E113C15CA2D80003143FA25CA20107147FA24A1400A201
0F5C5E5C4B5A131F5EEC80035E013F495A6E485A5E6E48C7FC017F133EEC70FC90387E3F
F0EC0F8001FEC9FCA25BA21201A25BA21203A25B1207B512C0A3293580A42A>I<3903C0
03F0390FF01FFC391E783C0F381C7C703A3C3EE03F8038383FC0EB7F8000781500007013
00151CD8F07E90C7FCEAE0FE5BA2120012015BA312035BA312075BA3120F5BA3121F5BA3
123F90C9FC120E212679A423>114 D<14FE903807FF8090380F83C090383E00E04913F0
0178137001F813F00001130313F0A215E00003EB01C06DC7FC7FEBFFC06C13F814FE6C7F
6D13807F010F13C01300143F141F140F123E127E00FE1480A348EB1F0012E06C133E0070
5B6C5B381E03E06CB45AD801FEC7FC1C267AA422>I<EB0380EB07C0130FA4131F1480A3
133F1400A35B137E007FB5FCA2B6FC3800FC00A312015BA312035BA312075BA3120F5BA3
121FEB801CA2143C003F1338EB0078147014F014E0EB01C0EA3E03381F0780380F0F00EA
07FCEA01F0183579B31C>I<13F8D803FEEB01C0D8078FEB03E0390E0F8007121E121C00
38140F131F007815C01270013F131F00F0130000E015805BD8007E133FA201FE14005B5D
120149137EA215FE120349EBFC0EA20201131E161C15F813E0163CD9F003133814070001
ECF07091381EF8F03A00F83C78E090393FF03FC090390FC00F00272679A42D>I<01F013
0ED803FC133FD8071EEB7F80EA0E1F121C123C0038143F49131F0070140FA25BD8F07E14
0000E08013FEC6485B150E12015B151E0003141C5BA2153C000714385B5DA35DA24A5A14
0300035C6D48C7FC0001130E3800F83CEB7FF8EB0FC0212679A426>I<903907E007C090
391FF81FF89039787C383C9038F03E703A01E01EE0FE3803C01F018013C0D8070014FC48
1480000E1570023F1300001E91C7FC121CA2C75AA2147EA214FEA25CA21301A24A1370A2
010314F016E0001C5B007E1401010714C000FEEC0380010F1307010EEB0F0039781CF81E
9038387C3C393FF03FF03907C00FC027267CA427>120 D<13F0D803FCEB01C0D8071EEB
03E0D80E1F1307121C123C0038140F4914C01270A249131FD8F07E148012E013FEC64813
3F160012015B5D0003147E5BA215FE00075C5BA214015DA314035D14070003130FEBF01F
3901F87FE038007FF7EB1FC7EB000F5DA2141F003F5C48133F92C7FC147E147C007E13FC
387001F8EB03E06C485A383C1F80D80FFEC8FCEA03F0233679A428>I<903903C0038090
380FF007D91FF81300496C5A017F130E9038FFFE1E9038F83FFC3901F007F849C65A495B
1401C7485A4A5A4AC7FC141E5C5C5C495A495A495A49C8FC131E5B49131C5B4848133C48
481338491378000714F8390FF801F0391FFF07E0383E1FFFD83C0F5B00785CD8700790C7
FC38F003FC38E000F021267BA422>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fk cmtt8 8 45
/Fk 45 127 df<007FB51280B612C0A46C14801A067C9623>45 D<123E127FEAFF80A5EA
7F00123E0909738823>I<EC0380EC07C0140FA2141F1580143F15005C147EA214FE5C13
015C13035C13075CA2130F5C131F5C133F91C7FCA25B137E13FE5B12015BA212035B1207
5B120F5B121F5BA2123F90C8FC5A127E12FE5AA25A12781A347CAD23>I<EB1F80EB7FE0
3801FFF8487F487F13F0380FC03F391F801F80EB000F4814C0003E1307A248EB03E0A300
78130100F814F0AB007CEB03E0A3007E1307003E14C0A2003F130F391F801F80A2390FC0
3F003807F0FE13FF6C5B6C5B38007FE0EB1F801C2B7DA923>I<1318133C137CA213FC12
0112031207127F12FFA2137C127C1200B3A6387FFFFC14FEA314FC172A7AA923>I<EB7F
C03803FFF04813FC001F7F48EBFF80EA7F80397E003FC000FEEB0FE04813076CEB03F0A3
1401127C1238C7FC1403A2EC07E0A2EC0FC0141FEC3F80150014FE1301EB03F8495A495A
EB3FC0495A01FEC7FC485A485AD80FF013E0391FE001F0EA3F8048B5FCB6FCA36C14E01C
2A7DA923>I<EB7FC03801FFF0000713FC487F487F393FE07F809038801FC0140F1407A3
EA0E00C7120FA2EC1F80143F903801FF00EB7FFE495A5C806DB4FC9038007F80EC1FC0EC
0FE01407EC03F0A21401A2127C12FE1403A2EC07E048130F6CEB1FC0387FC07F6CB51280
6C14006C13FC00035B38007FC01C2B7DA923>I<123E127FEAFF80A5EA7F00123EC7FCAB
123E127FEAFF80A5EA7F00123E091D739C23>58 D<EB07F0EB1FFCEB7FFE48B5FC481480
3907FC1FC0380FE0079038C0FFE0EA1F83485AEA3E0FD87E1F13F0007C138FEB3F073878
3E0338F87C01A212F0EB7800A5EB7C0112F8A239783E03E0387C3F0790381F8FC0007E13
FFD83E0F1380D83F071300381F83FE390FC0F9E09038E007F03807FC0F6CB5FC6C14C06C
6C138090381FFE00EB07F81C297DA823>64 D<B512F014FE80158015C0390F800FE01407
EC03F01401A5140315E01407EC1FC090B5128015005C8015C09038800FE01407EC03F014
0115F81400A5140115F01403EC0FE0B6FC15C01580150014FC1D297EA823>66
D<90380FE0E090383FF9F0EBFFFD4813FF5A3807FC3F380FF00F381FC007A2383F800313
00481301127EA2007CEB00E000FC1400A25AA97EA2127C007E14E0EC01F0127F7EEB8003
EA1FC0EC07E0380FF00F3907FC1FC06CB512806C14006C5BEB3FF8EB0FE01C2B7DA923>
I<007FB512FCB612FEA37E3907C0003EA5151C1500A3140E141FA390B5FCA5EBC01FA314
0E91C7FCA9EA7FFEB5FCA36C5A1F297FA823>70 D<B512FEA538007C00B3ADB512FEA517
297AA823>73 D<90381FFFE04913F0A36D13E09038003E00B3A8127C12FEA2147E14FE38
FF03FC6CB45AA2001F13E06C5BD801FEC7FC1C2A7DA823>I<EA7FFEB5FCA36C5AEA07C0
B3A6157CA7007FB512FCB6FCA36C14F81E297EA823>76 D<39FF8001FFA26D5AA3391EE0
0778A3EBF00FEB700EA2EB781EA2EB381CEB3C3CA2EB1C38EB1E78A2EB0E70A3EB07E0A3
EB03C0A290C7FCA939FFC003FFA520297FA823>I<B512F014FE80158015C0390F801FE0
EC07F01403140115F81400A5140115F014031407EC1FE090B512C0158015005C14F00180
C7FCABEAFFF87FA35B1D297EA823>80 D<387FFFC0B512F88014FF7E390F807F80EC1FC0
140F6E7E1403A514074A5A141FEC7F8090B5C7FCA214FC8080EB807F6E7E141F140FA615
87ED8F80A215CFD87FF013DF39FFF807FF1600806C486C5AC812F8212A7FA823>82
D<9038FF83800003EBE3C04813FF121F5AEA7FC0EB003F00FE131F48130FA25A1407A26C
EB038091C7FC127E127FEA3FF06CB4FC6C13F06C13FC00017F39001FFF80010113C0EB00
1FEC0FE01407EC03F0A20070130112F8A36C1303A26CEB07E06C130F9038E03FC090B5FC
15005C00F15B38703FE01C2B7DA923>I<3803FF80000F13E04813F8487F80EB80FFEC3F
80381F001FC7FC140F14FF137F0003B5FC120F5A387FF00F130012FCA25A141F7E6C133F
387F81FF90B512FC6C14FE7E000713C73901FE01FC1F1D7D9C23>97
D<B47E7FA41207A7EBC1FCEBC7FF01DF13C090B512E015F09038FE0FF8EBF8039038F001
FCEBE000A249137EA2153EA5157E7F15FC7F14019038F803F89038FE0FF090B5FC15E001
DF138001CF1300380383F81F297FA823>I<EB3FF0EBFFFC000313FF5A5A381FE07FEA3F
80387F003E007E90C7FCA25AA25AA57EA2007E1307007FEB0F80141FEA3FC0391FF07F00
6CB5FC6C5B6C5BC613F0EB3FC0191D7B9C23>I<ECFF8015C0A41407A7EB7F873801FFE7
4813F7000F13FF5A13E0383F803F387F001F007E130FA2481307A25AA56C130FA2127E14
1F007F133F383F807FEBE0FF6CB512FE7E000313F76C13C738007F031F297EA823>I<EB
3FC0EBFFF800037F4813FF481480381FF07F393F801FC0EB000F007E130715E05AB6FCA4
15C000F8C8FC7EA2007EEB01C0007FEB03E0383F800713E0391FF81FC06CB5FC6C148000
01EBFE006C6C5AEB1FE01B1D7D9C23>I<147F903801FFC0010713E05B5BEB3FCF140F90
383E07C091C7FCA4007FB51280B612C0A36C1480D8003EC7FCB3383FFFFE487FA36C5B1B
297EA823>I<EC01F090383F07FC9038FFDFFE000313FF5A48147E381FE1FE9038807E18
393F003F00A2003E7FA4003F5BA2381F807EEBE1FE6CB45A485B5C001E13C0013FC7FC90
C8FC121F1340380FFFFCECFF804814C04814F0397E0007F8007C130048147CA248143CA3
6C147C6C14FC007FEB03F8EBE01F6CB512F0000F14C06C14800001EBFE0038003FF01F2E
7E9D23>I<B47E7FA41207A7EBC1FCEBC7FF01DF138090B512C0A29038FE0FE0EBF807EB
F00313E0A313C0AD39FFFE1FFF5CA38020297FA823>I<133813FEA5133890C7FCA6EA7F
FC487EA3127FEA003EB3387FFFFEB6FCA36C13FE182A7AA923>I<14E0EB03F8A5EB00E0
1400A63803FFF04813F8A37EC7FCB3AB13011238387C03F012FEEB0FE0B5FC14C06C1300
6C5AEA0FF815397DA923>I<EA7F80487EA3127F1203A7ECFFFC13C1A313C0EC3F00147E
5CEBC1F8EBC3F0EBC7E0EBCFC0EBDFE0EBFFF0A2EBFCF8497EEBF07EEBE03E497E1580EC
0FC01407EC03E0397FFE0FFFB55AA36C487E20297FA823>I<EA7FFEB5FCA37EEA001FB3
AD007FB512C0B612E0A36C14C01B297CA823>I<397E1F01F039FF7FC7FC9038FFEFFE14
FF6C80390FE1FE1FEBC1FC01C07FEB80F8A2EB00F0AE3A7FE3FE3FE026FFF3FF13F0A326
7FE3FE13E0241D819C23>I<38FF81FCEBC7FF01DF138090B512C0A23907FE0FE0EBF807
EBF00313E0A313C0AD39FFFE1FFF5CA380201D7F9C23>I<133F3801FFE0487F487F487F
381FC0FE383F807F383E001F007E1480007C130F00FC14C0481307A66C130FA2007C1480
007E131F6CEB3F006D5A381FE1FE6CB45A6C5B6C5B6C5BD8003FC7FC1A1D7C9C23>I<38
FF81FCEBC7FF01DF13C090B512E015F03907FE0FF8EBF8039038F001FCEBE000A249137E
A2153EA5157E7F15FC7F14019038F803F89038FE0FF090B5FC15E001DF138001CF1300EB
C3F801C0C7FCAAEAFFFEA51F2C7F9C23>I<90383FC1C09038FFF3E0000313FB4813FF5A
381FF07F383FC01F387F000F127E14075A14035AA57E1407127E140F007F131FEA3F8038
1FE07F90B5FC12076C13FB6C13E338003F83EB0003AAEC7FFF91B51280A36E1300212C7E
9C23>I<397FF00FE039FFF87FF8ECFFFC13FB6CB5FCC613F8ECC078EC800091C7FC5BA2
5BA35BAA387FFFFCB57EA36C5B1E1D7E9C23>I<3801FF9C000F13FE5A127FA2EAFF0000
FC137E48133EA26C131C6C1300EA7FF0383FFF80000F13E06C13F838007FFCEB01FEEB00
7F0070133F00F8131F7E143F7E38FF80FFEBFFFE14FC14F814F000701380181D7B9C23>
I<137013F8A7007FB51280B612C0A36C1480D800F8C7FCACEC01C0EC03E0A3EBFC07140F
9038FE1FC0EB7FFF158090383FFE00EB0FFCEB07F01B257EA423>I<39FF807FC001C013
E0A400071303B01407140FEBE03F90B6FC7EA2C613F3EB3FC1201D7F9C23>I<39FFF03F
FCA5390F8007C000071480A2EBC00F00031400A26D5A0001131EA2EBF03E0000133CA2EB
F87CEB7878A2EB7CF8EB3CF0A2133F6D5AA36D5A6D5A1E1D7E9C23>I<397FF00FFE39FF
F81FFFA3397FF00FFE001FC712F86C14F0A57F390783E1E0EB87F1A3EB8FF90003EB79C0
13CFA2EBDF7BA2EBDE3B00011480EBFE3FA2EBFC1FA23900F80F00201D7F9C23>I<39FF
F03FFCA539078007C0158013C00003130F1500EA01E05CEBF01E1200A26D5A1378A26D5A
A3EB1E7014F0130EEB0FE0A213075CA35CA2130F91C7FCA2EA3E1FEA7F1E133EEA7CFC12
7F5B6C5A6C5AEA0F801E2C7E9C23>121 D<003FB512F04814F8A4397C000FF0EC1FE0EC
3FC00038EB7F80C7EAFF00EB01FC495A495A495A495A495A49C7FC13FE485AD807F81370
484813F8485A485A485AB6FCA46C14F01D1D7E9C23>I<3803C038380FF07C381FF8FCEA
3FFF4813F8B512F038FC7FE038F83FC038700F0016097AA823>126
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fl cmr9 9 72
/Fl 72 124 df<EC1FE0ECFFFC903803F01E90390FC00780EB1F8090393F000FC0017E13
1F5BA2485AED0F8092C7FCA9ED0FC0B7FCA33901F8001F150FB3A6486CEB1FE0267FFFC1
B5FCA328357FB42B>12 D<DA1FE013FF9126FFFC0713E0903B03F01E1F80F0903B0FC007
7E003CD91F805B90273F001FF8137E017E4A13FE495CA248485C030F147C95C7FCA9187E
B912FEA33B01F8000FC000187EB3A6486C496C13FF297FFFC1FFFE0F13F8A33D357FB440
>14 D<EA01F8A313FF38003F80EB0FC014E01307A2130FEB1FC0EB7F8038FFFE0013E013
0E777D22>24 D<147CEB01FEEB07C790380F8380EB1F0181EB3E00A2137EA2137C137EA2
14015D140392C9FC5C140E6D5A1418143802F090380FFFF05C6D5A04011300EE00FC6D6C
1470011F1560013F15E0D977F0495AD9E3F85CD801C31403260381FC91C7FC00075D48C6
6C130E486D130C486D131C003E6D6C5A007EECC03091381FE07000FE010F5B6F5AEC07F9
6EB45A6C6D90C712306E5A157F6C6C6D6C13604B6C13E03A3FC001EFE03C1FE003C7F803
C03C0FF01F83FE0F802707FFFE00B51200000101F8EB3FFE26003FC0EB07F034387DB53C
>38 D<123C127EB4FCA21380A2127F123D1201A412031300A25A1206120E120C121C5A5A
126009177AB315>I<14C01301EB0380EB0F00130E5B133C5B5BA2485A485AA212075B12
0F90C7FC5AA2121E123EA3123C127CA55AB0127CA5123C123EA3121E121FA27E7F12077F
1203A26C7E6C7EA213787F131C7F130FEB0380EB01C01300124A79B71E>I<12C07E1270
123C121C7E120F6C7E6C7EA26C7E6C7EA27F1378137C133C133EA2131E131FA37F1480A5
EB07C0B0EB0F80A514005BA3131E133EA2133C137C137813F85BA2485A485AA2485A48C7
FC120E5A123C12705A5A124A7CB71E>I<123C127EB4FCA21380A2127F123D1201A41203
1300A25A1206120E120C121C5A5A126009177A8715>44 D<B512F0A514057F921A>I<12
3C127E12FFA4127E123C08087A8715>I<EB0FE0EB7FFCEBF83E3903E00F803907C007C0
EB8003000F14E0391F0001F0A24814F8A2003E1300007E14FCA500FE14FEB2007E14FCA5
6CEB01F8A36C14F0A2390F8003E03907C007C0A23903E00F803900F83E00EB7FFCEB0FE0
1F347DB126>48 D<13075B5B137FEA07FFB5FC13BFEAF83F1200B3B3A2497E007FB51280
A319327AB126>I<EB3FC0EBFFF0000313FC380F80FF391E007F80001CEB3FC048EB1FE0
48130F15F00060130712FC6C14F87E1403A3007E1307123CC7FC15F0A2140F15E0EC1FC0
A2EC3F801500147E5C495A5C495A495A495A49C7FC133E133C4913185B485A4848133048
5A48C7FC001C1470001FB512F05A5AB612E0A31D327CB126>I<EB1FE0EBFFFC4813FF39
07E03F80390F001FC0001EEB0FE0001CEB07F0123F018013F8140313C01380A2381F0007
C7FC15F0A2EC0FE015C0141FEC3F80EC7E00EB01F8EB7FE014FCEB003FEC1FC0EC0FE0EC
07F015F8140315FC140115FEA3127EB4FCA415FC48130312780070EB07F86C14F0003C13
0F001FEB1FE0390FE03F800003B51200C613FCEB1FE01F347DB126>I<EC01C0A2140314
07A2140F141FA2143F147F146F14CF1301EB038F140F1307130E130C131C133813301370
13E013C0EA0180120313001206120E120C5A123812305A12E0B71280A3C7380FC000A94A
7E0107B51280A321337EB226>I<000C14C0380FC00F90B5128015005C5C14F014C0D80C
18C7FC90C8FCA9EB0FC0EB7FF8EBF07C380FC03F9038001F80EC0FC0120E000CEB07E0A2
C713F01403A215F8A41218127E12FEA315F0140712F8006014E01270EC0FC06C131F003C
14806CEB7F00380F80FE3807FFF8000113E038003F801D347CB126>I<14FE903807FF80
011F13E090383F00F0017C13703901F801F8EBF003EA03E01207EA0FC0EC01F04848C7FC
A248C8FCA35A127EEB07F0EB1FFC38FE381F9038700F809038E007C039FFC003E0018013
F0EC01F8130015FC1400A24814FEA5127EA4127F6C14FCA26C1301018013F8000F14F0EB
C0030007EB07E03903E00FC03901F81F806CB51200EB3FFCEB0FE01F347DB126>I<1230
123C003FB6FCA34814FEA215FC0070C7123800601430157015E04814C01401EC0380C7EA
07001406140E5C141814385CA25CA2495A1303A3495AA2130FA3131F91C7FCA25BA55BA9
131C20347CB126>I<EB0FE0EB7FFC90B5FC3903F01F803907C007C0390F0003E0000EEB
01F0001E1300001C14F8003C1478A3123EA2003F14F86D13F0EBC001D81FF013E09038F8
03C0390FFE07803907FF0F006C13DE6C13F87EEB3FFE8001F713C0D803E313E0D8078013
F0390F007FF8001E131F003EEB07FC003C1303481301EC007E12F848143EA2151EA37E15
3C1278007C14787E6C14F0390F8003E03907F01FC00001B5120038007FFCEB1FE01F347D
B126>I<EB0FE0EB7FF8EBFFFE3803F83F3907E00F80390FC007C0D81F8013E0EC03F0EA
3F0048EB01F8127EA200FE14FC1400A415FEA5007E1301A2127F7E1403EA1F80000F1307
3807C00E3803E01C3801F03838007FF090381FC0FC90C7FC1401A215F8A215F01403001F
14E0383F800715C0140FEC1F809038003F00001C137E381F01FC380FFFF0000313C0C690
C7FC1F347DB126>I<123C127E12FFA4127E123C1200B0123C127E12FFA4127E123C0820
7A9F15>I<15E0A34A7EA24A7EA34A7EA3EC0DFE140CA2EC187FA34A6C7EA202707FEC60
1FA202E07FECC00FA2D901807F1507A249486C7EA301066D7EA2010E80010FB5FCA24980
0118C77EA24981163FA2496E7EA3496E7EA20001821607487ED81FF04A7ED8FFFE49B512
E0A333367DB53A>65 D<B7FC16E016F83A03FC0003FE0001EC00FFEE7F80EE3FC0161F17
E0160F17F0A617E0161F17C0EE3F80EE7F0016FEED03FC90B612F05E9039FC0007FCED00
FEEE3F80EE1FC0EE0FE017F0160717F8160317FCA617F81607A2EE0FF0EE1FE0163FEE7F
C00003913803FF00B75A16F816C02E337DB236>I<DA03FE130C91393FFF801C91B512E0
903A03FE01F83C903A0FF0003C7CD91FC0EB0EFCD97F80130701FEC71203484814010003
15005B4848157C485A173C485A171C123F5B007F160CA390C9FC481600AB7E6D150CA312
3F7F001F161C17186C7E17386C6C15306C6C15706D15E012016C6CEC01C0D97F80EB0380
D91FC0EB0F00D90FF0131ED903FE13FC0100B512F0023F13C0DA03FEC7FC2E377CB437>
I<B77E16F016FE3A01FE0001FF00009138003FC0EE0FE0707E707E707E707E177E177FEF
3F80A2EF1FC0A3EF0FE0A418F0AA18E0A3171F18C0A21880173F18005F17FE5F4C5AEE07
F04C5AEE3FC000014AB45AB748C7FC16F8168034337EB23B>I<B812C0A3D803FCC7127F
0001150FEE03E01601A21600A21760A403061330A41700150EA2151E157E90B512FEA390
38FC007E151E150EA21506170CA3171892C7FCA41738A21770A217F01601160316070003
157FB812E0A32E337DB234>I<B81280A3D803FCC7FC0001151FEE07C01603A21601A216
00A41760150CA31700A2151CA2153C15FC90B5FCA3EBFC00153C151CA2150CA592C8FCAB
487EB512FEA32B337DB232>I<DA03FE130C91393FFF801C91B512E0903A03FE01F83C90
3A0FF0003C7CD91FC0EB0EFCD97F80130701FEC7120348481401000315005B4848157C48
5A173C485A171C123F5B007F160CA390C9FC4893C7FCAA0303B512E07E7F92390003FE00
705A123F7F121FA26C7E7F12076C7E7F6C6C14036C7E6D6C1307D91FC0EB0E7CD90FF0EB
1C3CD903FEEBF81C0100B5EAF00C023F01C0C7FCDA03FEC8FC33377CB43C>I<B5D8FE03
B512F8A3000190C73807FC006C486E5AB390B7FCA349C71203B3A3486C4A7EB5D8FE03B5
12F8A335337EB23A>I<B512FEA3000113006C5AB3B3A7487EB512FEA317337EB21C>I<01
7FB5FCA39038003FE0EC1FC0B3B1127EB4FCA4EC3F805A0060140000705B6C13FE6C485A
380F03F03803FFC0C690C7FC20357DB227>I<B500FE903807FFF8A3000190C700011300
6C48EC00FC17F04C5A4C5A4CC7FC160E5E5E5E5E4B5A4B5A4BC8FC150E5D5D15F84A7E14
034A7EEC0EFF5C4A6C7E4A6C7EECE01FD9FFC07F4A6C7E4A6C7E5B6F7E6F7EA26F7E707E
A2707E707E160F83707E707EA283486C913807FF80B500FE013F13FCA336337EB23C>I<
B512FEA3D803FEC9FC6C5AB3A9EE0180A416031700A45EA25E5E5E5E16FE00031407B7FC
A329337DB230>I<D8FFFC923801FFF86D5DA20003EFFE00D801BFED06FCA3D99F80140C
A2D98FC01418A3D987E01430A2D983F01460A3D981F814C0A3D980FCEB0180A2027EEB03
00A36E1306A26E6C5AA36E6C5AA36E6C5AA26E6C5AA36E6C5AA3913800FD80A2037FC7FC
A3486C133ED80FF04B7EB5011C90387FFFF8A33D337CB246>I<D8FFFE91381FFFF87F80
C6030013006E143CD9DFE01418EBCFF0A2EBC7F8EBC3FCA2EBC1FEEBC0FF6E7EA26E7E6E
7EA26E7E6E7E6E7EA26E7E6E7EA2ED7F80ED3FC0ED1FE0A2ED0FF0ED07F8A2ED03FCED01
FEED00FFA2EE7F98EE3FD8A2EE1FF8160F1607A216031601A2486C1400D807F81578B500
C01438A2171835337EB23A>I<EC07FC91387FFFC0903901FC07F0903907E000FCD90F80
133E013FC76C7E017E6E7E496E7E48486E7E48486E7EA248486E7E000F8249157E001F16
7FA24848ED3F80A2007F17C0A290C9121FA24817E0AB6C17C06D153FA3003F17806D157F
A2001F17006D5D000F5E6C6C4A5AA26C6C4A5A00015E6C6C4A5A017E4A5A6D4A5AD91FC0
017FC7FCD907E013FC903901FC07F09039007FFFC0DA07FCC8FC33377CB43C>I<B612FE
EDFFC016F03A03FC0007FC0001EC00FE167FEE3F80EE1FC017E0160FA217F0A617E0A2EE
1FC0A2EE3F80EE7F0016FEED07F890B65A168001FCC9FCB3A2487EB512F8A32C337DB234
>I<B612FCEDFF8016F03A01FE0007FC0000EC01FEED007F707E707E83160F83A65FA24C
5AA24C5A047EC7FC4B5AED0FF090B612C093C8FC9039FE001FC0ED07F06F7E6F7E150082
167E167FA583A5180C17C0A2043F131C486C1618B500FEEB1FE0040F1338933807F070C9
3801FFE09338003F8036357EB239>82 D<90381FE00390387FFC0748B5FC3907F01FCF39
0F8003FF48C7FC003E80814880A200788000F880A46C80A27E92C7FC127F13C0EA3FF013
FF6C13F06C13FF6C14C06C14F0C680013F7F01037F9038003FFF140302001380157F153F
ED1FC0150F12C0A21507A37EA26CEC0F80A26C15006C5C6C143E6C147E01C05B39F1FC03
F800E0B512E0011F138026C003FEC7FC22377CB42B>I<007FB712FEA390398007F001D8
7C00EC003E0078161E0070160EA20060160600E01607A3481603A6C71500B3AB4A7E011F
B512FCA330337DB237>I<B500FE90381FFFF8A3000190C813006C48153C1718B3AF1738
017F1530A217706D6C1460011F15E06E495A010F14036D6C495A6D6C49C7FCD901FC131E
6DB413FC91383FFFF0020F13C0020190C8FC35357EB23A>I<B500F0903803FFF8A3D807
FEC8EA7FC06C48ED1F000001161E6D151C00001618A26D15386D1530A26D6C5CA26E14E0
011F5DA26D6C495AA28001074AC7FCA26D6C1306A28001015CA26E131C01001418806E5B
A2ED8070023F1360A26E6C5AA215E1020F5BA2DA07F3C8FCA215FBEC03FEA36E5AA26E5A
A31570A235357EB23A>I<B5D8F007B539800FFFF0A3000390C7273FF000011300D801FC
6E48EB007C1A386D140F00001930836D020715706D1860A26E496C14E0013F60A26ED919
FC1301011F60A26ED930FE1303010F95C7FCA26ED9607F5B01071706A26E9039C03F800E
0103170CA2913BFC01801FC01C01011718A2913BFE03000FE03801001730A2DAFF06EB07
F0027F5EA2038CEB03F8023F5EA203D8EB01FC021FEDFD80A203F0EB00FF020F93C8FCA2
4B800207157EA24B143E0203153CA24B141C020115184C357FB24F>I<267FFFFC90B512
C0A3000101E090381FF80026007F80EB0FC0013F6E5A6E91C7FC6D6C130E010F140C6E5B
6D6C133801035C6E13606D6C13E06D6C485A5EDA7F83C8FCEC3FC715C6EC1FECEC0FFC5D
14076E7EA26E7E815C6F7E9138063FC0140E4A6C7E9138180FF0EC380702707F91386003
FCECC0010101804A6C7E49C77E4981010E6E7E010C6E7E131C496E7E01786E7E13FCD807
FEEC1FFEB56C90B512F8A335337EB23A>I<B500F8ECFFFEA300030180EC3FE06C90C8EA
1F806CEE0E006D6C5C6D6C141817386D6C14305F6D6C14E06D6C5C16016D6C5C6D6C49C7
FC5E6D6C13065E91387F801C91383FC018163891381FE0306E6C5A16E06E6C5AEDF980EC
03FF6E90C8FC5D1400B14A7E91B512FCA337337FB23A>I<1320137013F8487EEA03DEEA
078F380F0780381E03C0383C01E0387800F000E0133800401310150C78B326>94
D<EB7F803803FFF0380F80FC381C003E003F133F6D6C7E6E7EA26E7EEA1F00C7FCA4EB01
FF131FEBFF873803FC07EA0FF0EA1FC0EA3F80127F13004815C05AA3140FA26C131F6C13
3B3A3F8071F180391FC1E1FF2607FFC013003900FE003C22237DA126>97
D<EA03F012FFA312071203AEEC3F80ECFFE09038F3C0F89038F7007E01FE7F49EB1F8049
EB0FC05BED07E016F0A2150316F8AA16F0150716E0A2ED0FC07F6DEB1F8001ECEB3F0001
CF137C90388381F8903801FFE0C76CC7FC25357EB32B>I<EB07F8EB3FFF9038FC07C039
01F000E03903E003F03807C007120FEA1F80123F90380003E04890C7FCA2127E12FEAA12
7FA26C14187F001F14386D1330000F14706C6C13E03903F001C03900FC0F8090383FFE00
EB07F01D237EA122>I<153FEC0FFFA3EC007F81AEEB07F0EB3FFCEBFC0F3901F003BF39
07E001FF48487E48487F8148C7FCA25A127E12FEAA127E127FA27E6C6C5BA26C6C5B6C6C
4813803A03F007BFFC3900F81E3FEB3FFCD90FE0130026357DB32B>I<EB0FE0EB7FFCEB
F83F3903F00F80D807E013C0390FC007E0381F800315F0EA3F0014014814F8127EA212FE
A2B6FCA248C8FCA5127E127FA26C1418A26C6C1338000F14306D13706C6C13E03901F003
C03900FC0F00EB3FFEEB07F01D237EA122>I<EB01FCEB07FF90381F078090383E0FC0EB
7C1F13FCEA01F8A20003EB070049C7FCACB512F0A3D803F0C7FCB3A7487E387FFFE0A31A
357FB417>I<151F90391FC07F809039FFF8E3C03901F07FC73907E03F033A0FC01F8380
9039800F8000001F80EB00074880A66C5CEB800F000F5CEBC01F6C6C48C7FCEBF07C380E
FFF8380C1FC0001CC9FCA3121EA2121F380FFFFEECFFC06C14F06C14FC4880381F000100
3EEB007F4880ED1F8048140FA56C141F007C15006C143E6C5C390FC001F83903F007E0C6
B51280D91FFCC7FC22337EA126>I<EA03F012FFA312071203AEEC1FC0EC7FF09038F1E0
FC9038F3807C9038F7007E13FE497FA25BA25BB3486CEB7F80B538C7FFFCA326347EB32B
>I<EA0780EA0FC0EA1FE0A4EA0FC0EA0780C7FCAAEA07E012FFA3120F1207B3A6EA0FF0
B5FCA310337EB215>I<EB03C0EB07E0EB0FF0A4EB07E0EB03C090C7FCAAEB03F013FFA3
13071303B3B01238127C00FE13E0130714C0130F007C138038381F00EA1FFCEA07F01443
84B217>I<EA03F012FFA312071203AF913803FFE0A36E1300EC00F8EC01E05D4A5A020F
C7FC141C5C5C14F0EBF3F8EBF7FC13FEEBFC7EEBF87F496C7E141F6E7E8114076E7E8114
016E7E81486CEBFF80B500C313F0A324347EB329>I<EA07E012FFA3120F1207B3B3A7EA
0FF0B5FCA310347EB315>I<2703F01FE013FF00FF90267FF80313C0903BF1E07C0F03E0
903BF3803E1C01F02807F7003F387FD803FE1470496D486C7EA2495CA2495CB3486C496C
487EB53BC7FFFE3FFFF0A33C217EA041>I<3903F01FC000FFEB7FF09038F1E0FC9038F3
807C3907F7007EEA03FE497FA25BA25BB3486CEB7F80B538C7FFFCA326217EA02B>I<EB
07F0EB3FFE9038FC1F803901F007C03903C001E000078048486C7E48C7127CA248147E00
3E143E007E143FA300FE1580A8007E1500A36C147EA26C147C6D13FC6C6C485A00075C39
03F007E03900FC1F80D93FFEC7FCEB07F021237EA126>I<3903F03F8000FFEBFFE09038
F3C0F89038F7007ED807FE7F6C48EB1F804914C049130F16E0ED07F0A3ED03F8A9150716
F0A216E0150F16C06D131F6DEB3F80160001FF13FC9038F381F89038F1FFE0D9F07FC7FC
91C8FCAA487EB512C0A325307EA02B>I<3803E07C38FFE1FF9038E38F809038E71FC0EA
07EEEA03ECA29038FC0F8049C7FCA35BB2487EB512E0A31A217FA01E>114
D<EBFF06000713CE381F00FE003C133E48131E140E5A1406A27EA200FE90C7FC6C7EEA7F
FC383FFFC014F0000F7F6C7FC67FEB0FFF1300EC3F8000C0131F140F6C1307A37E15006C
5B6C130E6C5B38F7807838E1FFE038C07F8019237EA11E>I<1330A51370A313F0A21201
A212031207381FFFFEB5FCA23803F000AF1403A814073801F806A23800FC0EEB7E1CEB1F
F8EB07E0182F7FAD1E>I<D803F0133F00FFEB0FFFA30007EB007F000380B35DA35D1201
6D4813800000903803BFFC90387E073FEB1FFED907F8130026227EA02B>I<B5EBFFF0A3
D80FF0EB3F800007EC1F000003140E150C6D131C00011418A26C6C5BA26D1370017E1360
137F6D5BA290381F8180A214C3010F90C7FCA2EB07E6A214FE6D5AA26D5AA36D5AA21460
24217E9F29>I<B53A1FFF81FFF0A33C07F801FC003F8001F049EB1E0000030100141C81
6C6C017C1318A26D017E1338000002FE1330A290267E01FF5B159F168090263F030F5BA2
16C0903A1F8607C180A202C613E390260FCC0390C7FCA2D907FC13F6ECF80116FE6D486C
5AA36D481378A36D48133034217F9F37>I<B53801FFF8A32603FE0013806C48EB7C0000
001478017E1370017F5B90383F81C090381F8380D90FC3C7FCEB07E614FE6D5A6D5A6D7E
80805B9038039F809038071FC09038060FE0EB0C0790381C03F0496C7E01707FEBF00000
0180000FECFF8026FFFC0313FCA326207F9F29>I<3A7FFF807FF8A33A07F8001FC00003
EC0F800001EC070015066C6C5BA26D131C017E1318A26D5BA2EC8070011F1360ECC0E001
0F5BA2903807E180A214F3010390C7FC14FBEB01FEA26D5AA31478A21430A25CA214E05C
A2495A1278D8FC03C8FCA21306130EEA701CEA7838EA1FF0EA0FC025307F9F29>I<003F
B512F0A2EB000F003C14E00038EB1FC00030EB3F800070137F1500006013FE495A13035C
C6485A495AA2495A495A49C7FC153013FE485A12035B48481370485A001F14604913E048
5A387F000348130F90B5FCA21C207E9F22>I<B712F8A22502809426>I
E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fm cmbx10 10 37
/Fm 37 123 df<913803FFC0027F13F00103B512FC010FEB00FED93FF8133FD97FE0EBFF
8049485A5A1480484A13C04A6C1380A36F1300167E93C7FCA592383FFFC0B8FCA4000390
C7FCB3ABB5D8FC3F13FFA4303A7EB935>12 D<B61280A819087F9620>45
D<141E143E14FE1307133FB5FCA313CFEA000FB3B3A6007FB61280A4213779B630>49
D<EB0FFC90387FFFC048B512F0000714FC390FF03FFF261F800F1380263F000313C05AD9
C00113E0486C6C13F07FA2ED7FF8A46C5A6C5A000FC7FCC8FCEDFFF0A216E05C16C04A13
8016004A5A5D4A5A4A5A4A5AEC7F8092C7FC14FEEB01F849481378495A495A495A013EC7
12F84914F05B4848130148B6FCA25A5A5A5A4815E0B7FCA425377BB630>I<EB03FF011F
13F0017F13FC3901FC07FF2603F003138048486C13C0496C13E0EA0FF001FC14F0121F7F
A56C4814E0A23803F001C714C04A138016004A5A4A5AEC3FF090380FFFC092C7FC15F090
380007FE913801FF806E13C016E0ED7FF016F816FC153FA216FEEA1FC0487E487E487EA4
16FCA249EB7FF8127F01C0EBFFF06C4814E06C6C4813C0260FFC0713806CB61200000114
FC6C6C13F0010790C7FC27387CB630>I<ED07C0150FA2151F153F157F15FFA25C5C5C5C
A2141E5C147C5C5C495A495A1307495A5C131E5B137C5B5B485A485A1207485A90C7FC12
1E5A127C5AB81280A4C70001EBC000AA0103B61280A429377DB630>I<001C15C0D81F80
130701F8137F90B61280A216005D5D15F05D15804AC7FC14F090C9FCA8EB07FE90383FFF
E090B512F89038FC07FC9038E003FFD98001138090C713C0120EC813E0157F16F0A216F8
A21206EA3F80EA7FE012FF7FA44914F0A26C4813FF90C713E0007C15C06C5B6C491380D9
C0071300390FF01FFE6CB512F8000114E06C6C1380D90FF8C7FC25387BB630>I<EC0FF8
ECFFFE0103EBFF8090390FF80FC090393FE003E090397FC001F09038FF000F48EC1FF848
48133F485A120F5B121FA2003FEC1FF0ED0FE04990C7FC127FA21408EC7FF039FFF1FFFC
01F313FFD9F78013809039FF007FC049EB3FE04914F0ED1FF85B16FCA34914FEA5127FA5
123F16FCA26C7E16F8000F143F6C6C14F0ED7FE06C6C14C03A01FF81FF806C90B5120001
3F13FC010F13F00101138027387CB630>I<123C123EEA3FE090B71280A41700485D5E5E
5EA25E007CC7EA0FC000784A5A4BC7FC00F8147E48147C15FC4A5A4A5AC7485A5D140F4A
5A143F92C8FC5C147E14FE1301A2495AA31307A2130F5CA2131FA5133FA96D5A6D5A6D5A
293A7BB830>I<EA0F80EA3FE0EA7FF0A2EAFFF8A5EA7FF0A2EA3FE0EA0F80C7FCABEA0F
80EA3FE0EA7FF0A2EAFFF8A5EA7FF0A2EA3FE0EA0F800D2579A41B>58
D<ED03E04B7EA24B7EA34B7EA24B7EA34B7EA292B57EA34A8015F302038015E1A2020780
15C0020F80ED807FA2021F80ED003F4A80023E131FA2027E80027C7F02FC814A7FA20101
824A7F49B77EA3498202C0C7FC010F824A147FA2011F8291C8123F4982013E151FA2017E
82017C8101FE83B500F80107B61280A4413A7DB948>65 D<DB3FFCEB01C00203B5EAC003
021FECF00791B6EAFC0F01039039FC00FF3F4901C0EB1FFFD91FFEC77E49481403D97FF0
80494880485B48177F4849153F4890C9FC181F485A180F123F5B1807127FA24993C7FC12
FFAD127F7FF003C0123FA27F001F1707A26C6C1780180F6C6D16006C6D5D6C173E6C6D15
7ED97FF85D6D6C4A5A6DB44A5A010701C0EB0FE06D01FCEBFF80010090B548C7FC021F14
F8020314E09126003FFEC8FC3A3B7BB945>67 D<B912C0A43A007FF800039338007FE017
1F170F1707A21703A21701A318F0EE7800A41800A216F8A21501150791B5FCA4ECF80715
011500A21678A693C8FCADB7FCA434397DB83C>70 D<B612FCA439007FF800B3B3ADB612
FCA41E397DB824>73 D<B7FCA426007FF8C9FCB3ACEF0780A5170F1800A35FA25FA25F5F
5E5EEE0FFE167FB8FCA431397DB839>76 D<B8FC17F017FEEFFF8028007FF8000F13C004
0113E07013F0EF7FF8EF3FFCA2EF1FFEA218FFA818FEA2EF3FFCA2EF7FF8EFFFF04C13E0
040F13C091B7120017FC17E002F8C9FCB3A4B612FCA438397DB841>80
D<B712FCEEFFE017FC17FF28007FF8000F13C004017F707F717E717EA2717EA284A760A2
4D5A604D5A4D5A04035B041F90C8FC91B612FC17E0839139F8003FFCEE0FFF707F707F82
84A2707FA584A51A601AF084177F1901DD3FFE13E0B600FC011F130394390FFF87C071EB
FF8005011400CBEA1FFC443A7DB848>82 D<D907FF130E013FEBE01E90B5EAF83E0003EC
FE7E3A07FC01FFFE390FF0001F4848130F48481303491301007F140090C8FC167E5A163E
A27F161E7F7F6D91C7FC13FC387FFFE014FEECFFF06C14FE6F7E6C816C15F06C816C81C6
81133F010F801301D9000F1480EC007F030F13C01503818100F0157FA3163FA27E17807E
167F6C16007E6D14FE01E0495A01F813039039FF801FF800FC90B512E0D8F83F5CD8F007
49C7FC39E0007FF02A3B7BB935>I<EB3FFE0003B512E0000F14F8391FF00FFE003FEB03
FF6D6C7F6E7FA26F7EA26C5A6C5AEA0380C8FCA2EC3FFF010FB5FC137F3901FFF87F0007
1380380FFE00EA3FF85B485A12FF5BA415FF6D5A127F263FF00713F83B1FFC1FBFFFC039
0FFFFE1F0003EBF80F39003FE0032A257DA42E>97 D<13FFB5FCA412077EAF4AB47E020F
13F0023F13FC9138FE03FFDAF00013804AEB7FC00280EB3FE091C713F0EE1FF8A217FC16
0FA217FEAA17FCA3EE1FF8A217F06E133F6EEB7FE06E14C0903AFDF001FF80903AF8FC07
FE009039F03FFFF8D9E00F13E0D9C00390C7FC2F3A7EB935>I<903801FFC0010F13FC01
7F13FFD9FF8013802603FE0013C048485AEA0FF8121F13F0123F6E13804848EB7F00151C
92C7FC12FFA9127FA27F123FED01E06C7E15036C6CEB07C06C6C14806C6C131FC69038C0
7E006DB45A010F13F00101138023257DA42A>I<EE7F80ED7FFFA4150381AF903801FF81
010F13F1013F13FD9038FFC07F0003EB001FD807FC1307000F8048487F5B123FA2485AA3
12FFAA127FA27F123FA26C6C5B000F5C6C6C5B6C6C4913C02701FF80FD13FE39007FFFF9
011F13E1010313012F3A7DB935>I<903803FF80011F13F0017F13FC3901FF83FE3A03FE
007F804848133F484814C0001FEC1FE05B003FEC0FF0A2485A16F8150712FFA290B6FCA3
01E0C8FCA4127FA36C7E1678121F6C6C14F86D14F000071403D801FFEB0FE06C9038C07F
C06DB51200010F13FC010113E025257DA42C>I<EC1FF0903801FFFC010713FF90391FF8
7F8090383FE0FFD9FFC113C0A2481381A24813016E1380A2ED3E0092C7FCA8B6FCA40003
90C8FCB3ABB512FEA4223A7DB91D>I<161FD907FEEBFFC090387FFFE348B6EAEFE02607
FE07138F260FF801131F48486C138F003F15CF4990387FC7C0EEC000007F81A6003F5DA2
6D13FF001F5D6C6C4890C7FC3907FE07FE48B512F86D13E0261E07FEC8FC90CAFCA2123E
123F7F6C7E90B512F8EDFF8016E06C15F86C816C815A001F81393FC0000F48C813804815
7F5A163FA36C157F6C16006D5C6C6C495AD81FF0EB07FCD807FEEB3FF00001B612C06C6C
91C7FC010713F02B377DA530>I<13FFB5FCA412077EAFED7FC0913803FFF8020F13FE91
381F03FFDA3C01138014784A7E4A14C05CA25CA291C7FCB3A3B5D8FC3F13FFA4303A7DB9
35>I<EA01F0EA07FC487EA2487EA56C5AA26C5AEA01F0C8FCA913FF127FA412077EB3A9
B512F8A4153B7DBA1B>I<13FFB5FCA412077EB3B3ACB512FCA4163A7DB91B>108
D<01FED97FE0EB0FFC00FF902601FFFC90383FFF80020701FF90B512E0DA1F81903983F0
3FF0DA3C00903887801F000749DACF007F00034914DE6D48D97FFC6D7E4A5CA24A5CA291
C75BB3A3B5D8FC1FB50083B512F0A44C257DA451>I<01FEEB7FC000FF903803FFF8020F
13FE91381F03FFDA3C011380000713780003497E6D4814C05CA25CA291C7FCB3A3B5D8FC
3F13FFA430257DA435>I<903801FFC0010F13F8017F13FFD9FF807F3A03FE003FE04848
6D7E48486D7E48486D7EA2003F81491303007F81A300FF1680A9007F1600A3003F5D6D13
07001F5DA26C6C495A6C6C495A6C6C495A6C6C6CB45A6C6CB5C7FC011F13FC010113C029
257DA430>I<9039FF01FF80B5000F13F0023F13FC9138FE07FFDAF00113800007496C13
C06C0180EB7FE091C713F0EE3FF8A2EE1FFCA3EE0FFEAA17FC161FA217F8163F17F06E13
7F6E14E06EEBFFC0DAF00313809139FC07FE0091383FFFF8020F13E0020390C7FC91C9FC
ACB512FCA42F357EA435>I<9038FE03F000FFEB0FFEEC3FFF91387C7F809138F8FFC000
075B6C6C5A5CA29138807F80ED3F00150C92C7FC91C8FCB3A2B512FEA422257EA427>
114 D<90383FF0383903FFFEF8000F13FF381FC00F383F0003007E1301007C130012FC15
787E7E6D130013FCEBFFE06C13FCECFF806C14C06C14F06C14F81203C614FC131F903800
7FFE140700F0130114007E157E7E157C6C14FC6C14F8EB80019038F007F090B512C000F8
140038E01FF81F257DA426>I<130FA55BA45BA25B5BA25A1207001FEBFFE0B6FCA30003
90C7FCB21578A815F86CEB80F014816CEBC3E090383FFFC06D1380903803FE001D357EB4
25>I<01FFEC3FC0B5EB3FFFA4000714016C80B3A35DA25DA26C5C6E4813E06CD9C03E13
FF90387FFFFC011F13F00103138030257DA435>I<003FB612C0A3D9F0031380EB800749
481300003E5C003C495A007C133F5D0078495A14FF5D495B5BC6485B92C7FC495A131F5C
495A017FEB03C0EBFFF014E04813C05AEC80074813005A49EB0F80485A003F141F484813
3F9038F001FFB7FCA322257DA42A>122 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fn cmsy10 10 8
/Fn 8 122 df<007FB81280B912C0A26C17803204799641>0 D<121C127FEAFF80A5EA7F
00121C0909799917>I<0060150600F8150F6C151F007E153F6C157E6C6C14FC6C6CEB01
F86C6CEB03F06C6CEB07E06C6CEB0FC06C6CEB1F80017EEB3F006D137E6D6C5A90380FC1
F8903807E3F0903803F7E06DB45A6D5B6EC7FCA24A7E497F903803F7E0903807E3F09038
0FC1F890381F80FC90383F007E017E7F49EB1F804848EB0FC04848EB07E04848EB03F048
48EB01F84848EB00FC48C8127E007E153F48151F48150F00601506282874A841>I<EB03
80497EA7397803803C00FC147E00FE14FE397F8383FC393FC387F8390FE38FE03903FBBF
803900FFFE00EB3FF8EB0FE0A2EB3FF8EBFFFE3903FBBF80390FE38FE0393FC387F8397F
8383FC39FE0380FE00FC147E0078143C390007C000A76D5A1F247BA62A>I<EB1FF0EBFF
FE487F000714C04814E04814F04814F8A24814FCA3B612FEA96C14FCA36C14F8A26C14F0
6C14E06C14C0000114006C5BEB1FF01F1F7BA42A>15 D<EF0180EF07C0171FEF7F809338
01FF00EE07FCEE1FF0EE7FC04B48C7FCED07FCED1FF0ED7FC04A48C8FCEC07FCEC1FF0EC
7FC04948C9FCEB07FCEB1FF0EB7FC04848CAFCEA07FCEA3FF0EA7FC048CBFC5AEA7F80EA
3FE0EA0FF8EA03FEC66C7EEB3FE0EB0FF8EB03FE903800FF80EC3FE0EC0FF8EC03FE9138
00FF80ED3FE0ED0FF8ED03FE923800FF80EE3FE0EE0FF8EE03FE933800FF80EF3FC0170F
EF038094C7FCAE007FB81280B912C0A26C1780324479B441>20 D<181EA4181F84A28518
0785727EA2727E727E85197E85F11F80F10FC0F107F0007FBA12FCBCFCA26C19FCCCEA07
F0F10FC0F11F80F13F00197E61614E5A4E5AA24E5A61180F96C7FCA260181EA4482C7BAA
53>33 D<130F497EA96DC7FCA71306A3007EEB07E039FFC63FF090B5FCA2EBC63F397E06
07E0000090C7FCA2130FA5497EB3A76DC7FCAD1306A61C4D7CBA25>121
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fo cmti12 17.28 20
/Fo 20 122 df<130FEB7FC0EBFFE05A14F05AA76C13E0EA007C1300130114C0A2130314
80A2130714005B130E131E131C133C5BA25B485A5B1203485A48C7FC121E5A5A5A5A5A14
2A758D2B>44 D<1A1E1A1F6262A262A261A26161A2618761A26161197B19FB19F3F001E3
A2F003C318071983180F1903061E80A2183C85187818F818F0EF01E0A2EF03C0A2EF0780
170F1800171E875FA24D7F17F85F4C5AA24C5AA24C5A160F94C8FC5E161E4C82A25E04F8
157F5E15015E4BB8FCA25DA24BC9127F5D151E4B83A25D1A3F5D14015D4A5AA24A5AA24A
CAFC5C141E5C875C14F81A1F495A13031307010F183F131FD97FF84D7E2603FFFE0403B5
7E007FD9FFE092B7FC4E1680B61A006C5C596678E568>65 D<92BB12FC5CA280DB007F90
C8120F704815007048EE3FF8043F170F1C074D1603A2167F1C014D17F0A216FFA25FA25D
1DE05FA25DA25F1C034B19C0A294CAFC1AE04B4B6C14805090C7FC5EA2031F1503625E19
07153F624C140F191F157F077FC9FC4C5C180F92B8FC61A34A9038E0000FF001FC4C1300
A25C19785E19F85C6193C8FCA24A1501615DA2021F5E95CBFC5DA2143FA25DA2147FA25D
A214FFA25DA25BA25DA25BA25DA25B5B013F13F0007FB612FEB7FCA35E6276E15C>70
D<037FB612F892B7FCA219F0DB003FEBE0007090C7FC705A161FA25FA2163FA25FA2167F
A25FA216FFA25FA25DA25FA25DA25FA25DA294C8FCA25DA25EA2151FA25EA2153FA25EA2
157FA25EA215FFA25EA25CA25EA25CA25EA25CA293C9FCA25CA25DA2141FA25DA2143FA2
5DA2147FA25DA214FFA25DA25BA25DA25B5B011F13F0007FB612F882B75A7E3D6277E136
>73 D<92B912C01BFC4AF0FF806E85DB007F90C7000713F070489138007FF87048ED1FFC
043F707E757E4D6F13807513C0167F7513E05F1DF016FFA25FA24B19F8A25FA24B19F063
5FA25D5113E094C9FCA24B4D13C0A24C1880511300151F515A4C5F515A153F515A4C4C5A
501380037F4C90C7FCF20FFE4C4B5AF27FF003FF923803FFC0073F90C8FC93B712FC1AE0
97C9FC4A01E0CCFC5EA35C5EA35C93CDFCA35C5DA3141F5DA3143F5DA3147F5DA314FF5D
A35B5DA35B5DA25B5B013F13E0007FB612F0B7FCA25E5D6276E15F>80
D<ED07F0ED3FFE92B513F0913A03FC0F81FC91390FF007C391391FC003E791397F8001F7
4AC7FC494814FF49486E5A495A010F153F495A49485DA24948141F01FF153F4A5D5A5A91
C8127F485FA2485A17FF60485AA25E003F94C7FC5BA25E007F5E5BA216075F5B12FF160F
4D137019F05B161F007FEEF00119E0A2043F1303047F14C017E0003F15FF4BEC07805D6C
6CD907DF130FDB0F9F1400000FDA1F1F5B6C6C013E141E6C6CD97C0F133E6D48486C6C5A
2800FE07E0035B903B7FFFC001FFF0011F90C75BD903F8EC1F803C4071BE48>97
D<4BB4FC031F13E0037F13F8913901FF01FE913907F8003FDA1FE0EB1F804A48130FDAFF
80EB07C04948C712034948140F0107153F4948147F494814FF49485B137F495A5C481780
4890C81300177C4893C7FC5B120F5B121FA2485AA3127F5BA312FF5BA45BA75B17031880
6DED07C0007FEE0F80EF1F005F003F167E6D5D001F4B5A000FED07E06D4A5A6C6CEC3F80
6C6C02FEC7FC6C6CEB07F83A007F807FE06DB51280010F01FCC8FC010013C0324070BE41
>99 D<193F95387FFF80050FB5FC4D1400A283EF000F725A18031807A261A2180FA261A2
181FA261A2183FA261A2187FA261A218FFA261A25FA296C7FCA2923807F003ED3FFE92B5
5B913903FC0F8391390FF007C791391FC003E7913A7F8001F7FC4AC7FC494814FF494814
7F49485D010F153F495A495A604948141F01FF153F5C485F5A91C8127F5A60485A17FFA2
48485EA25E123F4993C8FCA25E127F495DA21607A2495D12FF160F19704D13F05B161F00
7F170105F05BA2043F1303047F5C17E0003F15FF4B4A5A5D6C6CD907DF130FDB0F9F91C7
FC000FDA1F1F5B6C6C013E141E6C6CD97C0F133E6D48486C6C5A2800FE07E0035B903B7F
FFC001FFF0011F90C75BD903F8EC1F80416571E348>I<ED03FF031F13C092B512F09139
03FE01FC91390FF8007EDA3FE07FDA7F807F4948C713804948140F495A495A495A495A13
7F495A5C48161F4890C813005F48163E4848157E5F4848EC03F8EE0FF0EE3FC0003FDA03
FFC7FC9039F801FFFC90B612E04BC8FC4891C9FC01F0CAFCA4485AA55BA5127FA2170318
80EF07C0003FEE0F80EF1F006D5D001F167E5F6C6C4A5AEE07E06C6C4A5A0003ED3F806C
6C02FEC7FC6C6CEB07F890397F807FE0011FB51280010701FCC8FC010013C0324070BE41
>I<F00FE0F03FFC95B5FC943901F81F80943907F007C094380FE00F051FEB3FE0F0C07F
053F13FF60177F068113C017FF060013804C1500193C96C7FC5F1603A316075FA4160F5F
A4161F5FA4163F5FA20203B77E4A82A26191C7D87FC0C8FCA416FF5FA45D94C9FCA45D5E
A415075EA4150F5EA4151F5EA4153F5EA4157F5EA415FF5EA45C93CAFCA45C5DA44A5AA3
5D140FA35DA2141F5DA2D807805B381FE03F123FD87FF05BA2484848CBFCA2147E495A13
80387E01F8387C03F0383F07E06CB45A000790CCFCEA01FC438283E42B>I<EE0FE0EE7F
FC923A03FFFE01E0923A07F81F03F892391FE00F8792397F8007CF9239FF0003EF4A4813
014A48EB00FF4A5A4A4815F0021F157F4A5A4A5A19E04A48143F49167F92C8FC4917C05B
4A15FF130F4A1680131F5FA249481600A25F137F4A5DA2170713FF4A5DA2170FA24A5DA2
171FA2605C173FA260177FA2017F15FF4C5B5E6D7E5E011F4A5B6E5B010F5C6D6C13F990
2703F801F190C7FC903901FC0FE16DB5128391383FFE03DA07F05B91C7FC1607A25FA216
0FA25FA2161F5FA2163F5FD80F80147F486C5DD87FE014FF5F00FF4A90C8FC4B5A4B5A4B
5A49495A49EB3FC0007EC7B45A273FC007FEC9FC6CB512F8000714C0C66C48CAFC3D5C78
BE41>I<150FED3F80ED7FC015FF5CA416806E1300153C92C7FCB3A3EB01F8EB07FE9038
1FFF8090383E0FC001F87F13F048486C7EEA03C00007130F1380EA0F00A2121E141F123E
123C143F007C5C0078137F5DA200F813FF00705CC7FC5B92C7FCA25B5C13075CA2130F5C
A2131F5CA2133F5C137F9138C001C0150313FFEC800716805A1400ED0F005A495B151EA2
495BA25D5D000113015D0000EB07C06D485AD93FFFC7FCEB1FFCEB07F0226074DE2B>
105 D<15FC903801FFFE133F15FCA3EB003FEC1FF8140F141FA215F0A2143FA215E0A214
7FA215C0A214FFA21580A25BA21500A25BA25CA21307A25CA2130FA25CA2131FA25CA213
3FA25CA2137FA25CA213FFA25CA25AA291C7FCA25AA25BA21207A25BA2120FA25BA2121F
A25BA2123FEC01C0EBE003A2007F1307158013C0A2140F00FF140013805C141EA2007F13
3E143C147C1478003F13F8381F81F0EBC3E03807FFC06C5BD8007EC7FC1F6573E324>
108 D<D90FC0EC3FE0D93FF0903801FFFCD9FFFC010F13FF2601F0FE90393FC07F802603
E07F90397E003FC001C0D980F86D7E000790263F83F06D7E0180EB87C0000FECCF800100
91C77F4802DE1407001E14FE4A5A003E5C003C5C180F5D007C13FF00785CA200F84A141F
48485F007091C8FC1200183F495F5CA2187F01075F5C18FF61130F4A5C96C7FCA2011F5D
4A5DA21707013F4C131C4A173C170F4E137C017F18784A141F601AF001FF153F4AEDE001
1AE0A2489438C003C091C8FCF10780F10F0048161F49171E050F137C716C5A496FB45A49
6F13C0C6486F6CC7FC464074BE4F>110 D<4BB4FC031F13E0037F13F8913901FF01FE91
3907F8007FDA1FE0EB3F804A48EB1FC0DAFF8014E04948C7EA0FF04948EC07F813074948
15FC49481403495A017F16FE495A5C5A4890C813FFA25A5B120F495D121FA2485AA25F00
7F17FE5BA2171F00FF17FC5BA2173F18F85BEF7FF0A218E017FF18C0A2494A138018005E
5F6C6C4A5A4C5AA2003F4B5A6D4A5A001F4B5A000F4BC7FC6D495A6C6C495A6C6CEB0FF0
6C6C495A3A007F80FF806DB448C8FC010F13F001011380384070BE48>I<D90FC049B4FC
D93FF0010F13E0D9FFFC013F13F82601F0FE9038FE01FC3C03E07F01F8003E01C0D983E0
137F000790263F87C013FF018090388F8003000FECDF00010001FE5B485C121E4A5A003E
4A14FE003CEE03FC4BEB01F094C7FC007C495A00785CA212F8485A007091C9FC1200A25B
5CA313075CA3130F5CA3131F5CA3133F5CA3137F5CA313FF5CA35A91CAFCA35A5BA35B5B
C65A384074BE3B>114 D<ED0FF8ED7FFF0203B512C0913907F807F091391FC001F89139
3F8000FC027EC7127C02FE143E4948141E495A173E494814FE1601010F14035CA2131F17
FCEE00F06E1400A2808080ECFFE06D13FF16C016F06D14FC6D806D806D1580143F020F14
C01400030713E0150181167F163FA2161FEA07C0EA1FE0487E007F16C0A3163F48481580
A20180EC7F006CC8FC007815FE5E007C4A5A6C4A5A003F4A5A6C6CEB1FC06C6C495A2703
F803FEC7FC6CB512F86C6C13E0D907FEC8FC2F4075BE39>I<15F0EC01FC14031407A314
0FA25DA2141FA25DA2143FA25DA2147FA25DA214FFA25DA25B007FB612FEB7FCA216FCD8
000390C7FC5CA21307A25CA2130FA25CA2131FA25CA2133FA25CA2137FA25CA213FFA25C
A25AA291C8FCA25AA25BA2120716704914F0A2000F140116E049130316C01507001F1580
49130F16005D153E000F143C5D15F84A5A0007495A6C6C485AEC1F802600FFFEC7FCEB7F
F8EB0FE0275A72D82F>I<EB01F8D90FFEED01E0496C6CEC07F090267E1FC0140F9026F8
0FE08101F04C5A48486C7EEA03C00007010F153F1380D80F005FA2001E177F141F003E60
123C023F15FF007C5C0078017F5E5D5F00F813FF00704A92C7FCC7FC495D92C7FC605B4A
1407A201075E5C170F130F4A5DA2171F131F4A5DA2173F013FEF01C04AEDE003A2057F13
071A8018C0A24A160F05FF14001880616E49141E5E011F173E4C143C6ED90F7F137C010F
021E14786D6CD93C3F13F86D6C9039F81FC1F0902701FE03F0EBC3E06DB539C007FFC002
3FD900035BDA07F8D9007EC7FC424074BE4B>I<EB01F8D90FFEED01E0496C6CEC07F090
267E1FC0140F9026F80FE015F801F0EE1FF048486C7EEA03C00007010F153F018017E0EA
0F00A2001E177F021F16C0123E123C023F15FF007C4A15800078137F5D5F00F801FF1600
00705CC7FC495D92C75BA25B4A14076013075C170F010F5E5CA2171F011F5E5CA2173F01
3F5E5CA2177F60A34A14FF60A36E5B4C90C7FC131F5E6E5B010F4A5A6D6C133F6D6C13FB
903901FE03F76DB5EAC7FC023F1307EC07F891C7120F5FA34C5AA2163F5FEA03F0D80FF8
4A5A486C5D16FF94C8FC003F4A5A4913035E49495A01C0495A003CC7485A003E5D001E4A
5A001F02FFC9FC6C6C485A9038C003F83907F01FE00001B512806C6C48CAFCEB1FF03D5C
74BE44>121 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fp cmr17 17.28 12
/Fp 12 86 df<170FA34D7EA24D7EA34D7EA34D7EA34C7F17DFA29338039FFC178FA293
38070FFE1707040F7FEE0E03A2041E80EE1C01A2043C80EE3800A24C80187FA24C80183F
A24B4880181F0303814C130FA203078193C71207A24B81030E80A24B8284A24B8284A24B
82197F03F0824B153FA20201834B151FA202038392B8FCA24A83A292C91207020E8385A2
4A8485023C84023882A20278840270177FA202F0844A173FA24948841A1FA24948841A0F
A249CB7F1A074985865B496C85497E48486C4D7F000F01F8051F13F0B60407B612F0A45C
657DE463>65 D<DD7FF81560040FB56C14E0047F14E00303B600FC1301030F9038E003FE
DB3FFEC7383F8003DBFFF0EC07C04A01C0913803F007020790C9EAF80FDA0FFC167C4A48
EE1E1FDA7FE0160F4A48EE07BF4949EE03FF4990CAFC4948834948834A187F495A013F19
3F4948181F5C01FF190F485BA24890CC1207A248481903A2485A1B01121FA25B123F1B00
5BA2127F1C00A4485AB06C7EA5123F1CE07FA2121F7FA2000F1A011CC06C7EA26C7E1B03
6C6D19801B076C7F017F1A006E606D6C181E131F6D6C606E18386D6C18786D6C606D6D4C
5A6D6D4C5A6E6C1607DA1FF84C5A6E6C4CC7FC6EB4167C020101C04A5A6E01F0EC07F0DB
3FFEEC1FC092280FFFE001FFC8FC030390B512FCDB007F14F0040F14809326007FF8C9FC
53667AE360>67 D<BC1280A4C601FCC81201D93FF8DB001F13C0011F170319001A7F1A3F
1A1F1A0F1A07A21A03A21BE01A01A41A00A61B701870A41B00A418F0A417011703170717
0F177F91B7FCA402F8C7127F170F1707170317011700A41870A31B0EA41B1C95C8FCA51B
3C1B38A31B78A41BF0A31A01A21A031A07A2F20FE01A1F1A7F1AFF1903013F171FD9FFFC
0303B5FCBC12C0A44F6279E15A>69 D<BB12FCA4C601FCC8120FD93FF89238007FFE011F
171F190719031900A21A7E1A3EA21A1EA21A1F86A486A6F20380A318E0A297C7FCA61701
A417031707170F171F17FF91B7FCA402F8C7FC171F170F170717031701A41700A895C9FC
B3A580133F90B57EB712E0A4496279E156>I<B712C0A4C66CEB8000D91FFEC7FC6D5AB3
B3B3B3AE497E90387FFF80B712C0A422627AE12F>73 D<B712E0A4C60280CAFCD93FFCCB
FC131F5CB3B3B21A1CA61A3C1A38A61A78A41AF8A21AF01901A219031907A2190F191F19
3F197FF001FF1807013F043F13E0D9FFFC0203B5FCBBFCA4466279E153>76
D<B500FC041FB512F0A280A226003FFF0400EBFE006D6DEE3FF8F20FE0011D7F745A011C
7F6E6C705AA26E7E81141F6E7EA26E7E82806E7FA26E7F6F7EA26F7E82151F6F7EA26F7E
83816F7FA26F7F707EA2707E83161F707EA2707E8482707FA2707F84177F717E84171F71
7EA2717E1980837113C0A27113E019F0187FF03FF819FC181FF00FFEA2F007FF1A838472
13C3A27213E31AF3197FF13FFB1AFF8585A285A28585A285133E1A7F017F183FA22601FF
C0171F000701F0170FB67E1A07A21A03546279E163>78 D<933801FFE0043F13FF4BB612
E003079038003FF8DB1FF0EB03FEDB7FC0903800FF804A48C8EA3FE0DA03FCED0FF0DA0F
F0ED03FC4A486F7E4A486F7E4A48707E4ACA6C7E4948717E4948717E4948717E4948717E
4948717E013F854A83017F864948727EA24890CC6C7EA24848737EA24848737EA2000F87
491907001F87A34848737EA4007F1C80A24985A400FF1CC0AF6C6C4F1380A5003F1C006D
61A3001F63A26D190F000F63A26C6C4F5AA36C6C4F5AA26C6D4E5A6C636E18FF017F626D
6C4D90C7FC6E5F011F616D6C4D5A6D6C4D5A0103616E171F6D6C4D5A6D6D4C5ADA3FC04C
C8FCDA1FF0ED03FE6E6C4B5A6E6C4B5ADA01FFED3FE09126007FC0ECFF80DB1FF0D903FE
C9FCDB07FFEB3FF8030190B512E0DB003F91CAFC040113E05A667AE367>I<B912C018FE
F0FFC019F0C601FCC813FCD93FF8ED0FFF011F04037F06007FF13FF0737E737E1907737E
86731380A27313C0A31BE01A7FA21BF0A91BE0A21AFF1BC0A34F13801B00614F5A624F5A
4F5AF17FE04F5A060390C7FCF01FFE943801FFF891B812E096C8FC18F802F8CCFCB3B3A4
497E90B5FCB7FCA44C6279E15A>I<B812FCEFFFE018FCF0FF80C601FCC7000F13E0D93F
F89138007FF8011FEE1FFCF007FF06017F727FF13FE0737E86737E737EA2868587A28587
A96361A298C8FC6162624F5A191F4F5A4F5AF1FF804E90C9FCF007FEF01FF8F0FFE0050F
138091B700FCCAFC18E08402F8C7EA1FFE943801FF80716C7EF03FF0727EF007FC727E85
727F8486737EA3737EAA86AA1DE086191FA3070F14017414C007071403496C8390B570EC
0780B76F9038800F00736D5A97383FF03E97380FFFFCCD000313F09738003FC05B6479E1
62>82 D<003FBC12F8A49126C000039038C0000301FCC76C49EB007F01F0190F01C01907
4848F103FC90C81701007E1A00007C1B7CA300781B3CA400701B1CA600F01B1E481B0EA7
C91800B3B3B3A54C7FA2041F13F84AB87EA457627CE160>84 D<B7031FB512F0A4C691CA
EBFE00D93FFCEF3FF86D48EF0FE0A2745AA2745AB3B3B3A71A07010F96C7FC80A3010760
1A0E6E171E13031A1C6D6C173C1A386D6D1678626E7E023F4C5A6F4B5A6E6C15076E6C4B
5A6E6C4BC8FC6E6C153E6E6C15FC9126007FC0495ADB3FF0EB0FF0DB0FFEEB7FC00303B6
C9FC030014FC043F13F004031380546479E163>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fq cmr10 10 80
/Fq 80 125 df<DA0FF813FC91397FFF07FF903B01F807DF83C0903A07E001FF0F903B1F
8007FE1FE090393F000FFC137E16F85B9338F007804848010790C7FC1503ACB812F8A328
01F80003F0C7FCB3AB486C497E267FFFE0B512F0A3333B7FBA30>11
D<EC0FF8EC7FFE903901F80780903907E001C090391F8000E090383F0007017E497EA25B
A2485A6F5AED018092C8FCA9ED03F0B7FCA33901F8000F1503B3AA486C497E267FFFE0B5
12C0A32A3B7FBA2E>I<EC0FFC91387FFF70903901F803F0903807E00790381F800FEB3F
00137EA25B150748481303ADB7FCA33901F80003B3AB486C497E267FFFE0B512C0A32A3B
7FBA2E>I<DA0FF0EB1FF0DA7FFEEBFFFC903B01F80F83F00F903C07E001CFC00380903C
1F8000FF0001C090273F0007FE130F017E4948497EA2495CA248485C03076E5A03030203
C7FC95C8FCA9F007E0BAFCA33C01F80003F0001F1807B3AA486C496C497E267FFFE0B500
C1B51280A3413B7FBA45>I<EA03F0A313FE38003F80EB1FC0EB0FE01307A3130FEB1FC0
EBFF8038FFFE0013E0130F757D25>24 D<001C131C007F137F39FF80FF80A26D13C0A300
7F137F001C131C00001300A40001130101801380A20003130301001300485B0006130600
0E130E485B485B485B006013601A197DB92A>34 D<141FEC7FC0903801F0E0903803C060
0107137090380F803090381F00381518A25BA2133E133F15381530A215705D5D14019038
1F838092CAFC1487148E02DC49B51280EB0FF85C4A9039003FF8000107ED0FC06E5D71C7
FC6E140E010F150CD91DFC141C01391518D970FE143801E015302601C07F1470D803805D
00076D6C5BD80F00EBC00148011F5C4890380FE003003E6E48C8FC007E903807F8060203
130E00FE6E5A6E6C5A1400ED7F706C4B13036F5A6F7E6C6C6D6C5B7013066C6C496C130E
6DD979FE5B281FF001F07F133C3C07F80FE03FC0F86CB539800FFFF0C69026FE000313C0
D91FF0D9007FC7FC393E7DBB41>38 D<121C127FEAFF80A213C0A3127F121C1200A41201
1380A2120313005A1206120E5A5A5A12600A1979B917>I<146014E0EB01C0EB0380EB07
00130E131E5B5BA25B485AA2485AA212075B120F90C7FCA25A121EA2123EA35AA65AB212
7CA67EA3121EA2121F7EA27F12077F1203A26C7EA26C7E1378A27F7F130E7FEB0380EB01
C0EB00E01460135278BD20>I<12C07E12707E7E7E120F6C7E6C7EA26C7E6C7EA21378A2
137C133C133E131EA2131F7FA21480A3EB07C0A6EB03E0B2EB07C0A6EB0F80A31400A25B
131EA2133E133C137C1378A25BA2485A485AA2485A48C7FC120E5A5A5A5A5A13527CBD20
>I<15301578B3A6007FB812F8B912FCA26C17F8C80078C8FCB3A6153036367BAF41>43
D<121C127FEAFF80A213C0A3127F121C1200A412011380A2120313005A1206120E5A5A5A
12600A19798817>I<B512FCA516057F941C>I<121C127FEAFF80A5EA7F00121C09097988
17>I<150C151E153EA2153C157CA2157815F8A215F01401A215E01403A215C01407A215
80140FA215005CA2141E143EA2143C147CA2147814F8A25C1301A25C1303A2495AA25C13
0FA291C7FC5BA2131E133EA2133C137CA2137813F8A25B1201A25B1203A25B1207A25B12
0FA290C8FC5AA2121E123EA2123C127CA2127812F8A25A12601F537BBD2A>I<EB03F8EB
1FFF90387E0FC09038F803E03901E000F0484813780007147C48487FA248C77EA2481580
A3007EEC0FC0A600FE15E0B3007E15C0A4007F141F6C1580A36C15006D5B000F143EA26C
6C5B6C6C5B6C6C485A6C6C485A90387E0FC0D91FFFC7FCEB03F8233A7DB72A>I<EB01C0
13031307131F13FFB5FCA2131F1200B3B3A8497E007FB512F0A31C3879B72A>I<EB0FF0
EB7FFE48B57E3903E03FE0390F000FF0000E6D7E486D7E486D7E123000706D7E126012FC
B4EC7F807FA56CC7FC121CC8FCEDFF00A34A5A5D14035D4A5A5D140F4A5A4A5A92C7FC14
7C5C495A495A495A495A91C8FC011EEB01805B5B49130348481400485A485A000EC75A00
0FB6FC5A5A485CB6FCA321387CB72A>I<EB07F8EB3FFF4913C03901F80FF03903C007F8
48486C7E380E0001000F80381FE0006D7FA56C5A6C5AC85A1401A25D4A5AA24A5A5DEC0F
80027EC7FCEB1FFCECFF809038000FE06E7EEC01FC816E7EED7F80A216C0A2153F16E0A2
121EEA7F80487EA416C049137F007F1580007EC7FC0070ECFF006C495A121E390F8003F8
3907F00FF00001B512C06C6C90C7FCEB0FF8233A7DB72A>I<1538A2157815F8A2140114
031407A2140F141F141B14331473146314C313011483EB030313071306130C131C131813
301370136013C01201EA038013005A120E120C5A123812305A12E0B712F8A3C73803F800
AB4A7E0103B512F8A325397EB82A>I<0006140CD80780133C9038F003F890B5FC5D5D15
8092C7FC14FC38067FE090C9FCABEB07F8EB3FFE9038780F803907E007E090388003F049
6C7E12066E7EC87EA28181A21680A4123E127F487EA490C71300485C12E000605C127000
30495A00385C6C1303001E495A6C6C485A3907E03F800001B5C7FC38007FFCEB1FE0213A
7CB72A>I<EC3FC0903801FFF0010713FC90380FE03E90383F800790387E001F49EB3F80
4848137F485AA2485A000FEC3F0049131E001F91C7FCA2485AA3127F90C9FCEB01FC9038
07FF8039FF1E07E090383801F0496C7E01607F01E0137E497FA249148016C0151FA290C7
13E0A57EA56C7E16C0A2121FED3F807F000F15006C6C5B15FE6C6C5B6C6C485A3900FE07
F090383FFFC06D90C7FCEB03FC233A7DB72A>I<12301238123E003FB612E0A316C05A16
8016000070C712060060140E5D151800E01438485C5D5DC712014A5A92C7FC5C140E140C
141C5CA25CA214F0495AA21303A25C1307A2130FA3495AA3133FA5137FA96DC8FC131E23
3B7BB82A>I<EB03F8EB1FFF017F13C09038FC07F03901E001F848486C7E4848137C90C7
7E48141E000E141F001E80A3121FA27F5D01E0131E6C6C133E01FC133C6D5B6C6C6C5AEC
C1E06CEBF3C06C01FFC7FC6C5BEB3FFF6D13C081017F13F801F07F3903E07FFE3907801F
FF48486C1380481303003E6D13C0003CEB007F007C143F0078EC0FE000F814075A1503A2
1501A36C15C012781503007C15806CEC07006C5C6C6C131ED807E0137C3903F803F0C6B5
5A013F1380D907FCC7FC233A7DB72A>I<EB03F8EB1FFF017F13C09038FC07E03903F803
F048486C7E48486C7E49137E121F48487FA2007F158090C7FCA248EC1FC0A616E0A56C14
3FA27F123F001F147FA26C6C13FF3907E001DF0003149F3801F0033900FC0F1FD93FFC13
C0EB07F090C7FC153F1680A316005D000F147E487E486C5BA24A5A4A5A49485A6C48485A
001C495A260F807FC7FC3807FFFC000113F038003FC0233A7DB72A>I<121C127FEAFF80
A5EA7F00121CC7FCB2121C127FEAFF80A5EA7F00121C092479A317>I<121C127FEAFF80
A5EA7F00121CC7FCB2121C127F5A1380A4127F121D1201A412031300A25A1206A2120E5A
121812385A1260093479A317>I<007FB812F8B912FCA26C17F8CCFCAE007FB812F8B912
FCA26C17F836167B9F41>61 D<EB3FE03801FFFE3907C03F80390E000FC0003CEB07F000
301303007014F8007C130100FE14FC7EA4127E003CEB03F8C7FCEC07F0A2EC0FE0EC1F80
EC3F00147E147C5C495A5C495A5CA249C7FCA31306AA90C8FCA8130EEB3F80497EA56D5A
010EC7FC1E3B7CBA27>63 D<1538A3157CA315FEA34A7EA34A6C7EA202077FEC063FA202
0E7FEC0C1FA2021C7FEC180FA202387FEC3007A202707FEC6003A202C07F1501A2D90180
7F81A249C77F167FA20106810107B6FCA24981010CC7121FA2496E7EA3496E7EA3496E7E
A213E0707E1201486C81D80FFC02071380B56C90B512FEA3373C7DBB3E>65
D<B712E016FC16FF0001903980007FC06C90C7EA1FE0707E707E707EA2707EA283A75F16
035F4C5A4C5A4C5A4C5AEEFF8091B500FCC7FCA291C7EA7F80EE1FE0EE07F0707E707E83
707EA21880177F18C0A7188017FFA24C13005F16034C5AEE1FF8486DEB7FF0B812C094C7
FC16F832397DB83B>I<913A01FF800180020FEBE003027F13F8903A01FF807E07903A03
FC000F0FD90FF0EB039F4948EB01DFD93F80EB00FF49C8127F01FE153F12014848151F48
48150FA248481507A2485A1703123F5B007F1601A35B00FF93C7FCAD127F6DED0180A312
3F7F001F160318006C7E5F6C7E17066C6C150E6C6C5D00001618017F15386D6C5CD91FE0
5C6D6CEB03C0D903FCEB0F80902701FF803FC7FC9039007FFFFC020F13F002011380313D
7BBA3C>I<B712C016F816FE000190398001FF806C90C7EA3FE0EE0FF0EE03F8707E707E
177FA2EF3F8018C0171F18E0170F18F0A3EF07F8A418FCAC18F8A4EF0FF0A218E0A2171F
18C0EF3F80A2EF7F0017FE4C5A4C5AEE0FF0EE3FE0486DEBFF80B8C7FC16F816C036397D
B83F>I<B812FCA30001903880000F6C90C71201EE007E173E171E170EA31706A3170783
16C0A394C7FCA31501A21503150F91B5FCA3EC000F15031501A21500A21860A318E093C7
12C0A41701A3EF0380A21707A2170F173F177F486D903807FF00B9FCA333397DB839>I<
B812F8A30001903880001F6C90C71201EE00FC177C173C171CA2170CA4170E1706A2ED01
80A21700A41503A21507151F91B5FCA3EC001F15071503A21501A692C8FCAD4813C0B612
C0A32F397DB836>I<DBFF8013C0020FEBF001023F13FC9139FF803F03903A03FC000787
D90FF0EB03CF4948EB00EF4948147F4948143F49C8121F485A4848150F48481507A24848
1503A2485A1701123F5B007F1600A448481600AB93B6FCA26C7E9338007FE0EF3FC0A212
3F7F121FA26C7EA26C7EA26C7E6C7E6C6C157F6D7E6D6C14FF6D6C14EFD90FF8EB03C7D9
03FEEB0783903A00FFC03F0191393FFFFC00020F01F0130002001380383D7CBA41>I<B6
48B512FEA30001902680000313006C90C76C5AB3A491B6FCA391C71201B3A6486D497EB6
48B512FEA337397DB83E>I<B612C0A3C6EBC0006D5AB3B3AD497EB612C0A31A397EB81E>
I<013FB512E0A39039001FFC00EC07F8B3B3A3123FEA7F80EAFFC0A44A5A1380D87F005B
0070131F6C5C6C495A6C49C7FC380781FC3801FFF038007F80233B7DB82B>I<B649B5FC
A3000101809038007FF06C90C8EA3F80053EC7FC173C17385F5F4C5A4C5A4CC8FC160E5E
5E5E5E4B5AED0780030EC9FC5D153E157E15FF5C4A7F4A6C7E140E4A6C7E4A6C7E14704A
6C7E4A6C7E14804A6C7E6F7EA26F7F707EA2707E707EA2707EA2707E707EA2707E707F84
84486D497FB6011FEBFF80A339397DB841>I<B612E0A3000101C0C8FC6C90C9FCB3AD17
18A517381730A31770A317F0A216011603160FEE1FE0486D13FFB8FCA32D397DB834>I<
B5933807FFF86E5DA20001F0FC002600DFC0ED1BF8A2D9CFE01533A3D9C7F01563A3D9C3
F815C3A2D9C1FCEC0183A3D9C0FEEC0303A2027F1406A36E6C130CA36E6C1318A26E6C13
30A36E6C1360A26E6C13C0A3913901FC0180A3913900FE0300A2ED7F06A3ED3F8CA2ED1F
D8A3ED0FF0A3486C6D5A487ED80FFC6D48497EB500C00203B512F8A2ED018045397DB84C
>I<B5913807FFFE8080C69238007FE06EEC1F80D9DFF0EC0F001706EBCFF8EBC7FCA2EB
C3FEEBC1FFA201C07F6E7EA26E7E6E7E81140F6E7E8114036E7E168080ED7FC016E0153F
ED1FF0ED0FF8A2ED07FCED03FEA2ED01FF6F1386A2EE7FC6EE3FE6A2EE1FF6EE0FFEA216
071603A216011600A2177E486C153E487ED80FFC151EB500C0140EA2170637397DB83E>
I<EC03FF021F13E09138FE01FC903901F8007ED907E0EB1F8049486D7ED93F80EB07F049
C76C7E01FE6E7E48486E7E49157E0003167F4848ED3F80A24848ED1FC0A2001F17E04915
0F003F17F0A3007F17F8491507A300FF17FCAC007F17F86D150FA3003F17F0A26C6CED1F
E0A36C6CED3FC0000717806D157F000317006C6C15FEA26C6C4A5A017F4A5A6D6C495A6D
6C495AD907E0EB1F80D903F8017FC7FC903900FE01FC91381FFFE0020390C8FC363D7BBA
41>I<B712C016F816FE000190398001FF806C90C7EA3FC0EE0FE0EE07F0EE03F817FC17
FE1601A217FFA717FEA2EE03FCA2EE07F817F0EE0FE0EE3FC0923801FF0091B512FC16F0
91C9FCB3A5487FB6FCA330397DB839>I<B612FEEDFFE016F8000190388007FE6C90C76C
7EEE3FC0707E707E707EA2707EA283A65FA24C5AA24C5A4C5AEE3F8004FFC8FCED07FC91
B512E05E9138000FF0ED03F8ED00FE82707E707EA2161F83A583A6F00180A217F8160F18
03486D01071400B66D6C5A04011306933800FE0ECAEA3FFCEF07F0393B7DB83D>82
D<D90FF813C090383FFE0190B512813903F807E33907E000F74848137F4848133F48C712
1F003E140F007E1407A2007C140312FC1501A36C1400A37E6D14006C7E7F13F86CB47E6C
13F8ECFF806C14E06C14F86C14FEC680013F1480010714C0EB007F020713E0EC007FED3F
F0151F150FED07F8A200C01403A21501A37EA216F07E15036C15E06C14076C15C06C140F
6DEB1F80D8FBF0EB3F00D8F0FE13FE39E03FFFF8010F13E0D8C00190C7FC253D7CBA2E>
I<003FB812E0A3D9C003EB001F273E0001FE130348EE01F00078160000701770A3006017
30A400E01738481718A4C71600B3B0913807FF80011FB612E0A335397DB83C>I<B69038
07FFFEA3000101809038007FE06C90C8EA1F80EF0F001706B3B2170E6D150C80171C133F
17186D6C14385F6D6C14F06D6C5C6D6C495A6D6CEB07806D6C49C7FC91387F807E91381F
FFF8020713E09138007F80373B7DB83E>I<B5D8FC07B5D8F001B5FCA30007902780001F
FEC7EA1FF86C48C7D80FF8EC07E000010307ED03C01B807F6C6F6C1500A26E5F017F6E6C
1406A280013F4A6C5CA280011F4A6D5BEE067FA26D6C010E6D5BEE0C3FA26D6C011C6D5B
EE181FA26D6C6F5BEE300FA26D6C6F485AEE6007A26D6C4CC7FC9338C003FCA203805D91
3B7F818001FE06A203C1150EDA3FC3C7EAFF0CA203E3151CDA1FE6EC7F98A215F6DA0FFC
EC3FF0A302075E4B141FA202035E4B140FA202015E4B1407A2020093C8FC4B80503B7EB8
55>87 D<B500FE91383FFFE0A3000301E0913807FE00C649EC03F0017F6F5A606D6C5D6D
6C140395C7FC6D6C1406A26D6C5C6D6C141C17186D6C143817306D6D5B6E6C13E05F9138
3FE0015F91381FF003DA0FF890C8FC1606913807FC0E160C913803FE1C913801FF185E6E
13B016E0157F6F5AB3A24B7E023FB512C0A33B397FB83E>89 D<39018001800003130339
07000700000E130E485B0018131800381338003013300070137000601360A200E013E048
5BA400CE13CE39FF80FF806D13C0A3007F137FA2393F803F80390E000E001A1974B92A>
92 D<13101338137C13FE487E3803C780380783C0380F01E0381E00F04813780070131C
48130E00401304170D77B92A>94 D<EB1FE0EBFFFC3803E03F3907000F80390F8007E048
6C6C7E13E06E7EA26E7E6C5A6C5AC8FCA4147FEB07FFEB3FE0EBFE00EA03F8EA0FF0EA1F
C0123F485A90C7FC160C12FEA31401A26C13036CEB077C903980063E18383FC01E3A0FE0
781FF03A03FFF00FE03A007F8007C026277DA52A>97 D<EA03F012FFA3120F1203B0EC1F
E0EC7FF89038F1E03E9039F3801F809039F7000FC001FEEB07E049EB03F049EB01F85BED
00FCA216FEA2167E167FAA167E16FEA216FC15016D14F8ED03F07F01EEEB07E001C6EB0F
C09039C7801F00903881E07E903800FFF8C7EA1FC0283B7EB92E>I<EB03FC90381FFF80
90387E03E03901F80070484813F83907E001FC380FC003A2EA1F80123F90380001F848EB
00F01500A2127E12FEAA127E127FA26C14067F001F140E6D130C000F141C6C6C13386C6C
13706C6C13E039007C07C090381FFF00EB07F81F277DA525>I<ED0FC0EC03FFA3EC003F
150FB0EB03F8EB1FFF90387E078F9038F801EF3903F0007F4848133F4848131FA2484813
0F123F90C7FC5AA2127E12FEAA127E127FA27EA26C6C131FA26C6C133F6C6C137F6C6CEB
EFF03A01F801CFFF39007C078F90381FFE0FD907F813C0283B7DB92E>I<EB07F8EB1FFF
90387C0FC03901F803E03903F001F0D807E013F8380FC0004848137CA248C7127E153E5A
153F127E12FEA3B7FCA248C8FCA5127EA2127FA26C14037F001F14076C6C13060007140E
6D131CD801F013386C6C137090387E03E090381FFF80903803FC0020277EA525>I<147E
903803FF8090380FC1E0EB1F8790383F0FF0137EA213FCA23901F803C091C7FCADB512FC
A3D801F8C7FCB3AB487E387FFFF8A31C3B7FBA19>I<ED03F090390FF00FF890393FFC3C
3C9039F81F707C3901F00FE03903E007C03A07C003E010000FECF000A248486C7EA86C6C
485AA200075C6C6C485A6D485A6D48C7FC38073FFC38060FF0000EC9FCA4120FA213C06C
B512C015F86C14FE6CECFF804815C03A0F80007FE048C7EA0FF0003E140348140116F848
1400A56C1401007C15F06CEC03E0003F1407D80F80EB0F80D807E0EB3F003901FC01FC39
007FFFF0010790C7FC26387EA52A>I<EA03F012FFA3120F1203B0EC0FF0EC3FFCECF03F
9039F1C01F809039F3800FC0EBF70013FE496D7EA25BA35BB3A3486C497EB500C1B51280
A3293A7EB92E>I<EA0380EA0FE0487EA56C5AEA0380C8FCAAEA03F012FFA312071203B3
AA487EB512C0A312387EB717>I<EB01C0EB07F0EB0FF8A5EB07F0EB01C090C7FCAAEB01
F813FFA313071301B3B3A2123C127E00FF13F01303A214E038FE07C0127C383C0F00EA0F
FEEA03F8154984B719>I<EA03F012FFA3120F1203B1913801FFFCA39138007FC0160015
7C15705D4A5A4A5A4AC7FC141E1438147814FC13F1EBF3FEEBF73F01FE7FEBF81F496C7E
8114076E7E6E7E811400157E157F811680ED1FC0486CEB3FF0B500C0B5FCA3283A7EB92C
>I<EA03F012FFA3120F1203B3B3AD487EB512C0A3123A7EB917>I<2703F00FF0EB1FE000
FFD93FFCEB7FF8913AF03F01E07E903BF1C01F83803F3D0FF3800FC7001F802603F70013
CE01FE14DC49D907F8EB0FC0A2495CA3495CB3A3486C496CEB1FE0B500C1B50083B5FCA3
40257EA445>I<3903F00FF000FFEB3FFCECF03F9039F1C01F803A0FF3800FC03803F700
13FE496D7EA25BA35BB3A3486C497EB500C1B51280A329257EA42E>I<EB03FE90380FFF
8090383E03E09038F800F84848137C48487F48487F4848EB0F80001F15C090C712074815
E0A2007EEC03F0A400FE15F8A9007E15F0A2007F14076C15E0A26C6CEB0FC0000F15806D
131F6C6CEB3F006C6C137EC66C13F890387E03F090381FFFC0D903FEC7FC25277EA52A>
I<3903F01FE000FFEB7FF89038F1E07E9039F3801F803A0FF7000FC0D803FEEB07E049EB
03F04914F849130116FC150016FEA3167FAA16FEA3ED01FCA26DEB03F816F06D13076DEB
0FE001F614C09039F7803F009038F1E07E9038F0FFF8EC1FC091C8FCAB487EB512C0A328
357EA42E>I<D903F813C090381FFE0190387E07819038FC01C33903F000E30007147748
48133749133F001F141F485A150F48C7FCA312FEAA127FA37E6D131F121F6D133F120F6C
6C137F6C6C13EF3901F801CF39007E078F90381FFE0FEB07F890C7FCABED1FE00203B5FC
A328357DA42C>I<3807E01F00FFEB7FC09038E1E3E09038E387F0380FE707EA03E613EE
9038EC03E09038FC0080491300A45BB3A2487EB512F0A31C257EA421>I<EBFF03000313
E7380F80FF381E003F487F487F00707F12F0A2807EA27EB490C7FCEA7FE013FF6C13E06C
13F86C7F00037FC67F01071380EB007F141F00C0EB0FC01407A26C1303A37E15806C1307
7EEC0F00B4131E38F3C07C38E1FFF038C03F801A277DA521>I<1318A51338A31378A313
F8120112031207001FB5FCB6FCA2D801F8C7FCB215C0A93800FC011580EB7C03017E1300
6D5AEB0FFEEB01F81A347FB220>I<D803F0EB07E000FFEB01FFA3000FEB001F00031407
B3A4150FA3151F12016D133F0000EC77F86D9038E7FF8090383F03C790381FFF87903A03
FC07E00029267EA42E>I<B538803FFEA33A0FF8000FF06C48EB07E00003EC03C06D1480
00011500A26C6C1306A26D130E017E130CA26D5BA2EC8038011F1330A26D6C5AA214E001
075BA2903803F180A3D901FBC7FCA214FF6D5AA2147CA31438A227257EA32C>I<B53A1F
FFE03FFEA3260FF8009038000FF86C48017EEB03E018C00003023EEB0180A26C6C013FEB
0300A36C6CEC8006156FA2017E9038EFC00C15C7A2D93F016D5A15830281EBF038D91F83
1430150102C3EBF87090260FC6001360A2D907E66D5A02EC137CA2D903FCEB7F804A133F
A2010192C7FC4A7FA20100141E4A130E0260130C37257EA33C>I<B538807FFFA33A03FE
003FF00001EC1F80000092C7FC017E131C6D13186D6C5AECC070010F5B6D6C5AECF180EB
03FB6DB4C8FC6D5AA2147F804A7E8114CF903801C7E090380383F090380703F8EB060149
6C7E011C137E49137F01787F496D7E486C80000FEC3FF0D8FFFE90B51280A329247FA32C
>I<B538803FFEA33A0FF8000FF06C48EB07C00003EC03806C7E16007F00001406A2017E
5BA2137F6D5BA26D6C5AA2ECC070010F1360A26D6C5AA214F101035BA2D901FBC7FCA214
FF6D5AA2147CA31438A21430A214701460A25CA2EA7C0100FE5B130391C8FC1306EAFC0E
EA701C6C5AEA1FF0EA0FC027357EA32C>I<003FB512FCA2EB8003D83E0013F8003CEB07
F00038EB0FE012300070EB1FC0EC3F800060137F150014FE495AA2C6485A495AA2495A49
5A495AA290387F000613FEA2485A485A0007140E5B4848130C4848131CA24848133C48C7
127C48EB03FC90B5FCA21F247EA325>I<BD12C0A25202809653>124
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fr cmsy8 8 3
/Fr 3 122 df<130C131EA50060EB01800078130739FC0C0FC0007FEB3F80393F8C7F00
3807CCF83801FFE038007F80011EC7FCEB7F803801FFE03807CCF8383F8C7F397F0C3F80
00FCEB0FC039781E078000601301000090C7FCA5130C1A1D7C9E23>3
D<ED7FF80207B57E021F14E091397FC00FF8D901FCC712FED903F0143FD90FC0EC0FC049
C8EA03E0013E6F7E0178ED0078498248488248488249820007188048CAEA03C0000E1701
001E18E0001C1700003C18F0003818700078187800701838A300F0183C48181CA96C183C
00701838A30078187800381870003C18F0001C18E0001E1701000E18C0000F17036C6CEE
0780000318006D5E6C6C161E6C6C5E01785E013E4B5A6D4B5AD90FC0EC0FC0D903F0023F
C7FCD901FC14FE903A007FC00FF8021FB512E0020714809126007FF8C8FC3E3D7CAE47>
13 D<1338137CA81338A7007C137CB512FEA3387C387C00001300A5137CB3A41338AD17
3D7CAE20>121 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fs cmr8 8 44
/Fs 44 124 df<13031307130E131C1338137013F0EA01E013C01203EA0780A2EA0F00A2
121EA35AA45AA512F8A25AAB7EA21278A57EA47EA37EA2EA0780A2EA03C0120113E0EA00
F013701338131C130E1307130310437AB11B>40 D<12C07E12707E7E7E120FEA07801203
13C0EA01E0A2EA00F0A21378A3133CA4131EA5131FA2130FAB131FA2131EA5133CA41378
A313F0A2EA01E0A2EA03C013801207EA0F00120E5A5A5A5A5A10437CB11B>I<123C127E
B4FCA21380A2127F123D1201A312031300A25A1206120E5A5A5A126009157A8714>44
D<123C127E12FFA4127E123C08087A8714>46 D<15C0140114031580A214071500A25C14
0EA2141E141CA2143C143814781470A214F05CA213015CA213035C130791C7FCA25B130E
A2131E131CA2133C1338A21378137013F05BA212015BA212035BA2120790C8FC5A120EA2
121E121CA2123C1238A212781270A212F05AA21A437CB123>I<EB3FC0EBFFF03803E07C
48487E48487E497E001EEB0780A2003E14C0A248EB03E0A500FC14F0B0007C14E0A3007E
1307003E14C0A36CEB0F806C14006D5A3807C03E3803F0FC3800FFF0EB3FC01C2D7DAB23
>I<130C133C137CEA03FC12FFEAFC7C1200B3B113FE387FFFFEA2172C7AAB23>I<EB7F80
3801FFF0380780FC380E003F48EB1F8048EB0FC05A0060EB07E012F000FC14F07E1403A3
007C1307C7FCA215E0140F15C0141F1580EC3F00147E147C5C495A495A495A495A011EC7
FC5B5B4913305B485A4848136048C7FC000E14E0001FB5FC5A4814C0B6FCA21C2C7DAB23
>I<EB3FC03801FFF03807C0FC380E007E487FEC1F80003F14C0A2EB800F1300A2000C13
1FC7FC1580A2EC3F00143E5C5CEB03F0EBFFC014F0EB00FC143FEC1F8015C0140F15E0A2
EC07F0A21238127C12FEA3EC0FE012F8006014C00070131F6C1480001EEB3F00380780FC
3801FFF038007FC01C2D7DAB23>I<140EA2141E143EA2147E14FEA2EB01BE1303143E13
06130E130C131813381330136013E013C0EA0180120313001206120E120C5A123812305A
12E0B612FCA2C7EA3E00A9147F90381FFFFCA21E2D7EAC23>I<000CEB0180380FC01F90
B512005C5C14F014C0D80C7EC7FC90C8FCA8EB1FC0EB7FF8380DE07C380F801F01001380
000E130F000CEB07C0C713E0A2140315F0A4127812FCA448EB07E012E0006014C0007013
0F6C14806CEB1F006C133E380780F83801FFE038007F801C2D7DAB23>I<EB03F8EB0FFE
90383E0780EBF8013901F007C03803E00FEA07C0EA0F80A2391F00078091C7FC123EA212
7EA2127CEB0FC038FC3FF0EBF07C38FDC01EB4487E01001380EC07C04814E0A214034814
F0A4127CA3127EA2003E14E01407121E001F14C06CEB0F803907801F003803C03E6C6C5A
38007FF0EB1FC01C2D7DAB23>I<1230123C003FB512F8A215F05A15E039700001C00060
1480140348EB0700140E140CC7121C5C143014705C495AA2495AA249C7FCA25B130E131E
A2133EA3133C137CA413FCA913781D2E7CAC23>I<EB1FC0EBFFF03803E07C3807801E48
487E001EEB0780A248EB03C0A4123E1407003F1480381FC00F01E01300EBF81E6C6C5A38
07FFF86C13E0C6FCEB3FF8EBFFFC3803C7FFD807831380D81F0013C0001E133F48EB1FE0
007C13070078EB03F012F84813011400A46C14E000781301007C14C0003C13036CEB0780
390F800F003807E03C3801FFF038003FC01C2D7DAB23>I<EB3F80EBFFF03803E0783807
C03E48487E48487E003E14801407007E14C0127C00FC14E01403A315F0A5007C1307127E
A2003E130F7E6C131F3807803B3803E0F33800FFC390383F03E013001407A215C0A2140F
001E1480003F14005C143E143C003E5B001C5B380E03E03807FF80D801FEC7FC1C2D7DAB
23>I<123C127E12FFA4127E123C1200AD123C127E12FFA4127E123C081D7A9C14>I<DA1F
F013C09138FFFE01903903F00F8390390F8001E3013FC71277017C143F4848141F484814
0F48481407A248481403121F491401123F90C8FC481500A300FE1600AB127F17C0A27E7F
001F15016D1580120F6C6C1403EE07006C6C14066C6C140ED8007C5C013F147890390F80
01E0903903F00FC0902600FFFEC7FCEC1FF02A2F7CAD33>67 D<B612F815FF3A03F8001F
E00001EC03F0ED00F8167E82EE1F80160F17C0EE07E0A2EE03F0A217F81601A317FCAA17
F8A3EE03F0A217E0160717C0160FEE1F80EE3F00167E5EED03F00003EC1FE0B7128003F8
C7FC2E2D7DAC36>I<B512F0A23803FC006C5AB3B3A3487EB512F0A2142D7EAC19>73
D<B500F0EB7FFEA2D803FCC7EA1FF06C48EC0FC01700161E16385E5E4B5A4B5A4BC7FC15
0E5D5D15F0EC01C04A5A4A7E4A7E141F4A7EEC73F8ECE1FCEBF9C09038FF80FE9038FE00
7F497F49806F7E6F7E1507826F7E6F7EA26F7E167F821780EE1FC017E0486CEC3FF0B5D8
F001B5FCA2302D7DAC37>75 D<B512F8A2D803FCC8FC6C5AB3A7160CA41618A41638A216
7816F81501ED07F00003141FB7FCA2262D7EAC2C>I<EC3FF0903801FFFE903907E01F80
90391F8007E090393E0001F001FCEB00FC4848147E4848804848EC1F8049140F000F16C0
4848EC07E0A248C8EA03F0A24816F8A2007E1501A200FE16FCAA007FED03F8A36C16F06D
1407001F16E0A26C6CEC0FC06D141F000716806C6CEC3F006C6C147E6C6C5C017E495A90
391F8007E0903907E01F80902601FFFEC7FC9038003FF02E2F7CAD37>79
D<B612FCEDFF803A03F8000FE00001EC03F0ED00F882167E167F821780A617005E167E5E
5EED03F0ED0FE090B6128003FCC7FC01F8C9FCB2487EB512F0A2292D7EAC30>I<B612C0
15FC3903F8007F0001EC0FC06F7E6F7E6F7E82150082A55E15015E4B5A4B5A4B5A037FC7
FC90B512FC15F09038F800FC153E6F7E150F826F7EA582A5170316F815031707486C9038
01FC0EB539F000FE1CEE3FF8C9EA07E0302E7DAC34>82 D<90383F80303901FFF0703807
C07C390F000EF0001E13074813034813011400127000F01470A315307EA26C1400127E12
7FEA3FE013FE381FFFE06C13FC6C13FF00011480D8003F13E013039038003FF0EC07F814
01140015FC157C12C0153CA37EA215787E6C14706C14F06CEB01E039F78003C039E3F00F
0038E07FFE38C00FF01E2F7CAD27>I<B539F003FFFCA2D803FCC7EA3FC06C48EC0F0016
06B3AB160E0000150C7F161C017C1418017E14386D5C6D146090390F8001E0903907E003
80902601F80FC7FC9038007FFCEC0FF02E2E7DAC35>85 D<13FF000713C0380F01F0381C
00F8003F137C80A2143F001E7FC7FCA4EB07FF137F3801FE1FEA07F0EA1FC0EA3F80EA7F
00127E00FE14065AA3143F7E007E137F007FEBEF8C391F83C7FC390FFF03F83901FC01E0
1F207D9E23>97 D<EA07C012FFA2120F1207AC14FE9038C7FF809038CF03E09038DC01F0
9038F8007C49137E49133E497F1680A2150F16C0A9ED1F80A216005D6D133E6D5B01B05B
9038BC01F090380E07E0390607FF80260001FCC7FC222F7EAD27>I<EB1FE0EB7FFC3801
F01E3803E0073907C01F80EA0F80EA1F005A003EEB0F00007E90C7FCA2127C12FCA9127E
A215C07E6C130101801380380FC0033907E007003801F03E38007FF8EB1FC01A207E9E1F
>I<15F8141FA214011400ACEB0FE0EB7FF83801F81E3803E0073807C003380F8001EA1F
00481300123E127EA25AA9127C127EA2003E13017EEB8003000F13073903E00EFC3A01F0
3CFFC038007FF090391FC0F800222F7EAD27>I<EB1F80EBFFF03803E0783807C03E380F
801E381F001FEC0F80123E007E130715C0127C12FCA3B6FCA200FCC8FCA5127EA2003E14
C0123F6C1301390F80038001C013003803E00F3801F03C38007FF8EB1FC01A207E9E1F>
I<013F13F89038FFC3FE3903E1FF1E3807807C000F140C391F003E00A2003E7FA76C133E
A26C6C5A00071378380FE1F0380CFFC0D81C3FC7FC90C8FCA3121E121F380FFFF814FF6C
14C04814F0391E0007F848130048147C12F848143CA46C147C007C14F86CEB01F06CEB03
E03907E01F803901FFFE0038003FF01F2D7E9D23>103 D<EA07C012FFA2120F1207AC14
FE9038C3FF809038C703E09038DE01F013F8496C7EA25BA25BB2486C487E3AFFFE1FFFC0
A2222E7EAD27>I<EA0780EA0FC0EA1FE0A4EA0FC0EA0780C7FCA8EA07C012FFA2120F12
07B3A5EA0FE0EAFFFCA20E2E7EAD14>I<2607C07FEB07F03BFFC3FFC03FFC903AC783F0
783F3C0FCE01F8E01F803B07DC00F9C00F01F8D9FF8013C04990387F000749137EA24913
7CB2486C01FEEB0FE03CFFFE0FFFE0FFFEA2371E7E9D3C>109 D<3807C0FE39FFC3FF80
9038C703E0390FDE01F0EA07F8496C7EA25BA25BB2486C487E3AFFFE1FFFC0A2221E7E9D
27>I<EB1FE0EB7FF83801F03E3803C00F3907800780390F0003C04814E0003EEB01F0A2
48EB00F8A300FC14FCA9007C14F8A26CEB01F0A26CEB03E0A2390F8007C03907C00F8039
01F03E0038007FF8EB1FE01E207E9E23>I<3807C0FE39FFC7FF809038CF03E0390FDC01
F03907F800FC49137E49133E49133FED1F80A3ED0FC0A8151F1680A2ED3F00A26D137E6D
137C5D9038FC01F09038CE07E09038C7FF80D9C1FCC7FC01C0C8FCA9487EEAFFFEA2222B
7E9D27>I<380781F838FF87FEEB8E3FEA0F9CEA07B813B0EBF01EEBE000A45BB0487EB5
FCA2181E7E9D1C>114 D<3801FE183807FFB8381E01F8EA3C00481378481338A21418A2
7E7EB41300EA7FF06CB4FC6C13C06C13F0000113F838001FFC130138C0007E143EA26C13
1EA27EA26C133CA26C137838FF01F038E3FFC000C0130017207E9E1C>I<1360A413E0A3
12011203A21207121FB512F0A23803E000AF1418A714383801F03014703800F860EB3FE0
EB0F80152A7FA81B>I<3AFFFC01FFC0A23A0FE0007E000007147C15380003143015706C
6C1360A26C6C5BA390387C0180A26D48C7FCA2EB3F07EB1F06A2EB0F8CA214DCEB07D8A2
EB03F0A36D5AA26D5A221E7F9C25>118 D<3AFFFC01FFC0A23A0FE0007E000007147C15
38000314306D137000011460A26C6C5BA2EBFC01017C5BEB7E03013E90C7FCA2EB1F06A2
148EEB0F8CA2EB07D8A2EB03F0A36D5AA26D5AA2495AA2130391C8FC1278EAFC06A25B13
1CEA7838EA7070EA3FE0EA0F80222B7F9C25>121 D<B712C0A22202809223>123
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Ft cmbx8 8 2
/Ft 2 52 df<EB01E01303131F13FFB5FCA3133F1200B3AE007FB512F0A41C2C7AAB29>
49 D<EB0FFC90387FFF8048B512E03903F81FF03907C00FF848486C7E01E07FEA1FF013
F8A56C48485AEA07E0C7485A5D4A5AECFF80013F90C7FC14FCECFFC09038001FF0EC0FFC
6E7E6E7E16808016C0121FEA7FC0EAFFE0A416805CEA7FC049481300003F5C391FF01FFC
6CB55A6C14E0C61480D91FFCC7FC222D7DAB29>51 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fu cmti8 8 46
/Fu 46 122 df<1338137C13FC1201EA03F8EA07E0EA0FC0EA1F80EA3E005A5A12E01240
0E0D69AD24>19 D<EA0380EA0FE0121FA213F0A213E0EA0760120013E013C01201138012
03EA07001206120E5A5A12F012C00C157B8716>44 D<387FFFC0A2B5FCA26C130012057A
901A>I<121C127F12FFA412FE12380808788716>I<147F903803FFC090380783E090381F
00F0013C13F849137813F849137C1201485AA2485AA2000F14FC5B121FA215F8383F0001
A4007EEB03F0A448EB07E0A315C0140F5A1580141F1500A2143E143C5C007813F8495A6C
485A381F0F80D80FFEC7FCEA03F81E2D78AB24>48 D<14031407140F141E143E147E14FE
EB03FCEB1F7CEB7CFC1360EB00F8A21301A214F0A21303A214E0A21307A214C0A2130FA2
1480A2131FA21400A25BA2133EA2137EA2137CA213FCB512F8A2182C79AB24>I<EC7F80
903801FFE0903807C0F890381E007C49133C49133E49131EEA01E613C701C3133E120313
831387D801CE137E01FC137CD8007813F890C7FCEC01F0EC03E0EC0F80EC3F00EB0FFCA2
EB001E141FEC0F80A215C0A41218127C141F00FC1480A248133F00E01400147E6C5B3870
01F8387803F0383C0FC0D80FFFC7FCEA03F81F2D79AB24>51 D<1538157815F8A3140115
F0A3EC03E0A3EC07C0A2EC0F80A3EC1F00A2143E143C147C147814F85C495AA2495A9038
0783801487EB0F0F131E131CEB381F0170130013E012013803803F3807003E120EEA1FF8
387FFF7E39F007FC1839C000FFF8C7EA7FE0ECFC005CA313015CA313035CA26D5A1D397D
AB24>I<01181306011F137EECFFFC15F04913E0158090383BFC000138C7FC13781370A3
13F05BA33801E3F8EBCFFEEBFC0F01F013803903E007C013C01380C7EA03E01407A5140F
003C14C0127EA2141F00FE148012F800E0EB3F00147E0070137C5C387801F0383803E038
1E0F80D80FFEC7FCEA03F81F2D79AB24>I<3A01C3E001C09038CFF0033A03FFF80780ED
0F00485C9038F8383E390FE01C7C9038C00FFC48486C5A001EC7FC003E5C003C495A5A00
70495A00F01307485CC7120F4AC7FCA2143EA25CA214FC5C13015C1303A2495AA2130F5C
A2131F5CA2133FA291C8FC5BA2137EA21338222D77AB24>55 D<EC3F80903801FFE09038
07C0F090380F0078011E133C49133E49131E5BA2153E0001143CA2157C6D13786D13F090
38FE01E09038FF03C06CEBCF8090387FFE00EB3FF8131F6D7EEB3FFEEBFBFFD801E01380
3903C07FC03807803F380F001F001E130F003E1307123C127C00781303140700F814805A
EC0F00A20078131E5C007C5B003C5B381F03C03807FF80D801FCC7FC1F2D79AB24>I<14
3FECFFC0903803E1E090380F80F090381F0078133E017E137C5B5B1201A2485AA215FC12
075BA2140115F8EBC003A2140715F00003130FEBE01F0001133F3900F077E0EB7FE7EB1F
879038000FC0A2EC1F80A21500143E0038137E007E137C00FE5B495A48485A48485A3870
0F80D8781EC7FCEA3FF8EA0FE01E2D79AB24>I<13F0EA01F812031207A3EA03F0EA01C0
C7FCAD121C127F5AA45A12380D1D789C16>I<16E01501821503A21507150FA2151FA215
3B157B157315E382EC01C114031581EC0701A2140EA2141C143C143802707F15005C1301
5C49B5FCA249C7FCA2130E131E131C4980167E5B13F0485AA21203D80FF014FFD8FFFC01
1F13F0A22C2F7CAE35>65 D<011FB512FCEEFF80903A00FE000FC0EE03E04AEB01F017F8
0101140017FC5CA2130317F84A1301A20107EC03F017E04AEB07C0EE0F80010FEC3F0016
FE9138C007F891B512E04914F89138C0007C4A7F82013F1580A291C7120FA25BA2017E14
1FA213FEEE3F005B167E00015D4B5A49495A4B5A0003EC3F80B600FEC7FC15F82E2D7BAC
32>I<DA01FE133091390FFFC07091393F01E0F09138F80079D903E0133D4948EB1FE0D9
1F80130F49C7FC017E14074915C0485A485A5B00071680485AA2485A170048CAFCA25A12
7EA312FE5AA5163848157816707E16F0007C5D15014B5A6C5D4BC7FC6C140E6C6C133C6C
6C5B6C6C485A3900F80FC0D97FFFC8FCEB0FF82C2F75AD33>I<011FB612F8A2903900FE
000716014A13001778130117705CA21303A25C16E001071301170002E05B1503130F1507
4A485A91B5FC5BECC01F4A6CC7FCA2133FA2EC000EA25B92C8FC137EA213FEA25BA21201
A25BA21203B512F0A22D2D7CAC2E>70 D<90381FFFF8A2903800FE00A25CA21301A25CA2
1303A25CA21307A25CA2130FA25CA2131FA25CA2133FA291C7FCA25BA2137EA213FEA25B
A21201A25BA21203B512C0A21D2D7CAC1B>73 D<91387FFFE0A2913800FE00A25DA21401
5DA314035DA314075DA3140F5DA3141F5DA3143F92C7FCA35CA2147EA2003C13FE127E00
FE5BA2495AEAFC0300F05B48485A38700FC0D8781FC8FCEA1FFCEA07F0232E7AAC25>I<
90381FFFFEA2D900FEC7FCA25CA21301A25CA21303A25CA21307A25CA2130FA25CA2131F
A25CA2133FA291C7121CA249143C1638017E1478167001FE14F0A249EB01E0A200011403
ED07C049130FED3F80000314FFB7FC1600262D7BAC2D>76 D<D91FFE903803FFF8A2D900
FF9038003F80EF1E00A26F131C49153C6F133814CFA201036D137802C714701487EC83F0
010715F06F5B1401A2010FEBFC0102005C130E157E011E1403037F5B011C133FA2013C14
87031F90C7FC1338ED0FC7017814CF16EE01701307A201F014FE6F5A5B150112015E4913
00487E120FD8FFFE1470A2352D7BAC35>78 D<4AB4FC020F13C091383E03F09138F8007C
D903E07FD907807F011FC77E013E15804914074915C0485AEE03E0485A485AA2485A121F
90C8FC5AA2003E1507127EA348ED0FC0A3EE1F80A217005E163E167E167C16FC4B5A007C
5D4B5A6C4A5A4B5A6C4AC7FC6C6C133E6D13F83903E003F03901F80FC026007FFFC8FCEB
0FF02B2F75AD37>I<011FB512FCEEFF80903A00FE000FE0EE03F04AEB00F8A20101157C
A25C177E130317FC5CA20107EC01F8A24AEB03F017E0010FEC07C0EE0F804AEB3F00ED01
FC91B512F04991C7FC0280C8FCA3133F91C9FCA35B137EA313FE5BA312015BA21203B512
C0A22F2D7CAC30>I<011FB512E016FC903900FE003FEE0FC04AEB07E016030101EC01F0
A24A14F8A21303EE03F05CA20107EC07E017C04AEB0F80EE1F00010F143E16FC9138C007
F091B512805B9138C00FE091388003F06F7E133F6F7E91C7FCA2491301A2017E5CA201FE
1303A2495C17080001163C17384914E0EEF07800031670B5D8C00113E09238007FC0C9EA
1F002E2E7BAC34>82 D<91380FF00C91383FFC1C9138F80F3C903903C007BC9039078003
FC90390F0001F8131E491300A24914F0A313F816E0A216007F7F6D7EEB7FF8ECFF806D13
E06D13F801077F01017FEB001FEC01FF6E7E8181A281121CA35D003C141EA25DA2007E5C
5D007F495A6D485A26F1F01FC7FC38E07FFC38C00FF0262F7BAD28>I<3B3FFFF007FFF0
A2D801FCC7EA7F00163C5B16380003157816705BA2000715F05E5BA2000F14015E5BA200
1F14035E5BA2003F140793C7FC90C7FCA2485C150E127EA2151E00FE141C5A153C153815
781570007C5C1401007E495A003E495A6C49C8FC6C133C3807C0F83801FFE06C6CC9FC2C
2E72AC35>85 D<EB07C0EB1FF090387C39C0EBF81FEA01F03803E00FEA07C0120FD81F80
1380A2EA3F00141F481400127EA25C00FE133E5AA2EC7E18EC7C385AA214FCD878011378
397C03F870A2393C0F78E0381E1E3D390FF81FC03903E00F001D1F799D24>97
D<13F8121FA21201A25BA21203A25BA21207A25BA2120FEBC7C0EB9FF0EBF878381FF03C
EBE03EEBC01EEB801FEA3F00A2123EA2007E133FA2127CA2147F00FC137E5AA214FCA214
F8130114F0EB03E0EA780714C0383C0F80381E3E00EA0FF8EA03E0182F78AD21>I<EB01
F8EB0FFE90383E0780EBFC03D801F013C03803E0070007130FEA0FC001801380121F48C8
FCA25A127EA312FE5AA5EC0180007CEB03C0EC0780EC0F006C131E001E137C380F83F038
07FFC0C648C7FC1A1F799D21>I<153EEC07FEA2EC007EA2157CA215FCA215F8A21401A2
15F0A21403EB07C390381FF3E0EB7C3BEBF81FEA01F03903E00FC0EA07C0120FEA1F8015
80EA3F00141F5A007E1400A25C12FE48133EA2EC7E18153848137CA214FCD87801137839
7C03F870A2393C0F78E0381E1E3D390FF81FC03903E00F001F2F79AD24>I<EB03F8EB0F
FEEB3E0FEBF8073901F00380EA03E0EA07C0000F1307D81F8013005C383F001E5C387F03
F8EBFFE049C7FC007EC8FC12FE5AA4127CEC0180EC03C0EC07806CEB0F00141E6C137C38
0F83F03803FFC0C648C7FC1A1F799D21>I<EC01F0EC07FCEC0F9EEC1F1EEC1E3EEC3E7E
A3EC7C381500A314FC5CA590387FFFF0A2903801F000A313035CA413075CA4130F5CA413
1F91C7FCA45B133EA4137E137CA3EA38F812FCA25B12FDEAF1E0EAF3C0EA7F80001EC8FC
1F3D81AE16>I<131FEA03FFA2EA003FA2133EA2137EA2137CA213FCA25BA21201147E90
38F3FF809038F787C03903FE03E013FC13F8A2EA07F013E0A213C0000F130715C01380A2
001F130F15801300141F481406150E003E133F143E007E141EEC7E1C007C137CEC3C3812
FC157048EB1FE00070EB07801F2F7BAD24>104 D<130E131FEB3F80A2EB1F00130E90C7
FCA9EA03E0EA0FF0EA1E78EA1C7C12381278127013FCEAF0F812E012E1EAC1F012011203
5B12075BA2120F13831387121F13075BEA3F0E123EEA1E1C133C1338EA0FF0EA03C0112E
7AAC16>I<137CEA0FFCA21200A213F8A21201A213F0A21203A213E0A21207A213C0A212
0FA21380A2121FA21300A25AA2123EA2127EA2127CA2EAFC30137012F8A213F013E012F0
12F113C012FBEA7F80EA1E000E2F7AAD12>108 D<3B07801FC007F03B1FE07FF01FFC3B
3DF1E0F8783E3B38F3C078F01E3B78FF007DC01FD870FEEB7F80A2D8F1FC1400D8E1F813
7EA249137C00C302FC5B0003163E495BA200070101147E177C01C05B17FC000F0103ECF8
3018700180EBE00117F0001F010715F0040313E0010001C013E0EFE1C048010F1301EFE3
80003E91398000FF00001C6DC7123C341F7A9D3A>I<3907801FC0391FE07FF0393DF1E0
F83938F3C0783978FF007CEA70FEA2EAF1FCEAE1F8A25B00C314FC00035C5BA200071301
5D13C01403000FECE0C015E1EB800715C1001F14C3020F13800100138391380787005A15
8E003EEB03FC001CEB00F0221F7A9D28>I<EB03F8EB0FFE90383E0F809038FC07C03801
F003D803E013E01207390FC001F01380121FEA3F0014035A127EA2140700FE14E05AA2EC
0FC0A2EC1F80A2007CEB3F00143E5C6C5B381E01F0380F07C06CB4C7FCEA01FC1C1F799D
24>I<903807C06090381FF0E0EB7C39EBF81FEA01F03903E00FC0EA07C0120FEA1F8015
80EA3F00A248131F007E1400A300FE5B48133EA3147E48137CA214FCEA7801387C03F8A2
EA3C0FEA1E1F380FF9F0EA03E1EA000113035CA313075CA2130FA23801FFFCA21B2B799D
21>113 D<3807803E391FE0FF80393CF3C1C03938F781E03878FF07EA70FE13FC12F139
E1F8038091C7FC5B12C312035BA21207A25BA2120FA25BA2121FA290C8FCA25AA2123E12
1C1B1F7A9D1E>I<EB0FC0EB7FF0EBF03C3801E01C3803C01EEA0780143EA2000F133C14
18EBC00013F813FF6C13C06C13E06C13F0EA007F130713031301EA780012FCA2130100F8
13E012E0EB03C038F0078038781F00EA1FFCEA07F0171F7A9D1D>I<131C133EA2137EA2
137CA213FCA25BA21201A2B512E0A23803F000A25BA21207A25BA2120FA25BA2121FA290
C7FCA24813C01301123E130314801307003C1300130E131E6C5AEA0FF0EA07C0132B7AA9
18>I<EA03C0D80FF01338D81E78137CD81C7C13FC003814F812781270EBFC01D8F0F813
F012E012E138C1F003000114E0120313E01407000714C013C0A2EC0FC3000F14871380A2
141F158F0007EB3F0E147F01C0131C3903E1E7BC3901FF83F839007E01E0201F7A9D26>
I<3903C001C0390FF003E0391E7807F0EA1C7C1238007813030070130113FCD8F0F813E0
12E000E1130038C1F001000114C0120313E014030007148013C0A2EC0700120F1380140E
A25C12076D5A00035B6D5AC6B45A013FC7FC1C1F7A9D21>I<90383E01F09038FF87F839
03C7DE1E380783DC903803F87EEA0E01001E13F0EA1C03003C14380038EBE000A2EA3007
00005BA3130F5CA3011F1318153814001238D87C3F137012FC15E0EB7F0139F0FF03C039
70E78780393FC3FE00381F00F81F1F7C9D21>120 D<EA03C0D80FF01338D81E78137CD8
1C7C13FC003814F812781270EBFC01D8F0F813F012E012E138C1F003000114E0120313E0
1407000714C013C0A2140F000F14801380A2141F150000075B5C13C03803E1FE3801FFBE
38007E3EEB007E147CA2003E5BA2387E01F0A2387C03E0387007C06C485AD83C3EC7FCEA
1FF8EA07E01E2C7A9D23>I E
%EndDVIPSBitmapFont
end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%PaperSize: A4

%%EndSetup
%%Page: 945 1
945 0 bop 374 435 a Fu(JFP)31 b Ft(13)23 b Fs(\(5\):)h(945{956,)h
(Septem)n(b)r(er)f(2003.)1664 433 y(c)1645 435 y Fr(\015)f
Fs(2003)h(Cam)n(bridge)f(Univ)n(ersit)n(y)h(Press)374
539 y(DOI:)f(10.1017/S0956796803004763)77 b(Prin)n(ted)24
b(in)f(the)i(United)f(Kingdom)3238 432 y Fq(945)1019
870 y Fp(F)c(U)g(N)g(C)g(T)g(I)g(O)g(N)g(A)g(L)72 b(P)20
b(E)g(A)g(R)g(L)468 1098 y Fo(Pr)-7 b(o)g(ducing)49 b(A)l(l)7
b(l)51 b(Ide)-7 b(als)49 b(of)h(a)g(F)-11 b(or)k(est,)49
b(F)-11 b(unctional)7 b(ly)1199 1339 y Fq(JEAN-CHRISTOPHE)26
b(FILLI)2265 1318 y(^)2255 1339 y(ATRE)p Fn(\003)1207
1447 y Fu(L)l(ab)l(or)l(atoir)l(e)i(de)e(R)l(e)l(cher)l(che)g(en)g
(Informatique,)1532 1530 y(Universit)n(\023)-35 b(e)26
b(Paris)g(Sud,)1441 1613 y(91405)i(Orsay)d(Ce)l(dex,)h(F)-5
b(r)l(anc)l(e)1421 1779 y Fq(FRANC)-48 b(\030)12 b(OIS)27
b(POTTIER)p Fn(y)1543 1887 y Fu(INRIA)f(R)l(o)l(c)l(quenc)l(ourt)1729
1970 y(B.P.)g(105)1354 2053 y(78153)h(L)l(e)f(Chesnay)g(Ce)l(dex,)f(F)
-5 b(r)l(anc)l(e)p 374 2247 2989 4 v 1685 2371 a Fm(Abstract)374
2517 y Fl(W)f(e)32 b(presen)n(t)g(functional)h(implemen)n(tations)f(of)
h(Ko)r(da)g(and)f(Rusk)n(ey's)g(algorithm)h(for)g(generating)374
2608 y(all)27 b(ideals)h(of)g(a)f(forest)h(p)r(oset)g(as)f(a)g(Gra)n(y)
g(co)r(de.)h(Using)f(a)g(con)n(tin)n(uation-based)g(approac)n(h,)g(w)n
(e)g(giv)n(e)374 2699 y(an)f(extremely)e(concise)j(form)n(ulation)f(of)
h(the)f(algorithm's)h(core.)g(Then,)f(in)g(a)g(n)n(um)n(b)r(er)e(of)i
(steps,)h(w)n(e)374 2791 y(deriv)n(e)f(a)i(\014rst-order)f(v)n(ersion)g
(whose)h(e\016ciency)f(is)h(comparable)f(to)g(that)g(of)h(a)f(C)h
(implemen)n(tation)374 2882 y(giv)n(en)d(b)n(y)g(Kn)n(uth.)p
374 3028 V 1557 3298 a Fm(1)48 b(In)m(tro)s(duction)374
3460 y Fq(It)40 b(is)g(sometimes)g(said)f(that)i(functional)f
(programming)e(languages)g(are)h(inheren)n(tly)h(less)374
3568 y(e\016cien)n(t)29 b(than)g(their)g(imp)r(erativ)n(e)g(coun)n
(terparts.)e(T)-7 b(o)r(da)n(y)g(,)28 b(suc)n(h)h(an)g(opinion)f(has)h
(b)r(ecome)g(a)374 3676 y(stereot)n(yp)r(e)e(without)i(substance.)f(Y)
-7 b(et,)29 b(w)n(e)f(still)g(confron)n(t)g(it)g(regularly)-7
b(,)27 b(and)h(m)n(ust)h(pro)n(vide)374 3784 y(con)n(vincing)e
(\\practical")f(evidence.)i(In)g(this)g(pap)r(er,)g(w)n(e)g(sho)n(w)f
(ho)n(w)g(a)h(complex)g(algorithm,)374 3892 y(heretofore)18
b(presen)n(ted)i(only)g(in)g(an)g(imp)r(erativ)n(e)g(form,)g(can)g(b)r
(e)g(expressed)f(in)i(a)f(programming)374 3999 y(language)26
b(equipp)r(ed)k(with)f(\014rst-class)e(functions.)i(W)-7
b(e)29 b(obtain)f(co)r(de)g(that)h(is)f(more)g(concise,)374
4107 y(signi\014can)n(tly)h(easier)h(to)g(pro)n(v)n(e)f(correct,)h(y)n
(et)g(equally)g(e\016cien)n(t)h(as)f(the)h(original.)e(Then,)i(w)n(e)
374 4215 y(deriv)n(e)g(a)h(\014rst-order)f(v)n(ersion)g(of)h(our)g(co)r
(de,)g(whic)n(h)h(can)f(b)r(e)h(easily)e(implemen)n(ted)j(in)e(C,)h(if)
374 4323 y(desired.)457 4431 y(The)e(algorithm)g(w)n(e)g(are)g(in)n
(terested)h(in)g(is)f(due)h(to)g(Y.)g(Ko)r(da)f(and)h(F.)g(Rusk)n(ey)f
(\(Ko)r(da)g(&)374 4539 y(Rusk)n(ey)-7 b(,)35 b(1993\).)g(It)i(en)n
(umerates)e(the)i(ideals)f(of)g(certain)g(\014nite)h(partially)f
(ordered)f(sets|)374 4647 y(namely)-7 b(,)25 b(those)g(whose)g(Hasse)g
(diagram)f(is)h(a)g(forest|as)g(a)g(Gra)n(y)f(co)r(de.)i(In)f(general,)
g(a)g(Gra)n(y)374 4755 y(co)r(de)36 b(is)h(a)g(sequence)f(of)h(w)n
(ords)e(suc)n(h)i(that)g(t)n(w)n(o)f(consecutiv)n(e)g(w)n(ords)g
(di\013er)h(b)n(y)f(only)h(one)374 4863 y(letter.)26
b(A)g(widely)h(studied)f(particular)f(case)g(consists)h(in)g(en)n
(umerating)f(all)h(binary)g(in)n(tegers,)374 4971 y(from)38
b(00)14 b Fn(\001)g(\001)g(\001)e Fq(0)39 b(to)f(11)14
b Fn(\001)g(\001)g(\001)f Fq(1,)38 b(as)g(a)g(Gra)n(y)f(co)r(de.)i(Gra)
n(y)e(co)r(des)h(\014nd)h(application)f(in)h(mathe-)374
5079 y(matics,)27 b(electrical)h(engineering,)f(optics,)g(sc)n
(heduling,)h(net)n(w)n(ork)f(reliabilit)n(y)-7 b(,)27
b(etc.)h(In)h(fact,)f(a)385 5308 y Fr(\003)c Fs(\()p
Fu(e-mail:)30 b Fk(Jean-Christophe.Filliatre)q(@lr)q(i.fr)q
Fs(\))389 5380 y Fr(y)23 b Fs(\()p Fu(e-mail:)30 b Fk
(Francois.Pottier@inria.fr)q Fs(\))p eop
%%Page: 946 2
946 1 bop 374 432 a Fq(946)840 b Fj(J.-C.)30 b(Fil)t(li^)-42
b(atr)l(e)31 b(and)g(F.)f(Pottier)465 631 y
 tx@Dict begin tx@NodeDict begin {3.8 18.02637 50.30618 25.15309 -7.11319
} false /N@c1 16 {InitRnode } NewNode end end
 465 631 a
465 631 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0
16 {InitRnode } NewNode end end
 465 631 a 497 631 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 497 631 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial 465 749 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0-0
16 {InitRnode } NewNode end end
 465 749 a 497 749
a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 497 749 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial 497
749 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.56905
0.56905 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 497 749 a 700 631 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0
16 {InitRnode } NewNode end end
 700 631 a 731 631 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 731 631
a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial 580 749 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0-0
16 {InitRnode } NewNode end end
 580
749 a 611 749 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 611 749 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial
611 749 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.56905
0.56905 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 611 749 a 820 749 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0-1
16 {InitRnode } NewNode end end
 820 749 a 852 749 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 852
749 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial 852 749
a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.56905
0.56905 0 0 /N@T-0 /N@T-0-1 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 852 749 a 1062 631 a
 tx@Dict begin tx@NodeDict begin {3.8 18.02637 50.30618 25.15309 -7.11319
} false /N@c2 16 {InitRnode } NewNode end end
 1062 631 a 1062 631 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0
16 {InitRnode } NewNode end end
 1062 631
a 1094 631 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 1094 631 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial
1062 749 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0-0
16 {InitRnode } NewNode end end
 1062 749 a 1094 749 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 1094 749 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial 1094 749 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.56905
0.56905 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1094 749 a 1297 631
a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0
16 {InitRnode } NewNode end end
 1297 631 a 1328 631 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 1328 631 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0. setgray fill grestore gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore end


@endspecial 1177 749 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0-0
16 {InitRnode } NewNode end end
 1177 749 a 1208 749 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 1208 749
a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial 1208 749 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.56905
0.56905 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1208
749 a 1417 749 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0-1
16 {InitRnode } NewNode end end
 1417 749 a 1448 749 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 1448 749 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial 1448 749 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.56905
0.56905 0 0 /N@T-0 /N@T-0-1 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1448 749 a 1659 631
a
 tx@Dict begin tx@NodeDict begin {3.8 18.02637 50.30618 25.15309 -7.11319
} false /N@c3 16 {InitRnode } NewNode end end
 1659 631 a 1659 631 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0
16 {InitRnode } NewNode end end
 1659 631 a 1691 631 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 1691 631
a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial 1659 749 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0-0
16 {InitRnode } NewNode end end
 1659
749 a 1691 749 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 1691 749 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end


@endspecial 1691 749 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.56905
0.56905 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1691 749 a 1894 631 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0
16 {InitRnode } NewNode end end
 1894 631
a 1925 631 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 1925 631 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0. setgray fill grestore gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore end
 
@endspecial
1773 749 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0-0
16 {InitRnode } NewNode end end
 1773 749 a 1805 749 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 1805 749 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial 1805 749 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.56905
0.56905 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1805 749 a 2014 749
a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0-1
16 {InitRnode } NewNode end end
 2014 749 a 2045 749 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 2045 749 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0. setgray fill grestore gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore end


@endspecial 2045 749 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.56905
0.56905 0 0 /N@T-0 /N@T-0-1 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 2045 749 a 2256 631 a
 tx@Dict begin tx@NodeDict begin {3.8 18.02637 50.30618 25.15309 -7.11319
} false /N@c4 16 {InitRnode } NewNode end end
 2256 631
a 2256 631 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0
16 {InitRnode } NewNode end end
 2256 631 a 2288 631 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 2288 631 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial 2256 749 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0-0
16 {InitRnode } NewNode end end
 2256 749 a 2288 749
a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 2288 749 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial 2288
749 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.56905
0.56905 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 2288 749 a 2490 631 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0
16 {InitRnode } NewNode end end
 2490 631 a 2522 631 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 2522
631 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0. setgray fill grestore gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore end
 
@endspecial 2370 749
a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0-0
16 {InitRnode } NewNode end end
 2370 749 a 2402 749 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 2402 749 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0. setgray fill grestore gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore end


@endspecial 2402 749 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.56905
0.56905 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 2402 749 a 2611 749 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0-1
16 {InitRnode } NewNode end end
 2611 749
a 2642 749 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 2642 749 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0. setgray fill grestore gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore end
 
@endspecial
2642 749 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.56905
0.56905 0 0 /N@T-0 /N@T-0-1 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 2642 749 a 2853 631 a
 tx@Dict begin tx@NodeDict begin {3.8 18.02637 50.30618 25.15309 -7.11319
} false /N@c5 16 {InitRnode } NewNode end end
 2853 631 a 2853 631
a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0
16 {InitRnode } NewNode end end
 2853 631 a 2884 631 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 2884 631 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end


@endspecial 2853 749 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0-0
16 {InitRnode } NewNode end end
 2853 749 a 2884 749 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 2884 749
a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial 2884 749 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.56905
0.56905 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 2884
749 a 3087 631 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0
16 {InitRnode } NewNode end end
 3087 631 a 3119 631 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 3119 631 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0. setgray fill grestore gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore end
 
@endspecial 2967 749 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0-0
16 {InitRnode } NewNode end end
 2967 749 a 2999 749
a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 2999 749 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0. setgray fill grestore gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore end
 
@endspecial 2999
749 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.56905
0.56905 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 2999 749 a 3207 749 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0-1
16 {InitRnode } NewNode end end
 3207 749 a 3239 749 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 3239
749 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial 3239 749
a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.56905
0.56905 0 0 /N@T-0 /N@T-0-1 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 3239 749 a 465 898 a
 tx@Dict begin tx@NodeDict begin {3.8 18.02637 50.30618 25.15309 -7.11319
} false /N@c10 16 {InitRnode } NewNode end end
 465 898 a 465 898 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0
16 {InitRnode } NewNode end end
 465 898 a
497 898 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 497 898 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0. setgray fill grestore gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore end
 
@endspecial
465 1016 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0-0
16 {InitRnode } NewNode end end
 465 1016 a 497 1016 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 497 1016 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial 497 1016 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.56905
0.56905 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 497 1016 a 700 898
a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0
16 {InitRnode } NewNode end end
 700 898 a 731 898 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 731 898 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end


@endspecial 580 1016 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0-0
16 {InitRnode } NewNode end end
 580 1016 a 611 1016 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 611 1016
a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial 611 1016 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.56905
0.56905 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 611
1016 a 820 1016 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0-1
16 {InitRnode } NewNode end end
 820 1016 a 852 1016 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 852 1016 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial 852 1016 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.56905
0.56905 0 0 /N@T-0 /N@T-0-1 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 852 1016 a 1062 898
a
 tx@Dict begin tx@NodeDict begin {3.8 18.02637 50.30618 25.15309 -7.11319
} false /N@c9 16 {InitRnode } NewNode end end
 1062 898 a 1062 898 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0
16 {InitRnode } NewNode end end
 1062 898 a 1094 898 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 1094 898
a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0. setgray fill grestore gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore end
 
@endspecial 1062 1016 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0-0
16 {InitRnode } NewNode end end

1062 1016 a 1094 1016 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 1094 1016 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end


@endspecial 1094 1016 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.56905
0.56905 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1094 1016 a 1297 898 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0
16 {InitRnode } NewNode end end
 1297
898 a 1328 898 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 1328 898 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0. setgray fill grestore gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore end


@endspecial 1177 1016 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0-0
16 {InitRnode } NewNode end end
 1177 1016 a 1208 1016 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 1208
1016 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial 1208 1016
a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.56905
0.56905 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1208 1016 a 1417 1016 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0-1
16 {InitRnode } NewNode end end
 1417 1016 a 1448 1016 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 1448
1016 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial 1448 1016
a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.56905
0.56905 0 0 /N@T-0 /N@T-0-1 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1448 1016 a 1659 898 a
 tx@Dict begin tx@NodeDict begin {3.8 18.02637 50.30618 25.15309 -7.11319
} false /N@c8 16 {InitRnode } NewNode end end
 1659 898 a 1659 898 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0
16 {InitRnode } NewNode end end
 1659 898
a 1691 898 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 1691 898 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0. setgray fill grestore gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore end
 
@endspecial
1659 1016 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0-0
16 {InitRnode } NewNode end end
 1659 1016 a 1691 1016 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 1691 1016 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial 1691 1016 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.56905
0.56905 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1691 1016 a 1894
898 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0
16 {InitRnode } NewNode end end
 1894 898 a 1925 898 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 1925 898 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0. setgray fill grestore gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore end
 
@endspecial 1773 1016 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0-0
16 {InitRnode } NewNode end end
 1773 1016 a 1805
1016 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 1805 1016 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial
1805 1016 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.56905
0.56905 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1805 1016 a 2014 1016 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0-1
16 {InitRnode } NewNode end end
 2014 1016 a 2045
1016 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 2045 1016 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0. setgray fill grestore gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore end
 
@endspecial
2045 1016 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.56905
0.56905 0 0 /N@T-0 /N@T-0-1 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 2045 1016 a 2256 898 a
 tx@Dict begin tx@NodeDict begin {3.8 18.02637 50.30618 25.15309 -7.11319
} false /N@c7 16 {InitRnode } NewNode end end
 2256 898 a 2256 898
a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0
16 {InitRnode } NewNode end end
 2256 898 a 2288 898 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 2288 898 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0. setgray fill grestore gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore end


@endspecial 2256 1016 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0-0
16 {InitRnode } NewNode end end
 2256 1016 a 2288 1016 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 2288
1016 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial 2288 1016
a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.56905
0.56905 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 2288 1016 a 2490 898 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0
16 {InitRnode } NewNode end end
 2490 898 a 2522 898 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 2522 898
a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0. setgray fill grestore gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore end
 
@endspecial 2370 1016 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0-0
16 {InitRnode } NewNode end end

2370 1016 a 2402 1016 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 2402 1016 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0. setgray fill grestore gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore end


@endspecial 2402 1016 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.56905
0.56905 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 2402 1016 a 2611 1016 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0-1
16 {InitRnode } NewNode end end
 2611
1016 a 2642 1016 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 2642 1016 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0. setgray fill grestore gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore end


@endspecial 2642 1016 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.56905
0.56905 0 0 /N@T-0 /N@T-0-1 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 2642 1016 a 2853 898 a
 tx@Dict begin tx@NodeDict begin {3.8 18.02637 50.30618 25.15309 -7.11319
} false /N@c6 16 {InitRnode } NewNode end end
 2853
898 a 2853 898 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0
16 {InitRnode } NewNode end end
 2853 898 a 2884 898 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 2884 898 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0. setgray fill grestore gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore end
 
@endspecial 2853 1016 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0-0
16 {InitRnode } NewNode end end
 2853 1016 a 2884
1016 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 2884 1016 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial
2884 1016 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.56905
0.56905 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 2884 1016 a 3087 898 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0
16 {InitRnode } NewNode end end
 3087 898 a 3119 898
a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 3119 898 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0. setgray fill grestore gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore end
 
@endspecial 2967
1016 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0-0
16 {InitRnode } NewNode end end
 2967 1016 a 2999 1016 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 2999 1016 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0. setgray fill grestore gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore end
 
@endspecial 2999 1016 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.56905
0.56905 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 2999 1016 a 3207
1016 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0-1
16 {InitRnode } NewNode end end
 3207 1016 a 3239 1016 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 3239 1016 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial 3239 1016 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.56905
0.56905 0 0 /N@T-0 /N@T-0-1 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 3239 1016 a 465
1164 a
 tx@Dict begin tx@NodeDict begin {3.8 18.02637 50.30618 25.15309 -7.11319
} false /N@c11 16 {InitRnode } NewNode end end
 465 1164 a 465 1164 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0
16 {InitRnode } NewNode end end
 465 1164 a 497 1164 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 497
1164 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0. setgray fill grestore gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore end
 
@endspecial 465 1282
a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0-0
16 {InitRnode } NewNode end end
 465 1282 a 497 1282 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 497 1282 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0. setgray fill grestore gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore end


@endspecial 497 1282 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.56905
0.56905 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 497 1282 a 700 1164 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0
16 {InitRnode } NewNode end end
 700 1164
a 731 1164 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 731 1164 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial
580 1282 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0-0
16 {InitRnode } NewNode end end
 580 1282 a 611 1282 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 611 1282 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial 611 1282 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.56905
0.56905 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 611 1282 a 820 1282
a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0-1
16 {InitRnode } NewNode end end
 820 1282 a 852 1282 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 852 1282 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end


@endspecial 852 1282 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.56905
0.56905 0 0 /N@T-0 /N@T-0-1 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 852 1282 a 1062 1164 a
 tx@Dict begin tx@NodeDict begin {3.8 18.02637 50.30618 25.15309 -7.11319
} false /N@c12 16 {InitRnode } NewNode end end
 1062 1164
a 1062 1164 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0
16 {InitRnode } NewNode end end
 1062 1164 a 1094 1164 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 1094 1164 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0. setgray fill grestore gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore end
 
@endspecial 1062 1282 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0-0
16 {InitRnode } NewNode end end
 1062 1282 a 1094
1282 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 1094 1282 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0. setgray fill grestore gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore end
 
@endspecial
1094 1282 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.56905
0.56905 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1094 1282 a 1297 1164 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0
16 {InitRnode } NewNode end end
 1297 1164 a 1328
1164 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 1328 1164 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0. setgray fill grestore gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore end
 
@endspecial
1177 1282 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0-0
16 {InitRnode } NewNode end end
 1177 1282 a 1208 1282 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 1208 1282 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial 1208 1282 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.56905
0.56905 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1208 1282 a 1417
1282 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0-1
16 {InitRnode } NewNode end end
 1417 1282 a 1448 1282 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 1448 1282 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial 1448 1282 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.56905
0.56905 0 0 /N@T-0 /N@T-0-1 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1448 1282 a 1659
1164 a
 tx@Dict begin tx@NodeDict begin {3.8 18.02637 50.30618 25.15309 -7.11319
} false /N@c13 16 {InitRnode } NewNode end end
 1659 1164 a 1659 1164 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0
16 {InitRnode } NewNode end end
 1659 1164 a 1691 1164
a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 1691 1164 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0. setgray fill grestore gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore end
 
@endspecial
1659 1282 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0-0
16 {InitRnode } NewNode end end
 1659 1282 a 1691 1282 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 1691 1282 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0. setgray fill grestore gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore end
 
@endspecial 1691 1282 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.56905
0.56905 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1691 1282 a 1894
1164 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0
16 {InitRnode } NewNode end end
 1894 1164 a 1925 1164 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 1925 1164 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0. setgray fill grestore gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore end
 
@endspecial 1773 1282 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0-0
16 {InitRnode } NewNode end end
 1773 1282 a 1805
1282 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 1805 1282 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial
1805 1282 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.56905
0.56905 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1805 1282 a 2014 1282 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0-1
16 {InitRnode } NewNode end end
 2014 1282 a 2045
1282 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 2045 1282 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0. setgray fill grestore gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore end
 
@endspecial
2045 1282 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.56905
0.56905 0 0 /N@T-0 /N@T-0-1 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 2045 1282 a 2256 1164 a
 tx@Dict begin tx@NodeDict begin {3.8 18.02637 50.30618 25.15309 -7.11319
} false /N@c14 16 {InitRnode } NewNode end end
 2256 1164 a 2256
1164 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0
16 {InitRnode } NewNode end end
 2256 1164 a 2288 1164 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 2288 1164 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0. setgray fill grestore gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore end
 
@endspecial 2256 1282 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0-0
16 {InitRnode } NewNode end end
 2256 1282 a 2288
1282 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 2288 1282 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0. setgray fill grestore gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore end
 
@endspecial
2288 1282 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.56905
0.56905 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 2288 1282 a 2490 1164 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0
16 {InitRnode } NewNode end end
 2490 1164 a 2522
1164 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 2522 1164 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0. setgray fill grestore gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore end
 
@endspecial
2370 1282 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0-0
16 {InitRnode } NewNode end end
 2370 1282 a 2402 1282 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 2402 1282 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0. setgray fill grestore gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore end
 
@endspecial 2402 1282 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.56905
0.56905 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 2402 1282 a 2611
1282 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0-1
16 {InitRnode } NewNode end end
 2611 1282 a 2642 1282 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 2642 1282 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0. setgray fill grestore gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore end
 
@endspecial 2642 1282 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.56905
0.56905 0 0 /N@T-0 /N@T-0-1 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 2642 1282 a 2853
1164 a
 tx@Dict begin tx@NodeDict begin {3.8 18.02637 50.30618 25.15309 -7.11319
} false /N@c15 16 {InitRnode } NewNode end end
 2853 1164 a 2853 1164 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0
16 {InitRnode } NewNode end end
 2853 1164 a 2884 1164
a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 2884 1164 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0. setgray fill grestore gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore end
 
@endspecial
2853 1282 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0-0
16 {InitRnode } NewNode end end
 2853 1282 a 2884 1282 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 2884 1282 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0. setgray fill grestore gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore end
 
@endspecial 2884 1282 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.56905
0.56905 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 2884 1282 a 3087
1164 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0
16 {InitRnode } NewNode end end
 3087 1164 a 3119 1164 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 3119 1164 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0. setgray fill grestore gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore end
 
@endspecial 2967 1282 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0-0
16 {InitRnode } NewNode end end
 2967 1282 a 2999
1282 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 2999 1282 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0. setgray fill grestore gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore end
 
@endspecial
2999 1282 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.56905
0.56905 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 2999 1282 a 3207 1282 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0-1
16 {InitRnode } NewNode end end
 3207 1282 a 3239
1282 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 3239 1282 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial
3239 1282 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.56905
0.56905 0 0 /N@T-0 /N@T-0-1 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 3239 1282 a 1868 1322 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 5.69054
5.69054 0 0 /N@c1 /N@c2 InitNC { NCLine  } if end gsave 0.8 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 1868 1322 a 1868
1322 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 5.69054
5.69054 0 0 /N@c2 /N@c3 InitNC { NCLine  } if end gsave 0.8 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 1868 1322 a 1868 1322 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 5.69054
5.69054 0 0 /N@c3 /N@c4 InitNC { NCLine  } if end gsave 0.8 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 1868 1322 a 1868 1322
a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 5.69054
5.69054 0 0 /N@c4 /N@c5 InitNC { NCLine  } if end gsave 0.8 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 1868 1322 a 1868 1322 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 5.69054
5.69054 0 0 /N@c5 /N@c6 InitNC { tx@Dict begin /Lineto /lineto load
def false pop end /AngleA 0. def /AngleB 0. def /ArmA 10.0 def /ArmB
10.0 def /ArmTypeA 0 def /ArmTypeB 0 def /AngleB 0. def NCBar  } if
end gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore  grestore
end
 1868 1322 a 1868 1322 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 5.69054
5.69054 0 0 /N@c6 /N@c7 InitNC { NCLine  } if end gsave 0.8 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 1868
1322 a 1868 1322 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 5.69054
5.69054 0 0 /N@c7 /N@c8 InitNC { NCLine  } if end gsave 0.8 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 1868 1322 a 1868 1322 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 5.69054
5.69054 0 0 /N@c8 /N@c9 InitNC { NCLine  } if end gsave 0.8 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 1868 1322
a 1868 1322 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 5.69054
5.69054 0 0 /N@c9 /N@c10 InitNC { NCLine  } if end gsave 0.8 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 1868 1322 a 1868 1322 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 5.69054
5.69054 0 0 /N@c10 /N@c11 InitNC { tx@Dict begin /Lineto /lineto load
def false pop end /AngleA -180. def /AngleB 0. def /ArmA 10.0 def /ArmB
10.0 def /ArmTypeA 0 def /ArmTypeB 0 def /AngleB -180. def NCBar  }
if end gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore  grestore
end
 1868 1322 a 1868
1322 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 5.69054
5.69054 0 0 /N@c11 /N@c12 InitNC { NCLine  } if end gsave 0.8 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 1868 1322 a 1868 1322 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 5.69054
5.69054 0 0 /N@c12 /N@c13 InitNC { NCLine  } if end gsave 0.8 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 1868 1322 a 1868 1322
a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 5.69054
5.69054 0 0 /N@c13 /N@c14 InitNC { NCLine  } if end gsave 0.8 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 1868 1322 a 1868 1322 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 5.69054
5.69054 0 0 /N@c14 /N@c15 InitNC { NCLine  } if end gsave 0.8 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 1868 1322 a 814 1467 a Fl(Fig.)d(1.)39
b(Ko)r(da)26 b(and)g(Rusk)n(ey's)e(algorithm)i(applied)g(to)g(the)f
(forest)i(\(1\).)374 1792 y Fq(whole)e(section)g(is)h(dev)n(oted)f(to)h
(them)g(in)g(the)g(fourth)g(v)n(olume)f(of)h(Kn)n(uth's)g
Fj(A)n(rt)h(of)i(Computer)374 1900 y(Pr)l(o)l(gr)l(amming)p
Fq(.)e(A)f(preliminary)g(v)n(ersion)e(of)j(this)f(section)g(is)g
(curren)n(tly)f(a)n(v)-5 b(ailable)25 b(electroni-)374
2008 y(cally)i(\(Kn)n(uth,)g(2001b\).)g(While)h(writing)f(it,)h(Kn)n
(uth)f(to)r(ok)g(in)n(terest)h(in)f(Ko)r(da)g(and)g(Rusk)n(ey's)374
2116 y(algorithm,)k(and)g(published)i(t)n(w)n(o)e(implemen)n(tations)h
(of)g(it)g(\(Kn)n(uth,)h(2001a\).)d(Our)h(in)n(terest)374
2223 y(arose)25 b(from)j(these)f(readings.)457 2333 y(Ko)r(da)j(and)h
(Rusk)n(ey's)f(algorithm)g(can)g(b)r(e)i(describ)r(ed)f(in)g(a)g
(simple)g(w)n(a)n(y)-7 b(.)30 b(The)h(task)g(is)g(to)374
2441 y(en)n(umerate)c(all)g Fj(c)l(olorings)36 b Fq(of)28
b(a)f(giv)n(en,)g(arbitrary)f(forest.)h(A)i(coloring)d(consists)h(in)h
(marking)374 2549 y(ev)n(ery)i(no)r(de)i(as)f(either)g(blac)n(k)g(or)f
(white,)j(with)f(the)g(sole)f(constrain)n(t)f(that)i(all)f(descendan)n
(ts)374 2656 y(of)c(a)g(white)h(no)r(de)g(b)r(e)g(white)g(as)f(w)n
(ell.)g(F)-7 b(or)27 b(instance,)h(the)g(follo)n(wing)e(forest:)1602
2771 y
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0
16 {InitRnode } NewNode end end
 1602 2771 a 1633 2771 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 1633 2771 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial 1602 2960 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0-0
16 {InitRnode } NewNode end end
 1602 2960 a 1633
2960 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 1633 2960 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial
1633 2960 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.42262
1.42262 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1633 2960 a 1979 2771 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0
16 {InitRnode } NewNode end end
 1979 2771 a 2010
2771 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 2010 2771 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial
1859 2960 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0-0
16 {InitRnode } NewNode end end
 1859 2960 a 1890 2960 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 1890 2960 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial 1890 2960 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.42262
1.42262 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1890 2960 a 2099
2960 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0-1
16 {InitRnode } NewNode end end
 2099 2960 a 2130 2960 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 2130 2960 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial 2130 2960 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.42262
1.42262 0 0 /N@T-0 /N@T-0-1 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 2130 2960 a 3256
2870 a Fq(\(1\))374 3116 y(admits)20 b(exactly)g(15)g(distinct)h
(colorings,)d(all)j(of)f(whic)n(h)h(are)e(giv)n(en)h(in)h(Figure)f(1.)g
(By)g(de\014nition,)374 3223 y(a)25 b(sequence)g(of)h(colorings)d
(forms)i(a)g(Gra)n(y)g(co)r(de)g(if)h(and)g(only)f(if)h(ev)n(ery)f
(coloring)e(of)j(the)g(forest)374 3331 y(app)r(ears)18
b(exactly)i(once)f(in)i(it)f(and)g(t)n(w)n(o)f(consecutiv)n(e)g
(colorings)f(di\013er)i(b)n(y)g(the)h(color)d(of)i(exactly)374
3439 y(one)27 b(no)r(de.)457 3549 y(Let)j(us)g(illustrate)g(the)g
(algorithm's)f(functioning)h(on)g(the)h(forest)e(\(1\).)i(The)f(main)g
(idea)g(is)374 3656 y(to)e(in)n(terlea)n(v)n(e)f(the)i(sequences)f(of)h
(colorings)e(whic)n(h)h(corresp)r(ond)g(to)g(eac)n(h)g(of)h(the)g
(trees)f(that)374 3764 y(form)e(the)i(forest.)e(Here,)h(one)g(m)n(ust)g
(in)n(terlace)f(the)h(sequence)g(of)g(the)g(three)g(colorings)e(of)i
(the)374 3872 y(left-hand)g(tree,)h(namely:)1593 3958
y
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0
16 {InitRnode } NewNode end end
 1593 3958 a 1625 3958 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 1625 3958 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end


@endspecial 1593 4146 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0-0
16 {InitRnode } NewNode end end
 1593 4146 a 1625 4146 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 1625
4146 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial 1625 4146
a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.42262
1.42262 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1625 4146 a 1850 3958 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0
16 {InitRnode } NewNode end end
 1850 3958 a 1882 3958 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 1882
3958 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0. setgray fill grestore gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore end
 
@endspecial 1850 4146
a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0-0
16 {InitRnode } NewNode end end
 1850 4146 a 1882 4146 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 1882 4146 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end


@endspecial 1882 4146 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.42262
1.42262 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1882 4146 a 2107 3958 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0
16 {InitRnode } NewNode end end
 2107
3958 a 2139 3958 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 2139 3958 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0. setgray fill grestore gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore end


@endspecial 2107 4146 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0-0
16 {InitRnode } NewNode end end
 2107 4146 a 2139 4146 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 2139
4146 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0. setgray fill grestore gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore end
 
@endspecial 2139 4146
a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.42262
1.42262 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 2139 4146 a 3256 4057 a Fq(\(2\))374 4273 y(with)g(the)g(sequence)f
(of)g(the)h(\014v)n(e)g(colorings)d(of)j(the)g(righ)n(t-hand)e(tree,)h
(giv)n(en)g(b)r(elo)n(w:)856 4387 y
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0
16 {InitRnode } NewNode end end
 856 4387 a 888 4387
a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 888 4387 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial 736
4576 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0-0
16 {InitRnode } NewNode end end
 736 4576 a 768 4576 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 768 4576 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial 768 4576 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.42262
1.42262 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 768 4576 a 976 4576
a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0-1
16 {InitRnode } NewNode end end
 976 4576 a 1008 4576 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 1008 4576 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end


@endspecial 1008 4576 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.42262
1.42262 0 0 /N@T-0 /N@T-0-1 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1008 4576 a 1353 4387 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0
16 {InitRnode } NewNode end end
 1353
4387 a 1385 4387 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 1385 4387 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0. setgray fill grestore gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore end


@endspecial 1233 4576 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0-0
16 {InitRnode } NewNode end end
 1233 4576 a 1265 4576 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 1265
4576 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial 1265 4576
a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.42262
1.42262 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1265 4576 a 1473 4576 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0-1
16 {InitRnode } NewNode end end
 1473 4576 a 1505 4576 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 1505
4576 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial 1505 4576
a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.42262
1.42262 0 0 /N@T-0 /N@T-0-1 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1505 4576 a 1850 4387 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0
16 {InitRnode } NewNode end end
 1850 4387 a 1882 4387 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 1882
4387 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0. setgray fill grestore gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore end
 
@endspecial 1730 4576
a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0-0
16 {InitRnode } NewNode end end
 1730 4576 a 1762 4576 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 1762 4576 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end


@endspecial 1762 4576 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.42262
1.42262 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1762 4576 a 1970 4576 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0-1
16 {InitRnode } NewNode end end
 1970
4576 a 2002 4576 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 2002 4576 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0. setgray fill grestore gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore end


@endspecial 2002 4576 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.42262
1.42262 0 0 /N@T-0 /N@T-0-1 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 2002 4576 a 2347 4387 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0
16 {InitRnode } NewNode end end
 2347
4387 a 2379 4387 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 2379 4387 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0. setgray fill grestore gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore end


@endspecial 2227 4576 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0-0
16 {InitRnode } NewNode end end
 2227 4576 a 2259 4576 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 2259
4576 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0. setgray fill grestore gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore end
 
@endspecial 2259 4576
a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.42262
1.42262 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 2259 4576 a 2467 4576 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0-1
16 {InitRnode } NewNode end end
 2467 4576 a 2499 4576 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 2499
4576 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0. setgray fill grestore gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore end
 
@endspecial 2499 4576
a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.42262
1.42262 0 0 /N@T-0 /N@T-0-1 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 2499 4576 a 2844 4387 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0
16 {InitRnode } NewNode end end
 2844 4387 a 2876 4387 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 2876
4387 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0. setgray fill grestore gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore end
 
@endspecial 2724 4576
a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0-0
16 {InitRnode } NewNode end end
 2724 4576 a 2756 4576 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 2756 4576 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0. setgray fill grestore gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore end


@endspecial 2756 4576 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.42262
1.42262 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 2756 4576 a 2965 4576 a
 tx@Dict begin tx@NodeDict begin {3.8 3.8 7.6 3.8 0.0 } false /N@T-0-1
16 {InitRnode } NewNode end end
 2965
4576 a 2996 4576 a
 tx@Dict begin tx@NodeDict begin {0.0 2 div 0.0 0.0 add 2 div 2 copy
0.0 sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@a 11 {InitCnode } NewNode
end end
 2996 4576 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 2 div 0.0 0.0 add
2 div 2 copy 0.0 sub 4 2 roll Pyth 3.0 add CLW 2 div add 0 360 arc
closepath gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end


@endspecial 2996 4576 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.42262
1.42262 0 0 /N@T-0 /N@T-0-1 InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 2996 4576 a 3256 4487 a Fq(\(3\))374
4732 y(Th)n(us,)39 b(the)h(\014rst)f(line)h(of)f(Figure)g(1)g(exhibits)
h(the)g(\014rst)f(coloring)f(of)h(the)h(left-hand)g(tree,)374
4840 y(com)n(bined)d(successiv)n(ely)f(with)j(all)e(colorings)f(of)i
(the)g(righ)n(t-hand)f(tree.)g(The)h(second)f(line)374
4948 y(sho)n(ws)29 b(the)h(second)f(coloring)g(of)h(the)g(left-hand)h
(tree,)e(again)g(com)n(bined)h(with)h(all)e(colorings)374
5056 y(of)i(the)h(righ)n(t-hand)f(tree,)g(but)h(this)g(time)h(in)f(rev)
n(erse)d(order|indeed,)i(it)h(is)g(clear)e(that)i(the)374
5164 y(mirror)e(image)i(of)g(a)f(Gra)n(y)g(co)r(de)h(remains)g(a)f(Gra)
n(y)g(co)r(de.)h(Lastly)-7 b(,)32 b(the)h(third)f(line)g(exhibits)374
5272 y(the)26 b(third)g(coloring)e(of)i(the)g(left-hand)g(tree)f(and)h
(all)f(colorings)f(of)i(the)g(righ)n(t-hand)f(tree,)g(this)374
5380 y(time)j(again)e(in)i(their)g(initial)f(order.)p
eop
%%Page: 947 3
947 2 bop 1576 432 a Fj(F)-6 b(unctional)30 b(p)l(e)l(arl)1079
b Fq(947)457 631 y(There)29 b(remains)h(to)g(explain)g(ho)n(w)g(to)g
(en)n(umerate)f(all)h(colorings)e(of)j(a)f(tree.)g(Let)g(the)h(\014rst)
374 739 y(coloring)c(b)r(e)j(uniformly)f(white.)g(Then,)h(to)f(obtain)g
(the)g(remainder)f(of)i(the)f(sequence,)g(color)374 847
y(the)23 b(ro)r(ot)f(no)r(de)h(blac)n(k)f(and)h(en)n(umerate)f(all)h
(colorings)e(of)i(the)g(forest)f(formed)h(b)n(y)g(its)g(c)n(hildren.)
374 955 y(The)i(sequence)g(th)n(us)h(obtained)g(is)f(indeed)h(a)f(Gra)n
(y)g(co)r(de,)g(b)r(ecause)h(\(i\))g(the)g(\014rst)g(and)f(second)374
1063 y(colorings)j(di\013er)j(only)g(b)n(y)f(the)h(color)f(of)h(the)g
(ro)r(ot)f(no)r(de)h(and)f(\(ii\))i(from)e(then)i(on,)e(the)h(ro)r(ot)
374 1171 y(no)r(de)c(remains)g(una\013ected,)h(and)f(the)h(sequence)f
(of)h(the)g(colorings)d(of)j(the)g(c)n(hildren)f(forms)g(a)374
1279 y(Gra)n(y)i(co)r(de)h(b)n(y)h(construction.)f(This)g(pro)r(cess)g
(is)g(illustrated)h(b)n(y)f(\(2\))h(and)f(\(3\))h(ab)r(o)n(v)n(e.)e
(Note)374 1386 y(that)k(the)g(coloring)e(where)h(ev)n(ery)g(no)r(de)g
(is)h(blac)n(k)f(do)r(es)h(not)f(necessarily)g(app)r(ear)f(last)i(in)g
(a)374 1494 y(sequence.)457 1602 y(Ko)r(da)27 b(and)h(Rusk)n(ey's)f
(pap)r(er)h(\(Ko)r(da)g(&)f(Rusk)n(ey)-7 b(,)28 b(1993\))f(describ)r
(es)g(t)n(w)n(o)h(v)n(ersions)e(of)i(this)374 1710 y(algorithm,)33
b(written)i(as)f(imp)r(erativ)n(e)h(pseudo-co)r(de)e(and)i(as)f(P)n
(ascal)f(co)r(de.)h(One)h(has)f(com-)374 1818 y(plexit)n(y)27
b Fi(O)r Fq(\()p Fi(nN)9 b Fq(\),)28 b(where)f Fi(n)h
Fq(is)f(the)h(n)n(um)n(b)r(er)f(of)h(no)r(des)f(in)h(the)g(forest)f
(and)g Fi(N)36 b Fq(is)28 b(the)g(n)n(um)n(b)r(er)374
1926 y(of)i(its)h(colorings,)d(that)j(is,)f(the)h(length)f(of)h(the)g
(Gra)n(y)e(co)r(de)h(to)g(b)r(e)h(pro)r(duced.)f(The)h(other)f(is)374
2034 y(a)f(re\014nemen)n(t)g(with)h(optimal)f(complexit)n(y)-7
b(,)29 b(namely)g Fi(O)r Fq(\()p Fi(N)9 b Fq(\).)30 b(More)f(recen)n
(tly)-7 b(,)28 b(t)n(w)n(o)h(C)g(imple-)374 2142 y(men)n(tations)d(w)n
(ere)g(giv)n(en)g(b)n(y)g(Kn)n(uth)h(\(Kn)n(uth,)g(2001a\).)e(All)i(of)
g(these)g(implemen)n(tations)f(are)374 2250 y(complex:)c(they)i(are)e
(t)n(ypically)h(50)f(to)h(80)g(lines)g(long)f(and)i(in)n(v)n(olv)n(e)d
(imp)r(erativ)n(e)i(mo)r(di\014cations)374 2358 y(of)k(subtle)h(data)f
(structures.)457 2466 y(The)g(presen)n(t)f(pap)r(er)g(describ)r(es)h
(an)f(alternativ)n(e)g(approac)n(h)f(to)h(implemen)n(ting)i(Ko)r(da)e
(and)374 2574 y(Rusk)n(ey's)j(algorithm.)g(W)-7 b(e)30
b(b)r(egin)g(with)g(a)g(simple)g(algorithm)f(\(Section)h(2\),)g(whic)n
(h)g(w)n(e)g(\014rst)374 2682 y(implemen)n(t)21 b(in)h(a)e(purely)h
(functional)g(manner)g(and)g(then)g(translate)f(in)n(to)h(a)g(sligh)n
(tly)f(more)g(im-)374 2790 y(p)r(erativ)n(e)26 b(st)n(yle.)h(Indeed,)h
(our)f(programming)e(language)h(is)i(Ob)5 b(jectiv)n(e)26
b(Caml)i(\(Lero)n(y)e Fj(et)j(al.)p Fq(,)374 2897 y(2002\),)19
b(so)i(it)h(is)f(natural)g(to)g(exploit|to)g(some)g(degree|its)g(imp)r
(erativ)n(e)f(features.)h(Ho)n(w)n(ev)n(er,)374 3005
y(it)i(w)n(ould)g(b)r(e)h(p)r(ossible)f(to)g(use)g(an)n(y)g(language)f
(that)h(supp)r(orts)g(\014rst-class)f(functions)i(and)f(m)n(u-)374
3113 y(table)33 b(arra)n(ys,)d(suc)n(h)j(as)f(other)g(ML)i(dialects,)e
(Hask)n(ell,)g(Lisp,)h(Sc)n(heme,)g(etc.)h(In)f(Section)g(3,)374
3221 y(w)n(e)26 b(sligh)n(tly)g(mo)r(dify)g(the)h(algorithm)f(so)f(as)h
(to)g(ac)n(hiev)n(e)g(optimal)g(complexit)n(y)g Fi(O)r
Fq(\()p Fi(N)9 b Fq(\).)27 b(Then,)374 3329 y(Sections)33
b(4)h(and)f(5)h(presen)n(t)f(re\014ned)h(implemen)n(tations)f(of)h(the)
g(second)g(algorithm,)e(elimi-)374 3437 y(nating)c(\014rst-class)g
(functions)h(in)h(fa)n(v)n(or)d(of)i(lo)n(w)n(er-lev)n(el)e(represen)n
(tations,)g(while)i(preserving)374 3545 y(most)35 b(of)g(the)g
(simplicit)n(y)g(a\013orded)g(b)n(y)g(our)f(approac)n(h.)f(Lastly)-7
b(,)35 b(Section)g(6)g(compares)e(our)374 3653 y(implemen)n(tations)27
b(with)h(those)f(prop)r(osed)g(b)n(y)g(Kn)n(uth,)h(p)r
(erformance-wise.)1158 3923 y Fm(2)48 b(A)32 b(con)m(tin)m
(uation-based)g(algorithm)374 4085 y Fq(W)-7 b(e)28 b(represen)n(t)e(a)
h(forest)g(as)g(a)g(v)-5 b(alue)28 b(of)f(OCaml)g(t)n(yp)r(e)h
Fh(forest)p Fq(,)d(de\014ned)j(as)f(follo)n(ws:)461 4247
y Fh(type)42 b(tree)85 b(=)43 b(Node)f(of)h(int)f Fn(\002)i
Fh(forest)461 4355 y(and)e(forest)f(=)i(tree)f(list)374
4516 y Fi(\013)20 b Fh(list)f Fq(is)h(OCaml's)f(prede\014ned)h(t)n(yp)r
(e)h(for)e(lists)h(of)h(elemen)n(ts)f(of)g(t)n(yp)r(e)g
Fi(\013)p Fq(.)h(The)f(list)g(con)n(taining)374 4624
y Fi(x)421 4636 y Fg(1)458 4624 y Fi(;)14 b(x)542 4636
y Fg(2)580 4624 y Fi(;)g(:)g(:)g(:)f(;)h(x)811 4636 y
Ff(n)878 4624 y Fq(in)21 b(this)g(order)f(is)g(written)h
Fh([)p Fi(x)1785 4636 y Fg(1)1823 4624 y Fh(;)43 b Fi(x)1957
4636 y Fg(2)1994 4624 y Fh(;)h(...;)e Fi(x)2347 4636
y Ff(n)2392 4624 y Fh(])p Fq(.)21 b(The)g(empt)n(y)g(list)g(is)f
(written)374 4732 y Fh([])o Fq(.)k(The)h(addition)g(of)f(an)g(elemen)n
(t)h Fi(x)g Fq(at)f(the)h(b)r(eginning)g(of)f(a)h(list)f
Fi(l)i Fq(is)f(written)g Fi(x)14 b Fh(::)f Fi(l)r Fq(.)24
b(The)h Fi(n)374 4840 y Fq(no)r(des)d(of)h(the)f(forest)g(are)g(lab)r
(eled)h(b)n(y)f(the)h(in)n(tegers)e(0)p Fi(;)14 b Fq(1)p
Fi(;)g(:)g(:)g(:)f(;)h(n)8 b Fn(\000)g Fq(1)22 b(in)h(an)f(arbitrary)f
(manner.)457 4948 y(The)h(algorithm)f(needs)h(to)f(main)n(tain)h(a)g
(curren)n(t)f(coloring.)f(It)j(also)e(needs)h(to)f(displa)n(y)h(ev)n
(ery)374 5056 y(coloring)32 b(after)h(it)h(is)g(computed.)g(Th)n(us,)g
(our)f(purely)h(functional)g(implemen)n(tation)f(uses)h(a)374
5164 y(com)n(bined)f(I/O)g(and)g(state)h(monad,)f(whose)g(OCaml)g
(signature)f(is)i(giv)n(en)f(in)h(the)g(top)f(half)374
5272 y(of)27 b(Figure)f(2.)h(A)h(state)f(con)n(tains)f(b)r(oth)i(the)f
(coloring,)f(represen)n(ted)g(as)h(an)g(arra)n(y)d(of)k(in)n(tegers)374
5380 y(where)i(0)g(stands)g(for)h(white)g(and)f(1)h(stands)f(for)g
(blac)n(k,)g(and)h(the)g(output)g(displa)n(y)n(ed)f(so)g(far,)p
eop
%%Page: 948 4
948 3 bop 374 432 a Fq(948)840 b Fj(J.-C.)30 b(Fil)t(li^)-42
b(atr)l(e)31 b(and)g(F.)f(Pottier)452 645 y Fe(type)40
b(state)h(=)e(int)h(array)g Fd(\002)f Fe(string)452 737
y(type)h(computation)i(=)d(state)i Fd(!)e Fe(state)452
919 y(val)h(create)h(:)e(int)h Fd(!)f Fe(state)452 1011
y(val)h(update)h(:)e(int)h Fd(!)f Fe(int)h Fd(!)f Fe(computation)452
1102 y(val)h(get)g(:)f(int)h Fd(!)f Fe(state)i Fd(!)e
Fe(int)452 1193 y(val)h(print)g(:)g(computation)452 1376
y(let)g(rec)g(enum_forest)i(k)d(f)h(s)f(=)g(match)i(f)e(with)531
1467 y(|)g([])h Fd(!)f Fe(k)g(s)531 1559 y(|)g(t)g(::)h(f)g
Fd(!)f Fe(enum_tree)i(\(enum_forest)h(k)d(f\))h(t)f(s)452
1650 y(and)h(enum_tree)h(k)f(\(Node)g(\(i,f\)\))h(s)e(=)531
1741 y(if)g(get)h(i)g(s)f(==)h(0)f(then)609 1833 y(\(k)h(++)f(update)i
(i)e(1)h(++)g(enum_forest)h(k)f(f\))f(s)531 1924 y(else)609
2015 y(\(enum_forest)j(k)d(f)h(++)g(update)g(i)g(0)f(++)h(k\))f(s)596
2215 y Fl(Fig.)26 b(2.)39 b(A)26 b(con)n(tin)n(uation-based)f(v)n
(ersion)h(of)g(Ko)r(da)g(and)g(Rusk)n(ey's)e(algorithm)j(\(C0\).)374
2466 y Fq(represen)n(ted)k(as)g(a)h(string.)g(A)g(computation)g(is)g(a)
g(state)g(transformer,)e(that)j(is,)f(a)g(function)374
2574 y(from)19 b(states)h(to)g(states.)g(The)g(state)g
Fh(create)e Fi(n)i Fq(is)g(the)h(algorithm's)e(initial)h(state,)g
(where)g(ev)n(ery)374 2682 y(no)r(de)27 b(is)f(colored)g(white.)h(The)h
(computation)e Fh(update)f Fi(i)h(c)h Fq(colors)f(no)r(de)h
Fi(i)f Fq(with)i(color)d Fi(c)p Fq(.)i(The)374 2790 y(op)r(eration)c
Fh(get)g Fi(i)g Fq(returns)h(the)g(color)f(of)h(no)r(de)g
Fi(i)p Fq(.)g(Lastly)-7 b(,)24 b(the)g(computation)g
Fh(print)e Fq(app)r(ends)374 2897 y(the)41 b(description)f(of)h(the)g
(curren)n(t)f(coloring)f(to)i(the)g(output)g(string.)f(Implemen)n(ting)
h(this)374 3005 y(monad)26 b(in)h(OCaml)f(is)h(straigh)n(tforw)n(ard;)c
(w)n(e)k(omit)g(the)g(co)r(de.)f(T)-7 b(o)27 b(sequence)f
(computations,)374 3113 y(it)37 b(is)g(con)n(v)n(enien)n(t)g(to)g(in)n
(tro)r(duce)g(the)g(follo)n(wing)g(in\014x)g(op)r(eration,)f(whic)n(h)i
(is)f(nothing)g(but)374 3221 y(function)28 b(comp)r(osition:)461
3383 y Fh(val)42 b(\(++\))g(:)h(computation)c Fn(!)44
b Fh(computation)39 b Fn(!)44 b Fh(computation)457 3545
y Fq(Let)39 b(us)g(no)n(w)f(describ)r(e)h(the)g(core)f(of)h(the)g
(algorithm.)f(Because)g(trees)h(and)f(forests)g(are)374
3653 y(de\014ned)e(in)h(a)f(m)n(utually)g(inductiv)n(e)g(w)n(a)n(y)-7
b(,)36 b(w)n(e)g(naturally)f(de\014ne)h(t)n(w)n(o)g(m)n(utually)g
(recursiv)n(e)374 3761 y(functions)23 b Fh(enum)p 908
3761 27 4 v 30 w(tree)e Fq(and)i Fh(enum)p 1468 3761
V 30 w(forest)p Fq(,)d(whic)n(h)j(en)n(umerate)f(the)i(colorings)d(of)h
(a)h(tree)g(and)374 3869 y(of)28 b(a)g(forest,)f(resp)r(ectiv)n(ely)-7
b(.)28 b(The)g(k)n(ey)f(idea)h(is)g(to)g(giv)n(e)g(these)g(functions)g
(an)g(extra)g(argumen)n(t)374 3977 y Fh(k)p Fq(,)f(of)h(t)n(yp)r(e)g
Fh(computation)p Fq(,)23 b(whic)n(h)28 b(will)g(b)r(e)h(called)e(after)
h(ev)n(ery)e(coloring)g(of)i(the)g(tree)g(\(resp.)374
4085 y(forest\))j(is)g(complete.)h(The)g(function)g Fh(k)f
Fq(ma)n(y)g(b)r(e)h(view)n(ed)f(as)g(a)g(con)n(tin)n(uation,)g(and)h(w)
n(e)f(call)374 4193 y(it)g(so)g(in)h(the)f(follo)n(wing.)g(The)g(idea)g
(is,)h(if)f(the)h(function)g Fh(k)f Fq(en)n(umerates)f(the)i(colorings)
e(of)h(a)374 4301 y(certain)22 b(forest)h Fh(f0)p Fq(,)f(then)i(the)g
(computation)f Fh(enum)p 1989 4301 V 29 w(forest)42 b(k)h(f)23
b Fq(en)n(umerates)f(the)h(colorings)374 4408 y(of)j(the)g(forest)g
Fh(f)14 b(@)g(f0)26 b Fq(and)g Fh(enum)p 1407 4408 V
30 w(tree)41 b(k)j(t)26 b Fq(those)f(of)i(the)f(forest)g
Fh(t)14 b(::)g(f0)p Fq(,)25 b(where)h Fh(@)g Fq(denotes)374
4516 y(forest)h(concatenation.)457 4624 y(The)k(co)r(de)g(is)g(giv)n
(en)f(in)i(Figure)e(2;)h(w)n(e)g(refer)f(to)h(it)h(as)e(C0.)h
(Throughout,)f(the)i(v)-5 b(ariable)30 b Fh(s)374 4732
y Fq(denotes)i(the)h(curren)n(t)e(state.)i(Let)f(us)h(b)r(egin)f(with)h
Fh(enum)p 2220 4732 V 30 w(forest)p Fq(.)d(If)j(the)g(forest)f(is)g
(empt)n(y)-7 b(,)374 4840 y(w)n(e)29 b(simply)g(call)g(the)h(con)n(tin)
n(uation.)e(If,)i(on)g(the)f(other)g(hand,)h(the)f(forest)g(con)n
(tains)g(at)g(least)374 4948 y(one)23 b(tree)g Fh(t)h
Fq(next)g(to)g(a)f(sub-forest)g Fh(f)p Fq(,)g(then)i(w)n(e)e(en)n
(umerate)g(the)h(colorings)e(of)30 b Fh(t)p Fq(,)24 b(b)n(y)f(applying)
374 5056 y Fh(enum)p 555 5056 V 29 w(tree)29 b Fq(to)h
Fh(t)p Fq(,)h(with)g(a)f(new)g(con)n(tin)n(uation)g(that)g(en)n
(umerates)g(the)h(colorings)d(of)37 b Fh(f)30 b Fq(with)374
5164 y(con)n(tin)n(uation)h Fh(k)p Fq(.)i(Let)g(us)f(no)n(w)g(turn)h
(to)g Fh(enum)p 1879 5164 V 29 w(tree)p Fq(.)e(Its)i(task)f(is)h(sligh)
n(tly)f(more)g(complex,)374 5272 y(b)r(ecause)i(it)h(m)n(ust)g(en)n
(umerate)f(the)h(colorings)d(either)j(in)g(one)f(direction,)g(or)g(in)h
(the)g(other,)374 5380 y(dep)r(ending)h(up)r(on)h(the)g(curren)n(t)e
(state.)h(T)-7 b(o)36 b(determine)g(whic)n(h,)h Fh(enum)p
2662 5380 V 29 w(tree)e Fq(lo)r(oks)g(up)i(the)p eop
%%Page: 949 5
949 4 bop 1576 432 a Fj(F)-6 b(unctional)30 b(p)l(e)l(arl)1079
b Fq(949)452 645 y Fe(type)40 b(computation)i(=)d(unit)i
Fd(!)e Fe(unit)452 828 y(let)h(rec)g(enum_forest)i(k)d(=)h(function)531
919 y(|)f([])h Fd(!)f Fe(k)g(\(\))531 1011 y(|)g(t)g(::)h(f)g
Fd(!)f Fe(enum_tree)i(\(fun)f(\(\))g Fd(!)f Fe(enum_forest)i(k)f(f\))g
(t)452 1102 y(and)g(enum_tree)h(k)f(\(Node)g(\(i,f\)\))h(=)531
1193 y(if)e(bits.\(i\))i(=)f(0)f(then)h(begin)609 1285
y(k)f(\(\);)h(bits.\(i\))h Fd( )e Fe(1;)h(enum_forest)i(k)d(f)531
1376 y(end)g(else)i(begin)609 1467 y(enum_forest)h(k)d(f;)h(bits.\(i\))
h Fd( )e Fe(0;)h(k)f(\(\))531 1559 y(end)916 1758 y Fl(Fig.)26
b(3.)40 b(A)25 b(sligh)n(tly)h(more)f(imp)r(erativ)n(e)g(implemen)n
(tation)f(\(C1\).)374 2028 y Fq(color)d(of)i(the)g(tree's)f(ro)r(ot,)g
(that)h(is,)g Fh(get)42 b(i)h(s)p Fq(.)23 b(If)g(it)g(is)g(curren)n
(tly)f(white,)h(then)g(the)g(whole)g(tree)374 2136 y(m)n(ust)i(b)r(e)h
(white.)g(W)-7 b(e)25 b(ha)n(v)n(e)g(a)g(complete)g(coloring,)f(so)g(w)
n(e)h(signal)g(the)g(con)n(tin)n(uation)g Fh(k)p Fq(;)g(then,)374
2244 y(w)n(e)j(color)g(the)i(ro)r(ot)e(blac)n(k)h(and)g(en)n(umerate)f
(its)h(c)n(hildren's)g(colorings)e(using)j Fh(enum)p
3053 2244 27 4 v 30 w(forest)p Fq(.)374 2352 y(If,)g(on)f(the)h(other)g
(hand,)f(the)h(ro)r(ot)f(is)h(curren)n(tly)f(blac)n(k,)g(w)n(e)g(do)h
(the)g(con)n(v)n(erse.)d(That)j(is,)g(w)n(e)374 2460
y(\014rst)c(use)g Fh(enum)p 867 2460 V 30 w(forest)e
Fq(to)i(en)n(umerate)g(the)h(c)n(hildren's)f(colorings)e(in)j(rev)n
(erse)d(order,)i(whic)n(h)374 2568 y(lea)n(v)n(es)k(all)h(of)g(the)h(c)
n(hildren)g(en)n(tirely)f(white;)h(then,)g(w)n(e)f(color)f(the)i(ro)r
(ot)f(white,)h(and)f(signal)374 2675 y(the)d(con)n(tin)n(uation)e
Fh(k)p Fq(.)457 2785 y(T)-7 b(o)24 b(run)g(C0)g(on)h(a)f(forest)g
Fh(f)p Fq(,)g(one)g(calls)g Fh(enum)p 1859 2785 V 30
w(forest)e Fq(with)j(a)f(con)n(tin)n(uation)g(that)h(displa)n(ys)374
2893 y(the)j(curren)n(t)e(coloring)g(ev)n(ery)h(time)h(it)g(is)f(in)n
(v)n(ok)n(ed,)f(that)i(is,)g Fh(print)p Fq(:)461 3070
y Fh(enum_forest)39 b(print)i(f)374 3245 y Fq(This)19
b(computation)g(is)h(then)g(applied)g(to)f(a)g(suitable)h(initial)g
(state,)f(namely)i Fh(create)41 b(n)p Fq(,)19 b(where)374
3353 y Fh(n)27 b Fq(is)g(the)h(size)g(of)f(the)h(forest)f
Fh(f)p Fq(.)374 3576 y Fj(A)32 b(slightly)i(mor)l(e)e(imp)l(er)l(ative)
i(implementation.)43 b Fq(F)-7 b(rom)31 b(here)f(on,)g(w)n(e)h(use)f(a)
g(nativ)n(e)g(imple-)374 3684 y(men)n(tation)i(of)h(the)h(monad)e
(describ)r(ed)h(ab)r(o)n(v)n(e,)f(so)g(as)h(to)f(obtain)h(more)f
(idiomatic)h(OCaml)374 3792 y(co)r(de.)28 b(That)g(is,)g(the)g(curren)n
(t)g(coloring)e(is)i(no)n(w)g(stored)f(in)i(a)e(global)g(arra)n(y)g
Fh(bits)p Fq(,)g(while)h(col-)374 3900 y(orings)35 b(are)i(displa)n(y)n
(ed)f(b)n(y)h(calling)f(OCaml's)h(standard)f(library)g(functions.)i(As)
f(a)g(result,)374 4008 y(computations)24 b(op)r(erate)h(only)g(b)n(y)g
(side)g(e\013ect.)h(The)g(co)r(de)f(is)g(giv)n(en)g(in)g(Figure)g(3;)g
(w)n(e)g(refer)g(to)374 4116 y(it)d(as)f(C1.)g(The)h(di\013erences)f
(with)h(resp)r(ect)g(to)f(C0)g(are)g(minor.)g(The)h(state)g(parameter)e
Fh(s)h Fq(disap-)374 4224 y(p)r(ears)k(or)h(is)g(replaced)f(with)i(the)
g Fh(\(\))e Fq(constan)n(t.)h(The)g(comp)r(osition)g(op)r(erator)f
Fh(++)g Fq(is)h(replaced)374 4332 y(with)e(OCaml's)g(nativ)n(e)g
(sequencing)f(construct)h Fh(;)p Fq(.)g(The)g(curren)n(t)g(coloring)e
(is)j(lo)r(ok)n(ed)e(up)i(and)374 4440 y(mo)r(di\014ed)33
b(b)n(y)f(reading)g(and)g(writing)g(the)i(global)d(arra)n(y)h
Fh(bits)p Fq(.)f(T)-7 b(o)32 b(run)h(C1)f(on)g(a)h(forest)f
Fh(f)p Fq(,)374 4548 y(one)23 b(calls)g Fh(enum)p 884
4548 V 30 w(forest)e Fq(with)k(a)e(con)n(tin)n(uation)g(that)h(displa)n
(ys)f(the)h(curren)n(t)f(con)n(ten)n(ts)g(of)h(the)374
4656 y(arra)n(y)i Fh(bits)g Fq(at)h(ev)n(ery)g(in)n(v)n(o)r(cation:)461
4833 y Fh(enum_forest)39 b(\(fun)j(\(\))g Fn(!)i Fh(\(*)f(display)e
(current)f(configuration)e(*\)\))43 b(f)374 5056 y Fj(Complexity.)g
Fq(T)-7 b(o)29 b(assess)e(C1's)i(complexit)n(y)-7 b(,)28
b(let)i(us)f(\014rst)g(in)n(tro)r(duce)g(the)g(t)n(w)n(o)f(quan)n
(tities)h(in)374 5164 y(terms)d(of)g(whic)n(h)h(it)g(is)f(expressed,)g
(namely)g(the)h(forest's)f(size)g(and)h(n)n(um)n(b)r(er)f(of)h
(colorings.)d(In)374 5272 y(the)33 b(follo)n(wing,)f(w)n(e)g(use)h
(OCaml's)f(list)h(syn)n(tax)f(for)g(forests.)g(W)-7 b(e)34
b(write)e Fh(Node)g Fi(f)41 b Fq(for)32 b(a)h(tree)374
5380 y(whose)21 b(c)n(hildren)h(form)g(a)g(forest)g Fi(f)31
b Fq(\(and)22 b(whose)g(index)g(is)g(irrelev)-5 b(an)n(t\).)22
b(The)g(size)g(of)g(a)g(forest)g Fi(f)p eop
%%Page: 950 6
950 5 bop 374 432 a Fq(950)840 b Fj(J.-C.)30 b(Fil)t(li^)-42
b(atr)l(e)31 b(and)g(F.)f(Pottier)374 631 y Fq(\(resp.)24
b(of)g(a)g(tree)g Fi(t)p Fq(\),)h(written)g Fi(n)p Fq(\()p
Fi(f)9 b Fq(\))24 b(\(resp.)g Fi(n)p Fq(\()p Fi(t)p Fq(\)\),)i(is)e
(the)h(n)n(um)n(b)r(er)f(of)g(its)h(no)r(des.)f(It)h(is)f(de\014ned)374
739 y(inductiv)n(ely)j(on)h(the)g(structure)f(of)g(trees)g(and)h
(forests:)1529 943 y Fi(n)p Fq(\()p Fh([])o Fq(\))84
b(=)e(0)1422 1076 y Fi(n)p Fq(\()p Fi(t)14 b Fh(::)f
Fi(f)c Fq(\))83 b(=)f Fi(n)p Fq(\()p Fi(t)p Fq(\))19
b(+)f Fi(n)p Fq(\()p Fi(f)9 b Fq(\))1365 1209 y Fi(n)p
Fq(\()p Fh(Node)26 b Fi(f)9 b Fq(\))83 b(=)f(1)18 b(+)g
Fi(n)p Fq(\()p Fi(f)9 b Fq(\))374 1413 y(The)25 b(n)n(um)n(b)r(er)g(of)
h(colorings)d(of)i(a)g(forest)g Fi(f)34 b Fq(\(resp.)25
b(of)h(a)f(tree)g Fi(t)p Fq(\),)h(written)f Fi(N)9 b
Fq(\()p Fi(f)g Fq(\))26 b(\(resp.)f Fi(N)9 b Fq(\()p
Fi(t)p Fq(\)\),)374 1521 y(is)27 b(de\014ned)h(similarly:)1490
1726 y Fi(N)9 b Fq(\()p Fh([])p Fq(\))83 b(=)f(1)1383
1858 y Fi(N)9 b Fq(\()p Fi(t)14 b Fh(::)f Fi(f)c Fq(\))83
b(=)f Fi(N)9 b Fq(\()p Fi(t)p Fq(\))19 b Fn(\002)f Fi(N)9
b Fq(\()p Fi(f)g Fq(\))1326 1991 y Fi(N)g Fq(\()p Fh(Node)26
b Fi(f)9 b Fq(\))83 b(=)f(1)18 b(+)g Fi(N)9 b Fq(\()p
Fi(f)g Fq(\))374 2196 y(Unless)21 b(it)g(is)g(am)n(biguous,)f(w)n(e)g
(write)h Fi(n)g Fq(and)g Fi(N)30 b Fq(for)20 b(these)h(t)n(w)n(o)f
(quan)n(tities.)h(F)-7 b(or)20 b(the)i(forest)e(\(1\),)374
2304 y(w)n(e)27 b(ha)n(v)n(e)f Fi(n)d Fq(=)g(5)k(and)g
Fi(N)32 b Fq(=)23 b(15.)457 2424 y(W)-7 b(e)31 b(m)n(ust)f(mak)n(e)g
(some)g(assumptions)g(ab)r(out)g(the)h(cost)f(of)h(ev)n(ery)e(op)r
(eration.)h(W)-7 b(e)31 b(ignore)374 2532 y(the)f(cost)f(of)g(function)
h(calls:)f(this)h(sligh)n(tly)f(simpli\014es)h(our)f(computations,)g
(while)h(a\013ecting)374 2640 y(the)j(\014nal)h(result)f(only)g(up)g
(to)h(a)f(constan)n(t)f(factor.)h(Tw)n(o)f(op)r(erations)g(remain)h(to)
g(b)r(e)h(tak)n(en)374 2748 y(in)n(to)28 b(accoun)n(t:)g(mo)r
(di\014cation)g(of)g(the)h Fh(bits)e Fq(arra)n(y)f(and)j(closure)e
(construction.)h(The)g(former)374 2856 y(has)d(constan)n(t)g(cost;)g
(as)g(for)g(the)h(latter,)g(it)g(is)g(reasonable)d(to)j(assume)f(a)g
(constan)n(t)g Fj(amortize)l(d)374 2964 y Fq(cost.)i(W)-7
b(e)28 b(consider)e(b)r(oth)i(as)f(unitary)-7 b(.)457
3085 y(W)g(e)27 b(write)f Fi(F)12 b Fq(\()p Fi(k)s(;)i(f)9
b Fq(\))26 b(for)g(the)h(total)g(cost)f(of)g(applying)h
Fh(enum)p 2347 3085 27 4 v 30 w(forest)d Fq(to)j(a)f(forest)g
Fi(f)35 b Fq(with)27 b(a)374 3192 y(con)n(tin)n(uation)20
b(of)i(cost)f Fi(k)s Fq(.)h(Similarly)-7 b(,)21 b(w)n(e)g(write)g
Fi(T)12 b Fq(\()p Fi(k)s(;)i(t)p Fq(\))21 b(for)g(the)h(cost)g(of)f
(applying)h Fh(enum)p 3163 3192 V 30 w(tree)374 3300
y Fq(to)h(a)h(tree)f Fi(t)h Fq(with)g(a)g(con)n(tin)n(uation)e(of)i
(cost)g Fi(k)s Fq(.)f(F)-7 b(rom)24 b(the)g(co)r(de)f(C1,)h(w)n(e)f
(deriv)n(e)g(the)h(equations)374 3408 y(that)j(go)n(v)n(ern)f(these)i
(quan)n(tities:)1385 3613 y Fi(F)12 b Fq(\()p Fi(k)s(;)i
Fh([])o Fq(\))83 b(=)g Fi(k)1298 b Fq(\(4\))1277 3746
y Fi(F)12 b Fq(\()p Fi(k)s(;)i(t)g Fh(::)f Fi(f)c Fq(\))83
b(=)g(1)18 b(+)g Fi(T)12 b Fq(\()p Fi(F)g Fq(\()p Fi(k)s(;)i(f)9
b Fq(\))p Fi(;)14 b(t)p Fq(\))744 b(\(5\))1225 3878 y
Fi(T)12 b Fq(\()p Fi(k)s(;)i Fh(Node)25 b Fi(f)9 b Fq(\))83
b(=)g(1)18 b(+)g Fi(k)j Fq(+)d Fi(F)12 b Fq(\()p Fi(k)s(;)i(f)9
b Fq(\))789 b(\(6\))374 4083 y(In)30 b(equation)f(\(5\),)i(the)f
(unitary)g(cost)g(corresp)r(onds)e(to)i(closure)f(construction.)g(The)i
(closure)374 4191 y(itself)i(is,)g(b)n(y)f(h)n(yp)r(othesis,)g(a)h(con)
n(tin)n(uation)f(of)g(cost)h Fi(F)12 b Fq(\()p Fi(k)s(;)i(f)9
b Fq(\),)32 b(hence)h(the)g(second)f(term.)h(In)374 4299
y(equation)24 b(\(6\),)i(the)g(unitary)e(cost)h(corresp)r(onds)f(to)h
(up)r(dating)g(the)h(arra)n(y)-7 b(.)23 b(F)-7 b(rom)25
b(these)g(equa-)374 4407 y(tions,)i(it)h(is)g(easy)e(to)i(establish)f
(the)h(follo)n(wing)e(upp)r(er)i(b)r(ounds:)1236 4611
y Fi(F)12 b Fq(\()p Fi(k)s(;)i(f)9 b Fq(\))83 b Fn(\024)g
Fi(N)9 b Fq(\()p Fi(f)g Fq(\))18 b Fn(\002)g Fq(\()p
Fi(k)k Fq(+)c Fi(n)p Fq(\()p Fi(f)9 b Fq(\)\))1261 4744
y Fi(T)j Fq(\()p Fi(k)s(;)i(t)p Fq(\))82 b Fn(\024)h
Fi(N)9 b Fq(\()p Fi(t)p Fq(\))18 b Fn(\002)g Fq(\()p
Fi(k)k Fq(+)c Fi(n)p Fq(\()p Fi(t)p Fq(\)\))h Fn(\000)f
Fq(1)374 4948 y(When)34 b(one)g(applies)f Fh(enum)p 1245
4948 V 30 w(forest)e Fq(to)j(a)g(forest)f Fi(f)42 b Fq(with)35
b(a)e(costless)g(initial)h(con)n(tin)n(uation,)374 5056
y(the)f(upp)r(er)g(b)r(ound)g(simpli\014es)g(to)f Fi(N)9
b Fq(\()p Fi(f)g Fq(\))22 b Fn(\002)f Fi(n)p Fq(\()p
Fi(f)9 b Fq(\).)33 b(Th)n(us,)g(w)n(e)f(conclude)g(that)i(C1)e(has)g
(time)374 5164 y(complexit)n(y)f Fi(O)r Fq(\()p Fi(nN)9
b Fq(\).)32 b(One)f(ma)n(y)g(sho)n(w,)g(in)g(a)g(similar)g(w)n(a)n(y)-7
b(,)31 b(that)g(the)h(n)n(um)n(b)r(er)f(of)h(closures)374
5272 y(built)27 b(during)g(ev)-5 b(aluation)27 b(is)g(b)r(ounded)g(b)n
(y)g Fi(N)9 b Fq(\()p Fi(f)g Fq(\))17 b Fn(\000)h Fq(1)26
b(and)h(th)n(us)g(C1)g(has)g(space)f(complexit)n(y)374
5380 y Fi(O)r Fq(\()p Fi(N)9 b Fq(\).)p eop
%%Page: 951 7
951 6 bop 1576 432 a Fj(F)-6 b(unctional)30 b(p)l(e)l(arl)1079
b Fq(951)452 645 y Fe(let)40 b(rec)g(enum_forest)i(k)d(=)h(function)531
737 y(|)f([])h Fd(!)f Fe(k)531 828 y(|)g(t)g(::)h(f)g
Fd(!)f Fe(enum_tree)i(\(enum_forest)h(k)d(f\))h(t)452
919 y(and)g(enum_tree)h(k)f(\(Node)g(\(i,f\)\))h(=)531
1011 y(let)e(lf)h(=)g(enum_forest)h(k)f(f)f(in)531 1102
y(fun)g(\(\))h Fd(!)609 1193 y Fe(if)g(bits.\(i\))h(=)e(0)h(then)g
(begin)687 1285 y(k)g(\(\);)g(bits.\(i\))h Fd( )e Fe(1;)h(lf)f(\(\))609
1376 y(end)h(else)g(begin)687 1467 y(lf)g(\(\);)g(bits.\(i\))h
Fd( )e Fe(0;)h(k)f(\(\))609 1559 y(end)1371 1758 y Fl(Fig.)26
b(4.)39 b(First)27 b(re\014nemen)n(t)d(\(C2\).)1028 2077
y Fm(3)47 b(First)32 b(re\014nemen)m(t:)e(pre-planning)h(con)m(trol)374
2244 y Fq(This)f(time)g(b)r(ound)h(is)f(not)g(optimal;)g(in)h(fact,)f
(it)g(is)g(easy)g(to)g(see)f(that)i(C1)f(actually)f(rep)r(eats)374
2352 y(some)d(computations)h(man)n(y)g(times.)g(Indeed,)h(ev)n(ery)e
(time)i(a)f(giv)n(en)f(forest)h(is)g(tra)n(v)n(ersed,)e(the)374
2460 y(same)g(con)n(tin)n(uation)g(is)h(built.)g(In)g(example)g(\(1\),)
g Fh(enum)p 2121 2460 27 4 v 30 w(tree)e Fq(is)i(applied)g(three)f
(times)h(to)g(the)374 2568 y(second)f(tree;)g(ev)n(ery)g(time,)h(it)g
(is)g(passed)f(a)h(fresh)f(con)n(tin)n(uation,)g(whose)g(e\013ect)h(is)
g(in)g(fact)g(the)374 2676 y(same)h(\(namely)g(to)h(call)f(the)h
(initial)g(con)n(tin)n(uation\).)457 2788 y(It)37 b(is)f(p)r(ossible,)h
(with)g(a)g(sligh)n(t)f(mo)r(di\014cation)h(to)f(the)h(algorithm,)f(to)
h(factor)f(out)g(these)374 2896 y(rep)r(eated)25 b(allo)r(cations.)g
(The)h(idea)f(is)h(that)g Fh(enum)p 1929 2896 V 30 w(tree)e
Fq(and)i Fh(enum)p 2495 2896 V 30 w(forest)p Fq(,)d(instead)j(of)g(en)n
(u-)374 3004 y(merating)32 b(the)h(colorings)e(immediately)-7
b(,)34 b(should)e(no)n(w)h(return)f(a)h(con)n(tin)n(uation)f(\(that)i
(is,)f(a)374 3112 y(function)25 b(of)g(t)n(yp)r(e)f Fh(unit)42
b Fn(!)i Fh(unit)p Fq(\))23 b(that)i(p)r(erforms)f(the)h(en)n
(umeration)f(when)h(in)n(v)n(ok)n(ed.)e(The)374 3220
y(mo)r(di\014ed)30 b(co)r(de,)g(whic)n(h)h(w)n(e)e(refer)h(to)g(as)g
(C2,)f(is)h(giv)n(en)g(in)g(Figure)g(4.)g(It)g(di\013ers)h(from)e(C1)h
(in)374 3328 y(three)20 b(w)n(a)n(ys.)f(First,)h(when)h
Fh(enum)p 1405 3328 V 29 w(forest)d Fq(is)j(applied)f(to)g(an)g(empt)n
(y)h(forest,)f(it)g(merely)g(returns)374 3436 y(its)29
b(con)n(tin)n(uation)g Fh(k)p Fq(,)g(instead)h(of)f(executing)h(it)g
(immediately)-7 b(.)30 b(Second,)f(when)h(it)g(is)f(applied)374
3544 y(to)j(a)g(non-empt)n(y)g(forest,)g(it)h(immediately)f(in)n(v)n
(ok)n(es)f Fh(enum)p 2271 3544 V 29 w(forest)42 b(k)h(f)p
Fq(,)32 b(whic)n(h)g(returns)g(a)374 3652 y(con)n(tin)n(uation;)c(the)i
(need)g(for)f(an)g(explicit)h(dela)n(y)f(\(that)h(is,)g(a)f
Fi(\025)p Fq(-abstraction\))f(has)h(b)r(een)h(re-)374
3759 y(mo)n(v)n(ed.)d(Lastly)-7 b(,)27 b(and)h(most)g(imp)r(ortan)n
(tly)-7 b(,)27 b Fh(enum)p 1949 3759 V 30 w(tree)f Fq(calls)h
Fh(enum)p 2542 3759 V 30 w(forest)f Fq(only)h(once)h(and)374
3867 y(returns)21 b(a)h(con)n(tin)n(uation.)f(This)h(call)g(to)g
Fh(enum)p 1824 3867 V 30 w(forest)e Fq(is)i(p)r(erformed)g(as)f(so)r
(on)h(as)f Fh(enum)p 3163 3867 V 30 w(tree)374 3975 y
Fq(receiv)n(es)26 b(t)n(w)n(o)h(argumen)n(ts,)f(whic)n(h)h(is)h
(precisely)f(the)h(w)n(a)n(y)e(it)i(is)f(used)h(within)g
Fh(enum)p 3030 3975 V 30 w(forest)p Fq(.)457 4088 y(T)-7
b(o)30 b(run)g(C2)f(on)h(a)g(forest)g Fh(f)p Fq(,)g(one)g(still)g
(applies)g Fh(enum)p 2167 4088 V 30 w(forest)e Fq(to)i
Fh(f)g Fq(with)h(a)f(displa)n(y)f(con-)374 4196 y(tin)n(uation.)d(The)h
(result)g(is)f(no)n(w)g(itself)i(a)e(con)n(tin)n(uation,)g(that)h(m)n
(ust)g(b)r(e)g(in)n(v)n(ok)n(ed)e(in)i(order)f(to)374
4304 y(p)r(erform)h(the)h(actual)f(en)n(umeration,)f(as)h(follo)n(ws:)
461 4520 y Fh(enum_forest)39 b(\(fun)j(\(\))g Fn(!)i
Fh(\(*)f(display)e(current)f(configuration)e(*\)\))43
b(f)g(\(\))457 4732 y Fq(C2)27 b(mak)n(es)h(more)f(in)n(tensiv)n(e)h
(use)g(of)h(higher-order)c(functions)k(than)g(C1:)e(w)n(e)h(no)n(w)g
(emplo)n(y)374 4840 y(functions)39 b(that)g(return)f(functions.)i(The)f
(principle)f(remains)g(the)i(same,)e(though:)h(if)g(the)374
4948 y(function)23 b Fh(k)f Fq(en)n(umerates)f(the)i(colorings)d(of)i
(the)h(forest)f Fh(f0)p Fq(,)g(then)g(the)h(function)g
Fh(enum)p 3076 4948 V 30 w(forest)374 5056 y(k)43 b(f)20
b Fq(\(resp.)h Fh(enum)p 931 5056 V 29 w(tree)42 b(k)h(t)p
Fq(\))21 b(en)n(umerates)f(those)g(of)h(the)g(forest)f
Fh(f)14 b(@)g(f0)20 b Fq(\(resp.)h Fh(t)14 b(::)f(f0)p
Fq(\).)21 b(One)374 5164 y(ma)n(y)e(notice)i(that)f Fh(enum)p
1137 5164 V 30 w(forest)e Fq(and)j Fh(enum)p 1780 5164
V 29 w(tree)e Fq(are)h(no)n(w)g(instances)g(of)g(the)h(generic)e
(\\fold")374 5272 y(functions)j(asso)r(ciated)e(to)h(the)h(data)g(t)n
(yp)r(es)f Fh(tree)f Fq(and)i Fh(forest)p Fq(.)d(Still,)j(for)f(the)h
(sak)n(e)f(of)g(clarit)n(y)-7 b(,)374 5380 y(w)n(e)27
b(prefer)g(to)g(de\014ne)h(them)g(directly)-7 b(.)p eop
%%Page: 952 8
952 7 bop 374 432 a Fq(952)840 b Fj(J.-C.)30 b(Fil)t(li^)-42
b(atr)l(e)31 b(and)g(F.)f(Pottier)374 631 y(Complexity.)43
b Fq(The)21 b(functions)h Fh(enum)p 1541 631 27 4 v 30
w(forest)c Fq(and)k Fh(enum)p 2185 631 V 29 w(tree)e
Fq(no)n(w)h(ha)n(v)n(e)f(three)h(argumen)n(ts.)374 739
y(Applying)26 b(them)i(to)e(one)h(argumen)n(t)e(do)r(es)i(not)f
(trigger)f(an)n(y)h(computation,)h(but)g(the)g(second)374
847 y(and)g(third)h(applications)f(ha)n(v)n(e)f(distinct)i(costs,)f
(whic)n(h)h(m)n(ust)f(b)r(e)h(measured)f(separately)-7
b(.)457 956 y(The)28 b(cost)g(of)g(an)g(application)g(to)g(t)n(w)n(o)g
(argumen)n(ts)f(is)h(easily)g(determined.)g(Indeed,)h(ev)n(ery)374
1064 y(no)r(de)24 b(in)h(the)g(forest)f(at)g(hand)h(is)f(clearly)g(tra)
n(v)n(ersed)e(exactly)i(once;)g(furthermore,)g(tra)n(v)n(ersing)374
1171 y(ev)n(ery)k(no)r(de)i(induces)g(a)g(unit)g(cost,)g(due)g(to)g
(the)g(closure)f(that)h(is)g(built)h(within)f Fh(enum)p
3140 1171 V 30 w(tree)p Fq(.)374 1279 y(Hence,)h(the)g(total)f(cost)g
(is)h(the)g(n)n(um)n(b)r(er)g(of)f(no)r(des,)h Fi(n)p
Fq(.)g(Moreo)n(v)n(er,)d(b)r(ecause)i(only)g(this)h(pre-)374
1387 y(liminary)j(phase)h(allo)r(cates)f(memory)-7 b(,)35
b(w)n(e)f(ma)n(y)h(immediately)g(conclude)g(that)h(C2's)e(space)374
1495 y(complexit)n(y)27 b(is)g Fi(O)r Fq(\()p Fi(n)p
Fq(\).)457 1604 y(The)k(cost)f(of)i(a)e(third)i(application)e(is)h
(measured)f(as)h(in)g(the)h(previous)e(section.)h(W)-7
b(e)31 b(no)n(w)374 1712 y(write)41 b Fi(F)12 b Fq(\()p
Fi(k)s(;)i(f)9 b Fq(\))41 b(\(resp.)g Fi(T)12 b Fq(\()p
Fi(k)s(;)i(t)p Fq(\)\))41 b(for)g(the)h(cost)f(of)g Fj(exe)l(cuting)48
b Fq(the)42 b(function)g Fj(obtaine)l(d)51 b Fq(b)n(y)374
1820 y(in)n(v)n(oking)32 b Fh(enum)p 893 1820 V 30 w(forest)e
Fq(\(resp.)i Fh(enum)p 1629 1820 V 30 w(tree)p Fq(\))f(with)i(a)g(con)n
(tin)n(uation)e(of)i(cost)f Fi(k)s Fq(.)h(F)-7 b(rom)32
b(the)374 1928 y(co)r(de)27 b(C2,)g(w)n(e)g(deriv)n(e)g(the)h(follo)n
(wing)f(equations:)1407 2093 y Fi(F)12 b Fq(\()p Fi(k)s(;)i
Fh([])o Fq(\))83 b(=)g Fi(k)1276 b Fq(\(7\))1299 2225
y Fi(F)12 b Fq(\()p Fi(k)s(;)i(t)g Fh(::)f Fi(f)c Fq(\))83
b(=)g Fi(T)12 b Fq(\()p Fi(F)g Fq(\()p Fi(k)s(;)i(f)9
b Fq(\))p Fi(;)14 b(t)p Fq(\))865 b(\(8\))1247 2358 y
Fi(T)12 b Fq(\()p Fi(k)s(;)i Fh(Node)25 b Fi(f)9 b Fq(\))83
b(=)g(1)18 b(+)g Fi(k)j Fq(+)d Fi(F)12 b Fq(\()p Fi(k)s(;)i(f)9
b Fq(\))767 b(\(9\))374 2523 y(Only)18 b(the)i(second)f(equation)f
(di\013ers)h(from)g(those)g(that)g(describ)r(e)g(C1.)g(Giv)n(en)g
(these)g(equations,)374 2631 y(it)28 b(is)f(straigh)n(tforw)n(ard)e(to)
i(v)n(erify)g(the)h(follo)n(wing)f(iden)n(tities:)1278
2796 y Fi(F)12 b Fq(\()p Fi(k)s(;)i(f)9 b Fq(\))83 b(=)f
Fi(N)9 b Fq(\()p Fi(f)g Fq(\))19 b Fn(\002)f Fq(\()p
Fi(k)j Fq(+)d(1\))h Fn(\000)f Fq(1)1302 2928 y Fi(T)12
b Fq(\()p Fi(k)s(;)i(t)p Fq(\))83 b(=)f Fi(N)9 b Fq(\()p
Fi(t)p Fq(\))19 b Fn(\002)f Fq(\()p Fi(k)k Fq(+)c(1\))g
Fn(\000)g Fq(1)374 3093 y(Applying)24 b Fh(enum)p 911
3093 V 29 w(forest)d Fq(to)h(a)h(forest)f Fh(f)g Fq(with)i(a)e
(costless)g(initial)h(con)n(tin)n(uation)f(has)g(a)g(cost)h(of)374
3201 y Fi(n)p Fq(\()p Fi(f)9 b Fq(\).)20 b(Then,)h(in)n(v)n(oking)e
(the)i(con)n(tin)n(uation)f(th)n(us)g(obtained)g(en)n(tails)g(a)g(cost)
h(of)f Fi(N)9 b Fq(\()p Fi(f)g Fq(\))t Fn(\000)t Fq(1.)20
b(Since)374 3309 y Fi(n)p Fq(\()p Fi(f)9 b Fq(\))23 b
Fn(\024)f Fi(N)9 b Fq(\()p Fi(f)g Fq(\))27 b(holds,)g(w)n(e)g(ma)n(y)f
(conclude)h(that)h(C2)e(has)h(time)h(complexit)n(y)e
Fi(O)r Fq(\()p Fi(N)9 b Fq(\),)29 b(whic)n(h)e(is)374
3417 y(ob)n(viously)d(optimal.)i(The)h(\014rst)f(phase)f(ab)r(o)n(v)n
(e)g(can)h(b)r(e)h(view)n(ed)e(as)h(a)g(\\pre-planning")e(phase,)374
3525 y(whic)n(h)31 b(pro)r(duces)g(a)g(net)n(w)n(ork)f(of)h(con)n(tin)n
(uations.)g(Then,)h(the)f(second)g(phase)g(p)r(erforms)g(the)374
3633 y(actual)c(en)n(umeration,)f(without)i(allo)r(cating)f(an)n(y)g
(new)g(closures.)1053 3922 y Fm(4)47 b(Second)32 b(re\014nemen)m(t:)e
(defunctionalizing)374 4085 y Fq(The)23 b(algorithm)f(giv)n(en)h(in)g
(the)h(previous)e(section)h(has)g(optimal)g(cost.)g(Y)-7
b(et,)24 b(it)g(is)f(still)h(p)r(ossible)374 4193 y(to)j(reap)f(a)h
(small)g(constan)n(t)g(factor.)f(Indeed,)i(w)n(e)f(notice)g(that)g(ev)n
(ery)f(con)n(tin)n(uation)h(built)h(b)n(y)374 4301 y(the)33
b(co)r(de)g(in)g(Figure)g(4)f(con)n(tains)g(calls)h(to)g(unkno)n(wn)f
(functions,)i(namely)e Fh(k)h Fq(and)g Fh(lf)p Fq(.)f(The)374
4408 y(OCaml)18 b(compiler)f(represen)n(ts)g(these)i(functions)g(as)f
Fj(closur)l(es)25 b Fq(con)n(taining)18 b(a)g(co)r(de)g(p)r(oin)n(ter)h
(and)374 4516 y(a)i(data)h(en)n(vironmen)n(t.)g(This)g(ma)n(y)f(incur)h
(a)g(sp)r(eed)h(p)r(enalt)n(y)f(on)g(mo)r(dern)g(pro)r(cessors,)e(b)r
(ecause)374 4624 y(jumps)38 b(to)h(unkno)n(wn)e(addresses)g(often)h
(defeat)h(the)f(branc)n(h)g(prediction)g(unit,)h(causing)e(a)374
4732 y(pip)r(eline)j(stall.)g(One)g(w)n(a)n(y)f(to)h(address)e(this)j
(problem)e(is)h(to)g(replace)f(the)i(branc)n(h)e(to)h(an)374
4840 y(unkno)n(wn)21 b(address)g(with)i(a)e(test,)i(follo)n(w)n(ed)e
(with)h(a)g(branc)n(h)f(to)h(a)g(constan)n(t)f(address.)g(In)h(other)
374 4948 y(w)n(ords,)34 b(w)n(e)h(will)h(no)n(w)e(abandon)h(the)h(use)f
(of)g(higher-order)e(functions.)j(T)-7 b(o)35 b(replace)g(them,)374
5056 y(w)n(e)24 b(will)i(in)n(tro)r(duce)e(a)h(data)g(structure,)g
(together)f(with)h(a)g(\(\014rst-order\))f(function)i
Fh(run)e Fq(whic)n(h)374 5164 y(in)n(terprets)d(its)i(v)-5
b(alues)22 b(as)f(functions.)i(This)f(tec)n(hnique,)g(kno)n(wn)g(as)g
Fj(defunctionalization)p Fq(,)i(w)n(as)374 5272 y(in)n(tro)r(duced)29
b(b)n(y)g(Reynolds)g(three)g(decades)f(ago)g(\(Reynolds,)h(1998a;)e
(Reynolds,)i(1998b\).)f(It)374 5380 y(has)36 b(recen)n(tly)g(receiv)n
(ed)g(some)g(new)h(in)n(terest)f(as)g(a)g(program)f(transformation)g
(\(Dan)n(vy)i(&)p eop
%%Page: 953 9
953 8 bop 1576 432 a Fj(F)-6 b(unctional)30 b(p)l(e)l(arl)1079
b Fq(953)452 645 y Fe(let)40 b(rec)g(enum_forest)i(k)d(=)h(function)531
737 y(|)f([])h Fd(!)f Fe(k)531 828 y(|)g(t)g(::)h(f)g
Fd(!)f Fe(enum_tree)i(\(enum_forest)h(k)d(f\))h(t)452
919 y(and)g(enum_tree)h(k)f(\(Node)g(\(i,f\)\))h(=)531
1011 y(Continue)g(\(i,)e(k,)h(enum_forest)i(k)d(f\))452
1193 y(let)h(rec)g(run)g(=)f(function)531 1285 y(|)g(Display)i
Fd(!)687 1376 y Fe(\(*)f(display)h(current)g(configuration)h(*\))531
1467 y(|)d(Continue)i(\(i,)f(k,)g(lf\))g Fd(!)687 1559
y Fe(if)g(bits.\(i\))h(=)f(0)f(then)h(begin)766 1650
y(run)g(k;)f(bits.\(i\))j Fd( )d Fe(1;)g(run)h(lf)687
1741 y(end)g(else)g(begin)766 1833 y(run)g(lf;)g(bits.\(i\))h
Fd( )e Fe(0;)g(run)h(k)687 1924 y(end)1334 2123 y Fl(Fig.)27
b(5.)39 b(Second)25 b(re\014nemen)n(t)f(\(C3\).)374 2369
y Fq(Nielsen,)29 b(2001\))e(or)h(compilation)h(\(Cejtin)h
Fj(et)g(al.)p Fq(,)h(2000\))c(tec)n(hnique.)i(Indeed,)g(the)h(program)
374 2477 y(transformation)f(whic)n(h)i(w)n(e)g(are)g(ab)r(out)g(to)g
(describ)r(e)g(could)g(b)r(e)h(p)r(erformed)f(automatically)374
2585 y(b)n(y)c(a)g(compiler)g(suc)n(h)g(as)g(MLton)h(\(Cejtin)g
Fj(et)i(al.)p Fq(,)f(2002\).)457 2693 y(It)36 b(is)h(easy)e(to)i
(observ)n(e)d(that)j(ev)n(ery)e(con)n(tin)n(uation)h(manipulated)g(b)n
(y)g(C2)g(is)h(either)f(the)374 2801 y(initial)f(con)n(tin)n(uation)g
(\(whic)n(h)h(displa)n(ys)e(the)i(curren)n(t)f(con\014guration\),)g(or)
f(a)h(con)n(tin)n(uation)374 2909 y(built)28 b(b)n(y)f
Fh(enum_tree)p Fq(,)d(whose)i(co)r(de)i(then)g(consists)e(of)i(the)f
(last)h(six)f(lines)g(of)h(Figure)e(4.)h(The)374 3016
y(initial)k(con)n(tin)n(uation)f(only)g(needs)h(access)f(to)h(the)g
(global)f(arra)n(y)f Fh(bits)p Fq(,)g(so)h(w)n(e)h(will)g(assume)374
3124 y(that)g(it)g(has)g(no)g(free)g(v)-5 b(ariables.)29
b(Con)n(tin)n(uations)h(of)h(the)h(latter)e(kind,)i(on)f(the)g(other)f
(hand,)374 3232 y(ha)n(v)n(e)21 b(three)h(free)g(v)-5
b(ariables,)21 b(namely)h Fh(i)p Fq(,)g Fh(k)g Fq(and)g
Fh(lf)p Fq(.)g(This)g(analysis)f(leads)h(us)h(to)f(the)h(follo)n(wing)
374 3340 y(data)k(t)n(yp)r(e)h(de\014nition:)461 3497
y Fh(type)42 b(continuation)c(=)548 3605 y(|)43 b(Display)548
3712 y(|)g(Continue)d(of)j(int)f Fn(\002)i Fh(continuation)38
b Fn(\002)43 b Fh(continuation)374 3869 y Fq(A)22 b(v)-5
b(alue)23 b(of)f(t)n(yp)r(e)g Fh(continuation)c Fq(con)n(tains)j(a)h
(tag|either)g Fh(Display)d Fq(or)j Fh(Continue)p Fq(|whic)n(h)374
3977 y(e\013ectiv)n(ely)k(pla)n(ys)g(the)h(role)f(of)h(a)f(co)r(de)h(p)
r(oin)n(ter.)g(When)g(the)g(tag)f(is)h Fh(Continue)p
Fq(,)d(it)j(is)g(accom-)374 4085 y(panied)39 b(with)h(v)-5
b(alues)39 b(for)g Fh(i)p Fq(,)g Fh(k)g Fq(and)g Fh(lf)p
Fq(,)g(whic)n(h)g(su\016ce)h(to)f(capture)g(the)h(con)n(tin)n(uation's)
374 4193 y(meaning.)457 4301 y(The)22 b(defunctionalized)h(v)n(ersion)e
(of)i Fh(enum_tree)p Fq(,)c(giv)n(en)j(in)h(Figure)f(5,)h(no)n(w)f
(returns)g(a)g(data)374 4408 y(structure)30 b(of)g(t)n(yp)r(e)h
Fh(continuation)p Fq(,)25 b(instead)31 b(of)f(an)h(actual)f(con)n(tin)n
(uation.)f(T)-7 b(o)30 b(use)h(suc)n(h)f(a)374 4516 y(data)25
b(structure,)g(w)n(e)g(m)n(ust)g(in)n(terpret)g(it)h(as)f(a)g
(function,)h(that)g(is,)f(describ)r(e)g(ho)n(w)g(it)h(is)g(\\run".)374
4624 y(This)f(is)g(the)h(role)e(of)h(the)h(new)f(function)h
Fh(run)p Fq(.)e(The)i(function)g(pro)r(ceeds)e(b)n(y)h(cases,)f
(according)374 4732 y(to)34 b(the)h(con)n(tin)n(uation's)f(tag.)g(If)h
(it)g(is)f Fh(Display)p Fq(,)e(the)j(curren)n(t)f(con\014guration)f(is)
i(displa)n(y)n(ed)374 4840 y(\(co)r(de)24 b(omitted\).)h(If)f(it)h(is)f
Fh(Continue)p Fq(,)d(then)k(suitable)f(v)-5 b(alues)24
b(for)f Fh(i)p Fq(,)h Fh(k)g Fq(and)g Fh(lf)f Fq(are)h(read)f(from)374
4948 y(the)34 b(data)g(structure,)f(and)h(the)h(con)n(tin)n(uation's)e
(co)r(de)h(is)g(executed.)g(It)h(is)f(tak)n(en)f(from)h(the)374
5056 y(last)f(\014v)n(e)g(lines)h(of)f(Figure)g(4,)g(with)h(calls)f(to)
h Fh(k)f Fq(and)g Fh(lf)g Fq(replaced)g(with)h(recursiv)n(e)e(calls)h
(to)374 5164 y Fh(run)p Fq(.)26 b(T)-7 b(o)27 b(run)h(C3)f(on)g(a)g
(forest)g Fh(f)p Fq(,)h(one)f(writes)g Fh(run)42 b(\(enum_forest)d
(Display)i(f\))p Fq(.)457 5272 y(According)30 b(to)i(measuremen)n(ts)e
(p)r(erformed)h(on)h(a)f(n)n(um)n(b)r(er)g(of)h(random)f(forests,)f
(this)i(re-)374 5380 y(\014nemen)n(t)g(yields)g(a)g(p)r(erformance)f
(increase)f(that)j(is)f(consisten)n(tly)f(comprised)g(b)r(et)n(w)n(een)
h(20)p eop
%%Page: 954 10
954 9 bop 374 432 a Fq(954)840 b Fj(J.-C.)30 b(Fil)t(li^)-42
b(atr)l(e)31 b(and)g(F.)f(Pottier)452 645 y Fe(let)40
b(rec)g(enum_forest)i(k)d(=)h(function)531 737 y(|)f([])h
Fd(!)f Fe(k)531 828 y(|)g(t)g(::)h(f)g Fd(!)f Fe(enum_tree)i
(\(enum_forest)h(k)d(f\))h(t)452 919 y(and)g(enum_tree)h(k)f(\(Node)g
(\(i,f\)\))h(=)531 1011 y(ka.\(i\))f Fd( )f Fe(k;)531
1102 y(lfa.\(i\))h Fd( )f Fe(enum_forest)j(k)e(f;)531
1193 y(i)452 1376 y(let)g(rec)g(run)g(=)f(function)531
1467 y(|)g(\(-1\))h Fd(!)687 1559 y Fe(\(*)g(display)h(current)g
(configuration)h(*\))531 1650 y(|)d(i)g Fd(!)687 1741
y Fe(if)h(bits.\(i\))h(=)f(0)f(then)h(begin)766 1833
y(run)g(ka.\(i\);)h(bits.\(i\))g Fd( )e Fe(1;)g(run)h(lfa.\(i\))687
1924 y(end)g(else)g(begin)766 2015 y(run)g(lfa.\(i\);)h(bits.\(i\))g
Fd( )e Fe(0;)h(run)f(ka.\(i\))687 2107 y(end)1378 2306
y Fl(Fig.)27 b(6.)39 b(Last)26 b(re\014nemen)n(t)e(\(C4\).)374
2563 y Fq(and)37 b(30)h(p)r(ercen)n(t.)f(Although)i(this)f(ma)n(y)f(b)r
(e)i(deemed)f(a)f(rather)g(small)h(impro)n(v)n(emen)n(t,)f(w)n(e)374
2671 y(found)31 b(it)h(in)n(teresting,)e(in)i(particular)e(b)r(ecause)h
(this)g(form)n(ulation)g(help)r(ed)h(us)f(disco)n(v)n(er)e(the)374
2779 y(next)e(re\014nemen)n(t.)901 3057 y Fm(5)47 b(Last)33
b(re\014nemen)m(t:)d(using)h(in)m(teger)g(con)m(tin)m(uations)374
3220 y Fq(F)-7 b(rom)21 b(the)h(de\014nition)g(of)f Fh(enum_tree)d
Fq(in)k(Figure)f(5,)g(it)h(is)f(no)n(w)g(clear)g(that)h
Fh(enum_forest)39 b(k)k(f)374 3328 y Fq(allo)r(cates)21
b(exactly)i(one)f Fh(continuation)c Fq(ob)5 b(ject)23
b(for)f(ev)n(ery)g(no)r(de)h(in)g(the)g(forest)g Fh(f)p
Fq(.)f(\(One)h(ma)n(y)374 3436 y(also)28 b(notice)h(that)g(these)h(ob)5
b(jects)28 b(form)h(a)g(directed)g(acylic)g(graph.\))f(So,)h(the)h
(initial)f(con)n(tin-)374 3543 y(uation)h(set)g(aside,)g(con)n(tin)n
(uations)g(are)f(in)i(one-to-one)e(corresp)r(ondence)f(with)j(no)r
(des.)f(This)374 3651 y(prompts)d(us)g(to)h(iden)n(tify)g(the)f(t)n(w)n
(o)g(notions,)g(and|considering)f(no)r(des)h(are)g(n)n(um)n(b)r
(ered|to)374 3759 y(represen)n(t)i(con)n(tin)n(uations)g(as)g(in)n
(tegers.)h(By)g(con)n(v)n(en)n(tion,)f(the)h(in)n(teger)g
Fn(\000)p Fq(1)f(will)i(b)r(e)f(used)h(to)374 3867 y(represen)n(t)26
b(the)i(initial)g(con)n(tin)n(uation.)457 3976 y(What)38
b(b)r(ecomes)h(of)f(the)h(information)f(stored)f(in)i
Fh(Continue)c Fq(ob)5 b(jects?)39 b(The)f(in)n(teger)g
Fh(i)374 4084 y Fq(b)r(ecomes)24 b(redundan)n(t,)g(since)h(it)g(no)n(w)
f Fj(is)32 b Fq(the)25 b(con)n(tin)n(uation.)f(The)g(con)n(tin)n
(uation)g Fh(k)h Fq(\(resp.)f Fh(lf)p Fq(\))374 4191
y(will)33 b(no)n(w)f(b)r(e)i(stored)e(at)h(index)g Fh(i)g
Fq(in)g(a)g(global)f(arra)n(y)e Fh(ka)j Fq(\(resp.)g
Fh(lfa)p Fq(\))f(of)h(size)f Fi(n)p Fq(.)i(Because)374
4299 y(con)n(tin)n(uations)26 b(are)h(no)n(w)g(in)n(tegers,)f
Fh(ka)h Fq(and)g Fh(lfa)g Fq(are)f(arra)n(ys)f(of)j(in)n(tegers.)457
4408 y(The)j(new)h(v)n(ersion)f(of)g Fh(enum_tree)p Fq(,)d(giv)n(en)j
(in)h(Figure)g(6,)f(no)n(w)g(initializes)h(the)g(arra)n(ys)d
Fh(ka)374 4516 y Fq(and)g Fh(lfa)g Fq(instead)g(of)h(allo)r(cating)f
(con)n(tin)n(uations,)f(and)i(returns)f Fh(i)g Fq(itself)h(instead)g
(of)f(a)h(fresh)374 4624 y Fh(Continue)17 b Fq(ob)5 b(ject.)20
b(The)h(algorithm's)e(asymptotic)i(space)e(complexit)n(y)h(remains)g
(unc)n(hanged,)374 4731 y(but)j(a)f(constan)n(t)g(factor)g(is)h(sa)n(v)
n(ed,)e(whose)h(exact)g(amoun)n(t)g(dep)r(ends)h(on)g(the)g(run)n(time)
g(system.)457 4840 y(In)29 b Fh(run)p Fq(,)f(the)i(initial)f(con)n(tin)
n(uation)g(is)g(no)n(w)g(distinguished)g(b)n(y)g(the)h(sp)r(ecial)f(v)
-5 b(alue)29 b Fn(\000)p Fq(1.)f(In)374 4948 y(the)34
b(general)f(case,)g Fh(i)h Fq(stands)f(for)h(a)f(no)r(de)h(n)n(um)n(b)r
(er,)g(and)g(the)h(t)n(w)n(o)e(con)n(tin)n(uation)g(no)r(des)h
Fh(k)374 5056 y Fq(and)25 b Fh(lf)g Fq(are)g(obtained)h(b)n(y)f(lo)r
(oking)g(up)h(the)g(arra)n(ys)e Fh(ka)h Fq(and)g Fh(lfa)g
Fq(at)h(index)g Fh(i)p Fq(.)f(T)-7 b(o)26 b(run)f(C4)h(on)374
5164 y(a)h(forest)g Fh(f)p Fq(,)g(one)g(writes)g Fh(run)43
b(\(enum_forest)38 b(\(-1\))k(f\))p Fq(.)457 5272 y(According)30
b(to)i(measuremen)n(ts)e(p)r(erformed)h(on)h(a)f(n)n(um)n(b)r(er)g(of)h
(random)f(forests,)f(this)i(re-)374 5380 y(\014nemen)n(t)k(yields)g(a)g
(p)r(erformance)f(increase)g(that)i(is)f(consisten)n(tly)f(comprised)h
(b)r(et)n(w)n(een)g(0)p eop
%%Page: 955 11
955 10 bop 1576 432 a Fj(F)-6 b(unctional)30 b(p)l(e)l(arl)1079
b Fq(955)374 631 y(and)33 b(10)g(p)r(ercen)n(t.)h(This)f(is)h(a)f
(minor)h(impro)n(v)n(emen)n(t,)e(but)j(w)n(e)e(b)r(eliev)n(e)h(this)g
(form)n(ulation)f(is)374 739 y(nev)n(ertheless)26 b(in)n(teresting,)h
(for)h(t)n(w)n(o)f(reasons.)f(First,)i(it)g(is)g(amenable)f(to)g(a)h(v)
n(ery)e(simple)i(im-)374 847 y(plemen)n(tation)34 b(in)i(a)e(lo)n
(w-lev)n(el)g(language)f(suc)n(h)i(as)f(C.)i(All)f(storage)e(is)i(allo)
r(cated)f(in)i(three)374 955 y(global)28 b(arra)n(ys,)f(requiring)i(no)
g(dynamic)g(allo)r(cation.)g(Second,)h(it)g(sheds)f(some)g(ligh)n(t)h
(on)f(the)374 1063 y(algorithm's)f(structure.)h(Since)g(a)g(con)n(tin)n
(uation)g(is)g(no)n(w)g(either)g(a)g(no)r(de)h(or)f Fn(\000)p
Fq(1,)f(the)i(arra)n(ys)374 1171 y Fh(ka)22 b Fq(and)h
Fh(lfa)f Fq(can)h(b)r(e)h(view)n(ed)e(as)h(partial)f(mappings)h(from)g
(no)r(des)g(to)g(no)r(des.)g(One)g(ma)n(y)f(c)n(hec)n(k)374
1279 y(that)27 b(they)h(are)f(initialized)h(b)n(y)f Fh(enum_forest)c
Fq(and)28 b Fh(enum_tree)c Fq(as)i(follo)n(ws:)498 1479
y Fn(\017)41 b Fq(If)28 b Fh(i)f Fq(is)h(the)g(ro)r(ot)f(of)g(the)h
(left-most)g(tree)f(in)h(the)g(forest,)f(then)h Fh(ka.\(i\))d
Fq(is)j Fn(\000)p Fq(1;)498 1599 y Fn(\017)41 b Fq(if)28
b Fh(i)g Fq(has)f(a)g(left)h(sibling)f Fh(j)h Fq(in)g(the)g(forest,)f
(then)h Fh(ka.\(i\))d Fq(is)i Fh(j)p Fq(;)498 1719 y
Fn(\017)41 b Fq(otherwise,)27 b Fh(i)g Fq(m)n(ust)h(ha)n(v)n(e)e(a)h
(paren)n(t)g Fh(j)h Fq(in)f(the)h(forest,)f(and)h Fh(ka.\(i\))d
Fq(is)j Fh(ka.\(j\))p Fq(.)498 1839 y Fn(\017)41 b Fq(If)28
b Fh(i)f Fq(has)g(a)h(c)n(hild)f(in)h(the)g(forest,)f(then)h
Fh(lfa.\(i\))d Fq(is)j(its)f(righ)n(t-most)g(c)n(hild;)498
1958 y Fn(\017)41 b Fq(otherwise,)27 b Fh(lfa.\(i\))e
Fq(is)i Fh(ka.\(i\))p Fq(.)457 2159 y(This)35 b(v)n(ersion)e(of)i(the)h
(algorithm)e(b)r(ears)g(a)h(rather)f(strong)g(resem)n(blance)g(with)i
(Kn)n(uth's)374 2267 y(coroutine-based)30 b(algorithm)i(\(Kn)n(uth,)g
(2001a\).)f(Indeed,)i(Kn)n(uth's)f(algorithm)f(de\014nes)i(ex-)374
2375 y(actly)k(one)f(coroutine)h(p)r(er)g(no)r(de,)g(and)h(relies)e(on)
h(tables)g(whic)n(h)h(map)f(ev)n(ery)f(no)r(de)h(to)g(its)374
2483 y(left)31 b(sibling)f(and)h(to)f(its)h(righ)n(t-most)e(c)n(hild,)i
(if)g(de\014ned.)g(Ho)n(w)n(ev)n(er,)e(Kn)n(uth's)h(approac)n(h)f(has)
374 2591 y(an)24 b(inheren)n(t)h(de\014ciency:)g(coroutines)e(signal)h
(completion)h(b)n(y)f(returning,)g(whic)n(h)h(ma)n(y)f(cause)374
2699 y(the)i(whole)g(call)g(stac)n(k)f(to)i(b)r(e)f(un)n(w)n(ound,)g
(whereas)f(they)i(do)f(so,)f(in)i(our)f(case,)f(b)n(y)h(in)n(v)n(oking)
f(a)374 2807 y(con)n(tin)n(uation.)20 b(Th)n(us,)h(as)f(recognized)g(b)
n(y)h(Kn)n(uth,)g(his)g(algorithm)f(ma)n(y)h(ha)n(v)n(e)f
(asymptotically)374 2915 y(w)n(orse)30 b(b)r(eha)n(vior)g(in)i(some)g
(cases.)f(It)h(is)g(notew)n(orth)n(y)e(that)i(our)f(approac)n(h)f
(naturally)h(leads)374 3022 y(to)f(an)h(algorithm)f(that)h(is)g(sup)r
(er\014cially)f(similar)g(to)h(Kn)n(uth's,)g(but)g(easier)f(to)h
(understand,)374 3130 y(and)c(more)g(e\016cien)n(t.)457
3242 y(Kn)n(uth's)c(\\lo)r(opless")e(algorithm,)i(whic)n(h)g(app)r
(ears)f(similar)h(to)g(Ko)r(da)f(and)i(Rusk)n(ey's)e(origi-)374
3350 y(nal)e(description)h(\(Ko)r(da)f(&)g(Rusk)n(ey)-7
b(,)21 b(1993\),)e(addresses)g(this)i(de\014ciency)g(b)n(y)g(using)f(a)
h(m)n(utable)374 3458 y(data)f(structure)g(that)h(is)g(signi\014can)n
(tly)f(more)g(complex.)g(The)h(next)g(section)f(compares)g(it)h(with)
374 3566 y(ours.)1315 3916 y Fm(6)47 b(P)m(erformance)32
b(assessmen)m(t)374 4081 y Fq(W)-7 b(e)34 b(no)n(w)f(compare)f(C4,)h(p)
r(erformance-wise,)f(with)i(Kn)n(uth's)g(\\lo)r(opless")d(implemen)n
(tation)374 4189 y(L.)23 b(Both)h(w)n(ere)e(compiled)i(to)f(x86)g(mac)n
(hine)g(co)r(de,)h(using)f(the)h(nativ)n(e)f(OCaml)g(compiler)g(with)
374 4297 y(arra)n(y)j(b)r(ounds)j(c)n(hec)n(king)f(turned)g(o\013,)h
(and)g Fh(gcc)42 b(-O2)p Fq(,)28 b(resp)r(ectiv)n(ely)-7
b(.)28 b(\(W)-7 b(e)30 b(ha)n(v)n(e)d(also)h(hand-)374
4405 y(translated)35 b(C4)h(to)h(C)f(co)r(de,)h(with)g(no)f(noticeable)
g(time)h(di\013erence)f(with)h(resp)r(ect)g(to)f(the)374
4513 y(OCaml)26 b(co)r(de.\))h(L)h(implemen)n(ts)f(Ko)r(da)f(and)h
(Rusk)n(ey's)g(more)f(e\016cien)n(t)h(algorithm,)f(whic)n(h)i(is)374
4621 y(lo)r(opless,)f(that)h(is,)g(p)r(erforms)f(a)g(constan)n(t)h
(amoun)n(t)f(of)h(computation)g(b)r(et)n(w)n(een)f(t)n(w)n(o)h(consec-)
374 4729 y(utiv)n(e)g(colorings.)e(Our)i(implemen)n(tation)g(is)g(not)h
(lo)r(opless,)e(but)i(has)f(the)g(same)g(o)n(v)n(erall)e(time)374
4837 y(complexit)n(y)-7 b(,)27 b(namely)g Fi(O)r Fq(\()p
Fi(N)9 b Fq(\).)457 4948 y(In)29 b(practice,)f(the)i(t)n(w)n(o)e
(implemen)n(tations)h(seem)f(to)h(ha)n(v)n(e)f(v)n(ery)g(similar)g(p)r
(erformance,)g(as)374 5056 y(suggested)22 b(b)n(y)h(the)h(follo)n(wing)
f(graph.)f(Ev)n(ery)g(data)h(p)r(oin)n(t)h(sho)n(ws)e(the)i(ratio)f(of)
g(their)h(running)374 5164 y(times)31 b(\(that)h(is,)f(C4's)g(divided)h
(b)n(y)f(L's\))g(for)g(a)g(random)f(forest)h(\(with)h(30)c
Fn(\024)h Fi(n)g(<)g Fq(45\).)h(The)374 5272 y(graph)36
b(has)i(three)f(h)n(undred)h(data)f(p)r(oin)n(ts.)h(W)-7
b(e)38 b(ha)n(v)n(e)f(v)n(eri\014ed)g(that)h(this)g(ratio)f(do)r(es)g
(not)374 5380 y(app)r(ear)26 b(to)i(b)r(e)g(correlated)e(with)i
Fi(n)f Fq(or)g Fi(N)9 b Fq(.)p eop
%%Page: 956 12
956 11 bop 374 432 a Fq(956)840 b Fj(J.-C.)30 b(Fil)t(li^)-42
b(atr)l(e)31 b(and)g(F.)f(Pottier)374 938 y @beginspecial
50 @llx 50 @lly 410 @urx 100 @ury 3586 @rwi @setspecial
%%BeginDocument: graph.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: ../journal/graph.eps
%%Creator: gnuplot 3.7 patchlevel 1
%%CreationDate: Mon Feb 11 14:27:20 2002
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 410 100
%%Orientation: Portrait
%%EndComments
/gnudict 256 dict def
gnudict begin
/Color false def
/Solid true def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
/vshift -46 def
/dl {10 mul} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/UP { dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke userlinewidth 2 mul setlinewidth } def
/AL { stroke userlinewidth 2 div setlinewidth } def
/UL { dup gnulinewidth mul /userlinewidth exch def
      10 mul /udl exch def } def
/PL { stroke userlinewidth setlinewidth } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 udl mul 2 udl mul] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 1 0 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 1 0 DL } def
/LT2 { PL [2 dl 3 dl] 0 0 1 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/Pnt { stroke [] 0 setdash
   gsave 1 setlinecap M 0 0 V stroke grestore } def
/Dia { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt } def
/Pls { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/Box { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt } def
/Crs { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/TriU { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt  } def
/Star { 2 copy Pls Crs } def
/BoxF { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V  hpt2 0 V  0 vpt2 V
  hpt2 neg 0 V  closepath fill } def
/TriUF { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill } def
/TriD { stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt  } def
/TriDF { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill } def
/Pent { stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt } def
/PentF { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore } def
/Circle { stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt } def
/CircleF { stroke [] 0 setdash hpt 0 360 arc fill } def
/C0 { BL [] 0 setdash 2 copy moveto vpt 90 450  arc } bind def
/C1 { BL [] 0 setdash 2 copy        moveto
       2 copy  vpt 0 90 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C2 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C3 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C4 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C5 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 90 arc
       2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc } bind def
/C6 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 90 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C7 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 0 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C8 { BL [] 0 setdash 2 copy moveto
      2 copy vpt 270 360 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C9 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 270 450 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C10 { BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
       2 copy moveto
       2 copy vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C11 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
       2 copy moveto
       2 copy  vpt 270 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C12 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C13 { BL [] 0 setdash  2 copy moveto
       2 copy  vpt 0 90 arc closepath fill
       2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C14 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 360 arc closepath fill
               vpt 0 360 arc } bind def
/C15 { BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/Rec   { newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
       neg 0 rlineto closepath } bind def
/Square { dup Rec } bind def
/Bsquare { vpt sub exch vpt sub exch vpt2 Square } bind def
/S0 { BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare } bind def
/S1 { BL [] 0 setdash 2 copy vpt Square fill Bsquare } bind def
/S2 { BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S3 { BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare } bind def
/S4 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S5 { BL [] 0 setdash 2 copy 2 copy vpt Square fill
       exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S6 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S7 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
       2 copy vpt Square fill
       Bsquare } bind def
/S8 { BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare } bind def
/S9 { BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S10 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
       Bsquare } bind def
/S11 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
       Bsquare } bind def
/S12 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare } bind def
/S13 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy vpt Square fill Bsquare } bind def
/S14 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S15 { BL [] 0 setdash 2 copy Bsquare fill Bsquare } bind def
/D0 { gsave translate 45 rotate 0 0 S0 stroke grestore } bind def
/D1 { gsave translate 45 rotate 0 0 S1 stroke grestore } bind def
/D2 { gsave translate 45 rotate 0 0 S2 stroke grestore } bind def
/D3 { gsave translate 45 rotate 0 0 S3 stroke grestore } bind def
/D4 { gsave translate 45 rotate 0 0 S4 stroke grestore } bind def
/D5 { gsave translate 45 rotate 0 0 S5 stroke grestore } bind def
/D6 { gsave translate 45 rotate 0 0 S6 stroke grestore } bind def
/D7 { gsave translate 45 rotate 0 0 S7 stroke grestore } bind def
/D8 { gsave translate 45 rotate 0 0 S8 stroke grestore } bind def
/D9 { gsave translate 45 rotate 0 0 S9 stroke grestore } bind def
/D10 { gsave translate 45 rotate 0 0 S10 stroke grestore } bind def
/D11 { gsave translate 45 rotate 0 0 S11 stroke grestore } bind def
/D12 { gsave translate 45 rotate 0 0 S12 stroke grestore } bind def
/D13 { gsave translate 45 rotate 0 0 S13 stroke grestore } bind def
/D14 { gsave translate 45 rotate 0 0 S14 stroke grestore } bind def
/D15 { gsave translate 45 rotate 0 0 S15 stroke grestore } bind def
/DiaE { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke } def
/BoxE { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke } def
/TriUE { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke } def
/TriDE { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke } def
/PentE { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore } def
/CircE { stroke [] 0 setdash 
  hpt 0 360 arc stroke } def
/Opaque { gsave closepath 1 setgray fill grestore 0 setgray closepath } def
/DiaW { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke } def
/BoxW { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke } def
/TriUW { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke } def
/TriDW { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke } def
/PentW { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore } def
/CircW { stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke } def
/BoxFill { gsave Rec 1 setgray fill grestore } def
end
%%EndProlog
gnudict begin
gsave
50 50 translate
0.050 0.050 scale
0 setgray
newpath
(Helvetica) findfont 140 scalefont setfont
1.000 UL
LTb
238 280 M
0 63 V
0 -203 R
(0.7) Cshow
1199 280 M
0 63 V
0 -203 R
(0.8) Cshow
2159 280 M
0 63 V
0 -203 R
(0.9) Cshow
3120 280 M
0 63 V
0 -203 R
(1) Cshow
4080 280 M
0 63 V
0 -203 R
(1.1) Cshow
5041 280 M
0 63 V
0 -203 R
(1.2) Cshow
6001 280 M
0 63 V
0 -203 R
(1.3) Cshow
6962 280 M
0 63 V
0 -203 R
(1.4) Cshow
1.000 UL
LTb
238 280 M
6724 0 V
0 560 R
238 840 M
0 -560 R
1.000 UP
1.000 UL
LT0
5254 560 Pls
3993 560 Pls
1867 560 Pls
3600 560 Pls
2777 560 Pls
3859 560 Pls
3120 560 Pls
4149 560 Pls
3120 560 Pls
5864 560 Pls
4080 560 Pls
4807 560 Pls
3920 560 Pls
5739 560 Pls
3993 560 Pls
2586 560 Pls
4492 560 Pls
3120 560 Pls
3120 560 Pls
4921 560 Pls
4218 560 Pls
1919 560 Pls
6075 560 Pls
3760 560 Pls
2639 560 Pls
2028 560 Pls
3496 560 Pls
4272 560 Pls
3859 560 Pls
2764 560 Pls
1026 560 Pls
2639 560 Pls
4080 560 Pls
3760 560 Pls
3967 560 Pls
3120 560 Pls
2091 560 Pls
2820 560 Pls
4532 560 Pls
6461 560 Pls
2639 560 Pls
2662 560 Pls
2381 560 Pls
3120 560 Pls
5178 560 Pls
3708 560 Pls
2735 560 Pls
1848 560 Pls
2841 560 Pls
3387 560 Pls
2739 560 Pls
4932 560 Pls
1990 560 Pls
4080 560 Pls
2091 560 Pls
3324 560 Pls
3229 560 Pls
3556 560 Pls
3955 560 Pls
4430 560 Pls
2887 560 Pls
2891 560 Pls
3790 560 Pls
3411 560 Pls
1590 560 Pls
3904 560 Pls
3420 560 Pls
3120 560 Pls
3840 560 Pls
4540 560 Pls
1075 560 Pls
3432 560 Pls
4657 560 Pls
3760 560 Pls
3120 560 Pls
2246 560 Pls
3195 560 Pls
4602 560 Pls
2586 560 Pls
3120 560 Pls
5521 560 Pls
4899 560 Pls
5635 560 Pls
5157 560 Pls
2457 560 Pls
2683 560 Pls
2069 560 Pls
3818 560 Pls
3513 560 Pls
2555 560 Pls
2194 560 Pls
2865 560 Pls
4763 560 Pls
3916 560 Pls
2837 560 Pls
2542 560 Pls
3591 560 Pls
2280 560 Pls
2773 560 Pls
2190 560 Pls
2683 560 Pls
2219 560 Pls
2381 560 Pls
3120 560 Pls
2563 560 Pls
3120 560 Pls
2983 560 Pls
2295 560 Pls
2752 560 Pls
2932 560 Pls
3005 560 Pls
2646 560 Pls
3358 560 Pls
4027 560 Pls
3607 560 Pls
3362 560 Pls
2159 560 Pls
3782 560 Pls
2823 560 Pls
4991 560 Pls
2371 560 Pls
3272 560 Pls
4889 560 Pls
2961 560 Pls
6451 560 Pls
3257 560 Pls
5648 560 Pls
3137 560 Pls
3011 560 Pls
4700 560 Pls
5653 560 Pls
3410 560 Pls
2735 560 Pls
2697 560 Pls
3218 560 Pls
4241 560 Pls
4391 560 Pls
2881 560 Pls
4820 560 Pls
2795 560 Pls
4159 560 Pls
3993 560 Pls
2180 560 Pls
3515 560 Pls
3202 560 Pls
4116 560 Pls
2395 560 Pls
2567 560 Pls
3895 560 Pls
4222 560 Pls
3216 560 Pls
3778 560 Pls
2762 560 Pls
3336 560 Pls
2630 560 Pls
4353 560 Pls
3188 560 Pls
2403 560 Pls
1995 560 Pls
2702 560 Pls
1878 560 Pls
4066 560 Pls
2393 560 Pls
3343 560 Pls
3306 560 Pls
3479 560 Pls
1909 560 Pls
3372 560 Pls
2781 560 Pls
1919 560 Pls
2954 560 Pls
3161 560 Pls
4068 560 Pls
3095 560 Pls
5405 560 Pls
2989 560 Pls
2314 560 Pls
3551 560 Pls
3286 560 Pls
3453 560 Pls
4364 560 Pls
2624 560 Pls
3944 560 Pls
3668 560 Pls
3571 560 Pls
2236 560 Pls
5235 560 Pls
5346 560 Pls
3775 560 Pls
2776 560 Pls
3606 560 Pls
3497 560 Pls
2978 560 Pls
2640 560 Pls
1398 560 Pls
2596 560 Pls
3255 560 Pls
2744 560 Pls
3060 560 Pls
3966 560 Pls
4028 560 Pls
2198 560 Pls
2633 560 Pls
3029 560 Pls
4878 560 Pls
2267 560 Pls
3166 560 Pls
2873 560 Pls
3469 560 Pls
3516 560 Pls
3498 560 Pls
2206 560 Pls
3213 560 Pls
3455 560 Pls
2920 560 Pls
811 560 Pls
2571 560 Pls
5678 560 Pls
3994 560 Pls
2441 560 Pls
2448 560 Pls
3308 560 Pls
6254 560 Pls
3686 560 Pls
2046 560 Pls
3327 560 Pls
2757 560 Pls
1789 560 Pls
3998 560 Pls
1843 560 Pls
2077 560 Pls
3310 560 Pls
3569 560 Pls
2326 560 Pls
2818 560 Pls
2728 560 Pls
4647 560 Pls
4457 560 Pls
1194 560 Pls
4958 560 Pls
4518 560 Pls
3436 560 Pls
3879 560 Pls
3846 560 Pls
2755 560 Pls
2848 560 Pls
4201 560 Pls
2258 560 Pls
3517 560 Pls
2978 560 Pls
3573 560 Pls
1205 560 Pls
1042 560 Pls
3224 560 Pls
4678 560 Pls
2757 560 Pls
3334 560 Pls
3572 560 Pls
2953 560 Pls
3667 560 Pls
2329 560 Pls
1867 560 Pls
4247 560 Pls
2349 560 Pls
4002 560 Pls
3481 560 Pls
2769 560 Pls
3743 560 Pls
2134 560 Pls
3528 560 Pls
3759 560 Pls
4995 560 Pls
3482 560 Pls
2876 560 Pls
4696 560 Pls
3681 560 Pls
2717 560 Pls
4354 560 Pls
2970 560 Pls
2685 560 Pls
3334 560 Pls
3312 560 Pls
3901 560 Pls
3475 560 Pls
1867 560 Pls
3223 560 Pls
4776 560 Pls
863 560 Pls
stroke
grestore
end
showpage
%%Trailer
%%DocumentFonts: Helvetica

%%EndDocument
 @endspecial 172 x Fq(These)k(measuremen)n(ts)f(re\015ect)h(the)h(time)
g(necessary)d(to)j Fj(pr)l(o)l(duc)l(e)41 b Fq(the)35
b(Gra)n(y)e(co)r(de)h(only|)374 1218 y(nothing)27 b(w)n(as)g(displa)n
(y)n(ed.)g(In)h(a)g(realistic)f(application,)g(ev)n(ery)g(coloring)f(w)
n(ould)i(b)r(e)g Fj(exploite)l(d)374 1325 y Fq(for)c(some)g(purp)r(ose)
h(b)r(efore)g(pro)r(ducing)f(the)h(next)h(coloring,)d(so)h(the)i(p)r
(erformance)e(di\013erence)374 1433 y(b)r(et)n(w)n(een)36
b(the)h(t)n(w)n(o)f(implemen)n(tations)g(w)n(ould)g(b)r(e)h(ev)n(en)f
(less)g(noticeable.)g(In)g(ligh)n(t)h(of)f(this)374 1541
y(remark,)g(w)n(e)h(b)r(eliev)n(e)g(it)h(is)g(safe)f(to)g(claim)h(that)
f(the)h(t)n(w)n(o)f(implemen)n(tations)h(are)e(equally)374
1649 y(e\016cien)n(t.)457 1758 y(Our)29 b(co)r(de)g(is)h(a)n(v)-5
b(ailable)28 b(electronically)h(\(Filli^)-42 b(atre)29
b(&)h(P)n(ottier,)e(2002\);)h(it)h(is)f(functionally)374
1866 y(equiv)-5 b(alen)n(t)27 b(to)g(Kn)n(uth's)h(\(Kn)n(uth,)g
(2001a\).)1592 2156 y Fm(7)47 b(Conclusion)374 2318 y
Fq(W)-7 b(e)23 b(ha)n(v)n(e)f(prop)r(osed)h(a)g(functional,)g
(higher-order)e(implemen)n(tation)i(of)h(Ko)r(da)e(and)h(Rusk)n(ey's)
374 2426 y(algorithm.)h(F)-7 b(rom)24 b(it,)i(w)n(e)f(ha)n(v)n(e)e
(deriv)n(ed)i(a)f(\014rst-order)g(v)n(ersion)f(whose)i(e\016ciency)g
(is)f(compa-)374 2534 y(rable)i(to)i(Kn)n(uth's)f(C)h(implemen)n
(tation.)457 2643 y(One)23 b(k)n(ey)g(adv)-5 b(an)n(tage)22
b(of)h(our)g(con)n(tin)n(uation-based)e(form)n(ulation)i(\(C2\))g(is)h
(to)f(b)r(e)h(amenable)374 2751 y(to)e(formal)g(pro)r(of.)h(It)g(is)g
(p)r(ossible)f(to)h(giv)n(e)f(reasonably)f(simple)i(sp)r
(eci\014cations)f(for)g Fh(enum)p 3163 2751 27 4 v 30
w(tree)374 2859 y Fq(and)31 b Fh(enum)p 720 2859 V 29
w(forest)p Fq(.)e(Because)h(these)i(functions)f(m)n(ust)g(en)n(umerate)
g(colorings)e(in)i(either)h(di-)374 2967 y(rection,)i(this)i(requires)e
(c)n(haracterizing)f(the)j(\014nal)g(coloring)d(of)j(the)g(Gra)n(y)e
(co)r(de)h(sequence)374 3075 y(asso)r(ciated)25 b(with)j(a)e(giv)n(en)g
(forest.)h(This)g(can)f(b)r(e)h(done)g(inductiv)n(ely)g(o)n(v)n(er)e
(trees)h(and)h(forests.)374 3183 y(As)21 b(a)f(result,)h(the)h
(formalization)d(is)i(rather)f(straigh)n(tforw)n(ard)f(to)h(conduct)i
(within)f(a)g(pro)r(of)f(as-)374 3291 y(sistan)n(t)h(suc)n(h)h(as)f(Co)
r(q)g(\(Barras)f Fj(et)25 b(al.)p Fq(,)e(2002\).)d(W)-7
b(e)22 b(are)f(curren)n(tly)g(in)i(the)f(pro)r(cess)f(of)g(carrying)374
3398 y(out)27 b(suc)n(h)g(a)h(task.)1644 3688 y Fm(References)374
3834 y Fl(Barras,)36 b(Bruno,)f(Herb)r(elin,)g(Hugo,)g
Fc(et)h(al.)f Fl(.)g(\(2002\).)63 b Fc(The)36 b(Co)l(q)g(Pr)l(o)l(of)g
(Assistant)p Fl(.)63 b Fs(URL:)31 b Fk(http:)450 3925
y(//coq.inria.fr/)p Fl(.)374 4034 y(Cejtin,)k(Henry)-6
b(,)34 b(Jagannathan,)i(Suresh,)e(&)g(W)-6 b(eeks,)35
b(Stephen.)f(\(2000\).)62 b(Flo)n(w-directed)35 b(closure)450
4125 y(con)n(v)n(ersion)28 b(for)f(t)n(yp)r(ed)f(languages.)40
b Fc(Pages)30 b(56{71)g(of:)c Fl(Smolk)l(a,)g(Gert)h(\(ed\),)g
Fc(Pr)l(o)l(c)l(e)l(e)l(dings)k(of)d(the)450 4216 y(2000)34
b(Eur)l(op)l(e)l(an)g(Symp)l(osium)e(on)h(Pr)l(o)l(gr)l(amming)g
(\(ESOP'00\))p Fl(.)51 b(Lecture)31 b(Notes)g(in)g(Computer)450
4308 y(Science,)k(v)n(ol.)g(1782.)63 b(Springer)34 b(V)-6
b(erlag.)62 b Fs(URL:)31 b Fk(http://www.sourcelight.)q(com/)q(MLt)q
(on/p)q(ape)q(rs/)450 4399 y(00-)t(esop.ps.gz)p Fl(.)374
4507 y(Cejtin,)36 b(Henry)-6 b(,)33 b(Fluet,)j(Matthew,)g(Jagannathan,)
g(Suresh,)e(&)h(W)-6 b(eeks,)35 b(Stephen.)f(\(2002\).)63
b Fc(The)450 4599 y(MLton)29 b(Standar)l(d)g(ML)e(Compiler)p
Fl(.)34 b Fs(URL:)23 b Fk(http://www.mlton.org/)p Fl(.)374
4707 y(Dan)n(vy)-6 b(,)24 b(Olivier,)i(&)g(Nielsen,)g(Lasse)h(R.)f
(2001)h(\(Sept.\).)34 b(Defunctionalization)28 b(at)e(w)n(ork.)34
b Fc(Thir)l(d)28 b(In-)450 4798 y(ternational)h(Confer)l(enc)l(e)f(on)g
(Principles)f(and)g(Pr)l(actic)l(e)i(of)e(De)l(clar)l(ative)h(Pr)l(o)l
(gr)l(amming)g(\(PPDP)450 4889 y(2001\))p Fl(.)34 b(Also)26
b(a)n(v)l(ailable)g(as)f(BRICS)f(Researc)n(h)h(Rep)r(ort)g(RS-01-23.)g
Fs(URL:)d Fk(http://www.brics.dk/)450 4981 y(RS/01/23/BRICS-)t(RS-)t
(01-)5 b(23.)q(ps.)q(gz)p Fl(.)374 5089 y(Filli^)-38
b(atre,)30 b(Jean-Christophe,)e(&)g(P)n(ottier,)h(F)-6
b(ran\030)-34 b(cois.)29 b(2002)g(\(F)-6 b(eb.\).)40
b Fc(F)-6 b(unctional)31 b(implementations)450 5180 y(of)d(Ko)l(da)g
(and)g(R)n(uskey's)g(algorithm)p Fl(.)35 b Fs(URL:)23
b Fk(http://www.lri.fr/~fil)q(liat)q(r/s)q(oftw)q(are)q(.en.)q(html)q
Fl(.)374 5289 y(Kn)n(uth,)32 b(Donald)i(E.)h(2001a)h(\(June\).)58
b Fc(A)n(n)36 b(implementation)f(of)g(Ko)l(da)h(and)f(R)n(uskey's)h
(algorithm)p Fl(.)450 5380 y Fs(URL:)23 b Fk(http://www-)t(cs-)t
(staff.s)q(tan)q(ford)q(.edu)q(/~k)q(nuth)q(/pr)q(ogra)q(ms.)q(html)q
Fl(.)p eop
%%Page: 957 13
957 12 bop 1576 432 a Fj(F)-6 b(unctional)30 b(p)l(e)l(arl)1079
b Fq(957)374 631 y Fl(Kn)n(uth,)35 b(Donald)h(E.)h(\(2001b\).)68
b Fc(The)38 b(A)n(rt)g(of)f(Computer)i(Pr)l(o)l(gr)l(amming)p
Fl(.)68 b(V)-6 b(ol.)37 b(4,)g(Pre-F)-6 b(ascicle)450
722 y(2a:)35 b(A)e(Draft)i(of)f(Section)g(7.2.1.1:)j(Generating)d(all)h
Fb(n)p Fl(-tuples.)58 b(Addison-W)-6 b(esley)g(.)57 b(Circulated)450
814 y(electronically)-6 b(.)28 b Fs(URL:)23 b Fk(http://www-)t(cs-)t
(staff.sta)q(nfor)q(d.e)q(du/~)q(knu)q(th/n)q(ews)q(.htm)q(l)p
Fl(.)374 922 y(Ko)r(da,)29 b(Y)-6 b(asunori,)30 b(&)f(Rusk)n(ey)-6
b(,)27 b(F)-6 b(rank.)29 b(\(1993\).)47 b(A)28 b(Gra)n(y)i(co)r(de)f
(for)h(the)f(ideals)i(of)f(a)f(forest)i(p)r(oset.)450
1013 y Fc(Journal)44 b(of)e(algorithms)p Fl(,)h Fa(15)p
Fl(\(2\),)f(324{340.)85 b Fs(URL:)38 b Fk(http://csr.csc.uvic.ca/)q
(hom)q(e/fr)q(usk)q(ey/)450 1104 y(Publications/ForestIde)q(als)q(.ps)p
Fl(.)374 1212 y(Lero)n(y)-6 b(,)36 b(Xa)n(vier,)i(Doligez,)g(Damien,)f
Fc(et)h(al.)f Fl(.)g(\(2002\).)70 b Fc(The)38 b(Obje)l(ctive)h(Caml)e
(language)p Fl(.)69 b Fs(URL:)450 1303 y Fk(http://caml.inria.fr/)p
Fl(.)374 1411 y(Reynolds,)30 b(John)g(C.)h(\(1998a\).)51
b(De\014nitional)31 b(in)n(terpreters)f(for)h(higher-order)g
(programming)e(lan-)450 1503 y(guages.)52 b Fc(Higher-or)l(der)34
b(and)f(symb)l(olic)g(c)l(omputation)p Fl(,)g Fa(11)p
Fl(\(4\),)e(363{397.)53 b Fs(URL:)28 b Fk(ftp://ftp.cs.)450
1594 y(cmu.edu/user/jcr/defin)q(t.d)q(vi.g)q(z)p Fl(.)374
1702 y(Reynolds,)23 b(John)h(C.)h(\(1998b\).)32 b(De\014nitional)25
b(in)n(terpreters)f(revisited.)31 b Fc(Higher-or)l(der)e(and)d(symb)l
(olic)450 1793 y(c)l(omputation)p Fl(,)g Fa(11)p Fl(\(4\),)e(355{361.)
34 b Fs(URL:)21 b Fk(ftp://ftp.cs.cmu.edu/u)q(ser)q(/jcr)q(/de)q(fint)q
(intr)q(o.d)q(vi.g)q(z)p Fl(.)p eop
%%Trailer
end
userdict /end-hook known{end-hook}if
%%EOF
